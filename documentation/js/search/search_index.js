var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.077,1,2.523]],["body/modules/AppModule.html",[0,2.023,1,5.06,2,2.514,3,1.671,4,2.139,5,2.139,6,1.88,7,2.139,8,2.139,9,3.34,10,3.34,11,4.425,12,0.02,13,4.425,14,3.681,15,4.098,16,2.857,17,2.139,18,2.002,19,0.216,20,0.216,21,0.191,22,3.899,23,0.438,24,4.462,25,5.209,26,2.401,27,3.434,28,5.209,29,4.462,30,3.603,31,3.603,32,5.209,33,3.971,34,3.971,35,2.674,36,4.462,37,6.26,38,2.512,39,3.31,40,1.235,41,1.894,42,3.978,43,3.971,44,2.683,45,3.31,46,1.619,47,4.462,48,3.066,49,3.31,50,5.209,51,5.209,52,5.209,53,5.209,54,3.971,55,3.603,56,4.462,57,0.492,58,0.89,59,3.899,60,3.34,61,2.972,62,3.899,63,0.216,64,0.048,65,0.014,66,0.014]],["title/controllers/AuthController.html",[67,1.872,68,2.523]],["body/controllers/AuthController.html",[12,0.02,19,0.166,20,0.166,21,0.147,23,0.628,26,1.663,38,2.091,40,1.324,44,1.858,57,0.526,58,0.684,63,0.166,64,0.037,65,0.012,66,0.012,67,1.538,68,3.863,69,1.538,70,2.567,71,2.073,72,2.996,73,2.091,74,3.305,75,2.378,76,0.291,77,1.155,78,4.365,79,3.714,80,4.517,81,3.549,82,2.996,83,1.591,84,3.84,85,2.142,86,2.996,87,2.142,88,0.766,89,2.996,90,3.238,91,1.649,92,1.342,93,0.542,94,1.209,95,5.146,96,2.867,97,3.063,98,1.738,99,2.996,100,2.996,101,2.996,102,3.714,103,2.567,104,5.584,105,3.271,106,2.931,107,2.996,108,2.996,109,3,110,2.693,111,2.226,112,1.663,113,2.567,114,4.049,115,2.996,116,2.996,117,1.757,118,3.305,119,2.996,120,2.996,121,2.567,122,2.996,123,1.764,124,2.616,125,2.567,126,3.305,127,2.996,128,2.616,129,2.996,130,3.305,131,2.996,132,2.996,133,2.996,134,2.567,135,1.764,136,1.904,137,2.567,138,3.714,139,2.073,140,2.996,141,2.567,142,1.643,143,2.073,144,2.284,145,2.284,146,2.996,147,2.996,148,2.073,149,0.758,150,2.444,151,2.996,152,2.996,153,2.142,154,2.996,155,4.336,156,2.996,157,2.996,158,2.996,159,4.336,160,2.996,161,2.996,162,2.996,163,2.996,164,2.996,165,2.996,166,2.996]],["title/modules/AuthModule.html",[0,1.077,11,2.317]],["body/modules/AuthModule.html",[0,1.852,2,1.493,3,1.493,4,1.911,5,1.911,6,1.68,7,3.277,8,1.911,11,4.547,12,0.02,14,2.646,15,2.84,16,2.646,17,1.911,18,1.789,19,0.193,20,0.193,21,0.171,23,0.392,27,1.911,34,2.656,38,3.129,40,0.641,44,2.372,49,3.066,57,0.546,58,0.795,60,2.985,61,2.656,63,0.193,64,0.043,65,0.013,66,0.013,68,3.829,69,2.842,73,2.327,75,2.646,77,0.928,81,2.214,88,0.478,91,1.029,92,0.837,93,0.338,94,0.754,98,0.928,124,3.332,125,2.985,136,3.517,137,2.985,138,2.985,167,2.985,168,2.985,169,4.124,170,4.124,171,3.484,172,4.825,173,4.825,174,5.974,175,3.484,176,3.484,177,3.484,178,4.554,179,5.535,180,2.985,181,2.41,182,4.825,183,2.41,184,3.484,185,2.656,186,3.484,187,4.133,188,3.484,189,3.338,190,3.484,191,3.484,192,3.484,193,3.484,194,2.646,195,2.985,196,2.646,197,2.985,198,1.267,199,3.036,200,3.484,201,2.41,202,2.646,203,2.41,204,3.484,205,1.412,206,3.484,207,3.484,208,1.911,209,1.911,210,3.484,211,3.338,212,2.41,213,3.484,214,4.133,215,2.985,216,2.656,217,3.484,218,2.656,219,2.985,220,2.477,221,1.68,222,4.133,223,3.484,224,2.051,225,3.484]],["title/injectables/AuthService.html",[124,1.872,226,0.832]],["body/injectables/AuthService.html",[3,1.217,12,0.02,18,0.89,19,0.096,20,0.096,21,0.085,23,0.405,26,1.089,30,1.965,34,2.165,35,0.89,38,1.739,40,1.352,41,2.049,42,1.805,44,1.217,46,1.752,48,2.708,49,1.805,55,1.965,57,0.448,58,0.396,63,0.096,64,0.021,65,0.008,66,0.008,73,1.369,76,0.168,77,0.757,78,3.572,79,2.433,80,3.767,81,1.805,83,1.521,84,3.318,87,2.436,88,0.716,90,1.102,91,1.54,92,1.254,93,0.506,94,1.129,95,2.165,96,1.458,97,1.558,98,1.692,102,3.572,103,2.433,105,2.537,106,2.486,111,0.89,112,2.404,113,2.433,114,3.46,117,2.407,123,1.021,124,2.141,134,1.485,135,1.021,143,1.199,144,1.322,145,1.322,149,1.055,150,2.404,153,1.896,178,1.322,185,1.322,196,3.484,198,1.673,202,0.951,208,1.558,226,0.648,227,0.703,228,1.485,229,3.607,230,2.84,231,1.672,232,2.433,233,2.84,234,1.852,235,1.369,236,0.979,237,2.433,238,1.638,239,1.965,240,2.811,241,3.607,242,2.433,243,2.287,244,1.734,245,2.524,246,2.495,247,2.218,248,3.977,249,2.708,250,6.063,251,1.734,252,3.179,253,2.165,254,4.601,255,3.09,256,3.607,257,3.607,258,1.734,259,1.734,260,2.165,261,3.205,262,2.574,263,3.418,264,2.84,265,1.734,266,4.17,267,1.734,268,2.749,269,2.845,270,1.734,271,1.734,272,2.65,273,4.601,274,1.734,275,3.941,276,2.433,277,2.362,278,2.84,279,1.734,280,2.433,281,2.236,282,1.69,283,1.199,284,2.433,285,4.469,286,1.734,287,1.322,288,1.485,289,1.485,290,2.455,291,1.485,292,1.485,293,1.734,294,3.607,295,2.65,296,2.433,297,3.179,298,1.734,299,2.334,300,1.734,301,2.433,302,2.909,303,2.84,304,2.433,305,2.433,306,3.609,307,2.165,308,2.165,309,2.625,310,2.433,311,2.84,312,1.734,313,1.734,314,3.09,315,2.84,316,2.84,317,2.84,318,2.433,319,1.965,320,1.734,321,1.322,322,1.199,323,1.734,324,0.951,325,0.951,326,2.885,327,2.292,328,1.485,329,2.165,330,4.17,331,1.734,332,1.734,333,1.734,334,1.734,335,1.734,336,1.734,337,1.734,338,1.734,339,1.734,340,1.485,341,1.734,342,1.485,343,1.322,344,1.102,345,2.433,346,1.734,347,2.165,348,2.433,349,1.485,350,1.199,351,1.485,352,1.734,353,1.485,354,1.734,355,2.433]],["title/injectables/BcryptProvider.html",[226,0.832,356,2.523]],["body/injectables/BcryptProvider.html",[12,0.02,19,0.197,20,0.197,21,0.174,23,0.399,46,2.197,57,0.422,58,0.811,63,0.197,64,0.069,65,0.013,66,0.013,73,2.358,76,0.345,77,1.303,83,1.612,88,0.671,91,1.444,92,1.175,93,0.475,94,1.059,98,1.74,150,2.311,153,2.145,198,2.033,208,2.682,220,1.824,226,1.374,227,1.44,235,2.358,239,3.383,240,2.397,247,2.358,263,2.458,299,1.523,309,1.713,344,4.331,356,3.383,357,3.044,358,4.189,359,3.108,360,4.189,361,4.189,362,5.161,363,4.89,364,2.682,365,2.682,366,4.89,367,4.168,368,4.189,369,5.838,370,5.924,371,3.553,372,2.905,373,4.189,374,4.189,375,3.546,376,3.108,377,4.189,378,3.728,379,4.189,380,6.024,381,4.517,382,3.553,383,3.728,384,4.263,385,6.024,386,5.592,387,2.397,388,5.161,389,1.523,390,4.89,391,3.553,392,2.708,393,4.89,394,3.553,395,2.708,396,3.553,397,3.553,398,3.553]],["title/modules/CommonModule.html",[0,1.077,194,2]],["body/modules/CommonModule.html",[0,1.99,2,2.385,3,1.848,4,2.365,5,2.365,6,2.079,7,3.052,8,3.379,12,0.02,16,3.052,17,2.365,18,2.213,19,0.239,20,0.239,21,0.211,23,0.485,26,2.497,57,0.508,58,0.984,63,0.308,64,0.053,65,0.015,66,0.015,88,0.763,117,2.496,183,2.983,194,3.851,205,2.255,215,4.767,218,4.962,219,3.694,231,3.275,235,2.683,246,3.849,247,3.431,356,3.849,358,3.694,399,3.694,400,3.694,401,4.311,402,4.767,403,4.767,404,4.767,405,4.242,406,3.832,407,3.275,408,6.161,409,4.242,410,3.052,411,4.696,412,5.564,413,4.311,414,4.311,415,4.311,416,3.694,417,4.311,418,4.311]],["title/modules/CoreModule.html",[0,1.077,13,2.317]],["body/modules/CoreModule.html",[0,1.985,2,2.951,3,1.833,4,2.346,5,2.346,6,2.063,7,2.346,8,2.346,12,0.02,13,4.66,16,3.036,17,2.346,18,2.196,19,0.237,20,0.237,21,0.21,23,0.481,24,4.742,26,2.124,27,3.036,44,2.373,49,2.718,56,4.742,57,0.49,58,0.976,63,0.237,64,0.053,65,0.015,66,0.015,73,2.669,194,3.777,199,2.346,201,2.959,218,3.261,238,1.942,419,3.664,420,3.664,421,4.376,422,4.376,423,4.277,424,5.535,425,6.137,426,5.535,427,3.83,428,5.535,429,4.742,430,4.22,431,5.535,432,5.535,433,4.742,434,5.535,435,4.742,436,4.742,437,5.535,438,5.535,439,4.277,440,4.277,441,4.277,442,4.277,443,3.664,444,2.518]],["title/classes/CreateSessionIndexes1726229695133.html",[64,0.045,445,2.78]],["body/classes/CreateSessionIndexes1726229695133.html",[12,0.02,19,0.177,20,0.177,21,0.157,40,1.308,41,2.296,57,0.241,63,0.177,64,0.04,65,0.012,66,0.012,76,0.685,77,1.211,83,0.73,88,0.725,91,1.342,92,1.518,93,0.672,94,0.984,98,1.211,128,3.243,198,1.653,220,2.334,236,1.104,240,2.707,269,1.453,281,1.372,282,1.297,299,3.17,324,3.464,387,2.606,389,1.372,445,4.387,446,1.104,447,4.931,448,2.544,449,2.214,450,3.657,451,0.984,452,3.145,453,2.889,454,2.44,455,3.145,456,4.673,457,3.2,458,2.955,459,3.145,460,2.44,461,5.116,462,4.916,463,3.982,464,3.465,465,2.44,466,3.145,467,1.884,468,3.718,469,4.014,470,4.738,471,2.44,472,2.334,473,4.387,474,2.775,475,3.2,476,3.2,477,2.214,478,2.44,479,2.44,480,2.44,481,2.44,482,1.884,483,2.44,484,2.44,485,2.44,486,2.44,487,3.2,488,3.2,489,2.44,490,2.44]],["title/classes/CreateUserDto.html",[64,0.045,491,2.146]],["body/classes/CreateUserDto.html",[12,0.02,19,0.162,20,0.162,21,0.144,23,0.711,40,0.785,46,1.325,57,0.443,63,0.162,64,0.053,65,0.011,66,0.011,76,0.284,83,1.479,85,2.252,87,2.427,88,0.868,92,1.52,93,0.57,94,1.403,97,2.338,111,2.189,112,1.635,117,1.727,142,1.606,149,1.785,202,3.03,281,2.833,282,2.563,325,3.22,446,1.009,451,0.923,491,2.51,492,5.25,493,1.86,494,2.709,495,3.25,496,3.833,497,3.252,498,4.646,499,2.927,500,2.927,501,3.894,502,4.239,503,3.238,504,2.508,505,3.652,506,4.732,507,4.941,508,6.081,509,4.263,510,2.927,511,2.927,512,5.187,513,3.25,514,5.524,515,4.732,516,5.524,517,4.732,518,3.25,519,3.652,520,2.927,521,2.927,522,3.652,523,3.652,524,4.822,525,2.927,526,4.263,527,4.211,528,4.308,529,2.949,530,3.25,531,2.927,532,2.927,533,4.263,534,3.478,535,3.652,536,3.652,537,2.927,538,2.927,539,4.263,540,3.652,541,3.652,542,4.263,543,4.211,544,4.308,545,3.652,546,2.927,547,3.833,548,1.329,549,2.51,550,2.949,551,2.025,552,2.949,553,2.508,554,2.508,555,2.508,556,2.927,557,2.927,558,2.927,559,2.927,560,2.231,561,2.927]],["title/classes/CreateUserIndexes1726228684695.html",[64,0.045,562,2.78]],["body/classes/CreateUserIndexes1726228684695.html",[12,0.02,19,0.185,20,0.185,21,0.164,40,1.343,57,0.252,63,0.185,64,0.041,65,0.012,66,0.012,76,0.662,77,1.249,83,0.763,88,0.743,91,1.384,92,1.54,93,0.678,94,1.015,98,1.249,128,3.289,198,1.705,220,2.407,236,1.153,240,2.746,281,1.433,282,1.355,299,3.15,324,3.514,387,2.649,389,1.433,446,1.153,448,2.513,449,2.313,450,3.746,451,1.015,452,3.244,453,2.98,454,2.549,455,3.244,456,4.72,458,3.013,459,3.244,460,2.549,461,5.084,462,4.95,463,4.06,464,3.574,465,2.549,466,3.244,467,1.968,468,3.771,469,4.071,470,4.645,471,2.549,472,2.407,473,4.474,474,2.611,478,2.549,479,2.549,480,2.549,481,2.549,482,1.968,483,2.549,484,2.549,485,2.549,486,2.549,489,2.549,490,2.549,562,4.474,563,5.028,564,2.865]],["title/classes/CreateUserIndexes1726229324413.html",[64,0.045,565,2.78]],["body/classes/CreateUserIndexes1726229324413.html",[12,0.02,19,0.185,20,0.185,21,0.164,40,1.343,57,0.252,63,0.185,64,0.041,65,0.012,66,0.012,76,0.662,77,1.249,83,0.763,88,0.743,91,1.384,92,1.54,93,0.678,94,1.015,98,1.249,128,3.289,198,1.705,220,2.407,236,1.153,240,2.746,281,1.433,282,1.355,299,3.15,324,3.514,387,2.649,389,1.433,446,1.153,448,2.513,449,2.313,450,3.746,451,1.015,452,3.244,453,2.98,454,2.549,455,3.244,456,4.72,458,3.013,459,3.244,460,2.549,461,5.084,462,4.95,463,4.06,464,3.574,465,2.549,466,3.244,467,1.968,468,3.771,469,4.071,470,4.645,471,2.549,472,2.407,473,4.474,474,2.611,478,2.549,479,2.549,480,2.549,481,2.549,482,1.968,483,2.549,484,2.549,485,2.549,486,2.549,489,2.549,490,2.549,564,2.865,565,4.474,566,5.028]],["title/interfaces/CustomRequest.html",[567,1.399,568,2.523]],["body/interfaces/CustomRequest.html",[12,0.02,19,0.217,20,0.217,21,0.192,23,0.441,40,1.383,41,2.592,46,2.167,57,0.444,63,0.29,65,0.014,66,0.014,76,0.38,93,0.571,105,2.684,106,2.241,111,2.684,112,2.758,123,2.308,149,1.488,221,1.89,262,1.589,269,2.374,277,2.013,290,4.103,448,1.901,451,1.358,503,3.151,513,4.483,567,2.735,568,4.34,569,2.308,570,2.988,571,2.988,572,4.478,573,4.478,574,3.523,575,3.738,576,3.985,577,3.616,578,3.985,579,2.684,580,4.272,581,2.712,582,2.988,583,3.358,584,3.358,585,2.988,586,4.478]],["title/interfaces/CustomUser.html",[290,2.146,567,1.399]],["body/interfaces/CustomUser.html",[12,0.02,19,0.214,20,0.214,21,0.19,23,0.435,40,1.382,41,2.689,46,2.211,57,0.441,63,0.287,65,0.014,66,0.014,76,0.376,93,0.567,105,3,106,2.505,111,3,112,2.772,123,2.279,149,1.479,221,2.5,262,2.101,269,2.654,277,2.661,290,4.027,448,1.407,451,1.265,503,3.01,513,4.455,567,2.701,568,3.586,569,2.279,570,2.951,571,2.951,572,3.316,573,3.316,574,3.205,575,3.294,576,2.951,577,2.678,578,2.951,579,1.987,580,4.347,581,2.678,582,3.951,583,4.441,584,4.441,585,3.951,586,5.007]],["title/modules/DatabaseModule.html",[0,1.077,421,2.317]],["body/modules/DatabaseModule.html",[0,2.046,2,1.878,12,0.02,19,0.243,20,0.243,21,0.215,23,0.493,27,3.405,42,3.573,57,0.468,58,1,63,0.243,64,0.054,65,0.015,66,0.015,73,2.711,87,2.157,88,0.771,93,0.546,197,4.816,198,2.044,199,3.592,203,3.889,234,2.886,235,2.711,236,1.939,238,3.147,282,2.278,365,3.084,410,3.084,421,4.162,453,3.573,587,4.381,588,5.622,589,5.611,590,4.732,591,4.286,592,4.816,593,5.622,594,6.208,595,4.816,596,5.622,597,4.816,598,5.622,599,4.816,600,5.622,601,3.889,602,5.622,603,3.889,604,4.286,605,5.622,606,4.286,607,2.579,608,4.381,609,4.381]],["title/interfaces/Device.html",[106,1.563,567,1.399]],["body/interfaces/Device.html",[12,0.02,19,0.254,20,0.254,21,0.224,23,0.514,63,0.254,65,0.015,66,0.015,76,0.444,83,1.643,92,1.759,93,0.561,94,1.517,106,3.157,149,1.463,202,3.17,221,2.207,451,1.251,501,3.673,503,3.209,567,1.756,569,2.694,597,3.92,603,4.604,610,3.92,611,2.908,612,5.539,613,4.576,614,3.92,615,3.92,616,3.92,617,4.576,618,4.952,619,4.952,620,5.78,621,4.383,622,5.78,623,5.78,624,5.78]],["title/modules/EnvModule.html",[0,1.077,422,2.317]],["body/modules/EnvModule.html",[0,2.129,2,2.574,12,0.02,19,0.27,20,0.27,21,0.239,23,0.547,27,2.668,57,0.491,58,1.11,63,0.27,64,0.06,65,0.016,66,0.016,117,2.433,180,5.144,181,3.365,198,2.368,199,2.668,201,4.154,205,2.433,231,2.864,364,3.294,406,2.864,410,2.668,422,3.816,603,3.365,625,4.865,626,4.577,627,4.865,628,4.168,629,4.865,630,3.708,631,4.168,632,4.865,633,3.708,634,4.865,635,4.577,636,4.865,637,4.865,638,2.346,639,4.168,640,2.668,641,4.865]],["title/classes/GenerateTables1725986093329.html",[64,0.045,642,2.78]],["body/classes/GenerateTables1725986093329.html",[12,0.02,19,0.188,20,0.188,21,0.167,40,1.088,41,2.148,57,0.256,63,0.188,64,0.042,65,0.013,66,0.013,76,0.33,77,1.263,83,0.775,87,1.303,88,0.749,91,1.399,92,1.547,93,0.641,94,1.026,96,2.803,98,1.263,105,1.744,106,1.456,128,3.305,220,2.434,236,1.171,240,2.759,262,2.394,269,2.153,281,2.032,282,1.921,299,2.972,319,2.35,324,1.863,325,1.863,387,2.832,389,1.456,392,4.504,427,3.777,446,1.171,448,2.148,450,3.777,451,1.026,452,3.279,453,3.012,455,3.279,456,4.737,458,3.034,459,3.279,461,4.798,462,3.279,463,3.777,466,2.35,468,3.79,470,4.3,474,2.633,477,2.35,482,1.999,529,3.279,530,2.589,642,4.504,643,5.062,644,2.91,645,3.396,646,3.396,647,3.396,648,5.467,649,4.74,650,5.515,651,5.909,652,2.35,653,5.909,654,4.74,655,6.607,656,3.396,657,3.396,658,4.74,659,5.46,660,3.396,661,3.396,662,3.396,663,4.061,664,2.589,665,2.589,666,3.396,667,3.396,668,3.396,669,2.91,670,4.74,671,3.396,672,3.396,673,3.396,674,4.74,675,2.35]],["title/injectables/HashingProvider.html",[226,0.832,247,1.758]],["body/injectables/HashingProvider.html",[12,0.02,19,0.204,20,0.204,21,0.18,23,0.414,46,2.256,57,0.278,58,0.84,63,0.204,64,0.079,65,0.013,66,0.013,76,0.357,77,1.335,83,1.664,88,0.839,91,1.479,92,1.204,93,0.486,94,1.084,98,1.831,150,2.185,208,2.748,226,1.143,227,1.491,235,2.416,246,3.466,247,2.416,344,3.885,359,3.885,360,4.291,367,4.23,368,4.291,369,5.886,370,5.653,372,3.313,375,3.599,376,3.184,377,4.291,378,3.819,379,4.291,395,5.03,430,3.819,458,3.617,567,1.922,676,3.153,677,7.215,678,3.466,679,5.009,680,5.009,681,5.009,682,5.009,683,3.68,684,4.661,685,6.114,686,4.291,687,6.599,688,3.68]],["title/classes/IdDto.html",[64,0.045,689,2.523]],["body/classes/IdDto.html",[12,0.02,19,0.25,20,0.25,21,0.222,23,0.645,46,1.782,57,0.433,63,0.25,64,0.082,65,0.015,66,0.015,76,0.439,83,1.639,85,1.734,88,0.62,93,0.556,96,3.51,97,2.479,112,2.2,142,2.479,149,1.594,262,2.876,389,1.937,446,1.558,451,1.241,474,2.765,494,3.644,496,3.445,497,2.66,503,3.037,543,4.371,548,2.052,576,4.371,578,4.371,611,3.644,689,3.967,690,3.871,691,3.644,692,3.644,693,3.145,694,5.734,695,4.583,696,5.734,697,4.519,698,4.519,699,4.371,700,4.912,701,3.126,702,3.871,703,3.871,704,3.445]],["title/injectables/JwtAuthGuard.html",[136,2.317,226,0.832]],["body/injectables/JwtAuthGuard.html",[0,1.362,12,0.02,19,0.181,20,0.181,21,0.16,23,0.519,30,3.699,35,2.369,38,3.387,39,3.894,57,0.438,58,0.746,63,0.181,64,0.081,65,0.012,66,0.012,75,3.187,76,0.317,77,1.229,88,0.841,91,1.362,92,1.109,93,0.448,94,0.999,98,1.633,128,3.427,136,3.692,148,2.261,149,0.827,150,1.77,153,1.77,183,2.261,196,2.531,198,1.677,216,4.429,221,2.225,224,3.995,226,1.053,227,1.324,234,2.369,235,2.225,243,2.933,309,1.576,329,3.517,350,3.699,372,1.576,387,2.49,405,4.429,406,1.924,409,3.517,444,2.716,540,3.952,574,3.265,579,2.983,580,3.398,638,2.579,678,3.192,705,4.581,706,2.491,707,5.249,708,3.192,709,3.952,710,3.517,711,4.671,712,4.614,713,4.614,714,4.614,715,4.614,716,3.268,717,6.88,718,3.268,719,3.952,720,3.952,721,4.614,722,5.448,723,3.268,724,4.614,725,3.952,726,4.614,727,2.932,728,4.019,729,4.429,730,5.347,731,3.692,732,3.398,733,2.077,734,2.491,735,3.268,736,2.491,737,2.261,738,3.952,739,3.268,740,3.268,741,4.614,742,3.268,743,3.268,744,2.8,745,3.268,746,2.8,747,3.268]],["title/interfaces/JwtPayload.html",[272,2.317,567,1.399]],["body/interfaces/JwtPayload.html",[12,0.019,19,0.275,20,0.275,21,0.243,23,0.558,31,3.435,40,1.21,63,0.275,65,0.016,66,0.016,76,0.482,83,1.632,93,0.482,96,3.122,97,3.335,110,2.394,149,1.539,196,3.335,262,2.963,269,2.761,272,3.864,307,4.635,433,4.254,451,1.316,472,2.549,503,2.394,567,2.333,569,2.923,611,3.156,614,4.254,652,3.435,701,3.435,748,4.254,749,4.254,750,4.254,751,4.254,752,3.785,753,4.965,754,4.254,755,4.965,756,4.254,757,4.965,758,4.965,759,4.965,760,4.965]],["title/injectables/JwtStrategy.html",[169,2.317,226,0.832]],["body/injectables/JwtStrategy.html",[12,0.02,19,0.24,20,0.166,21,0.147,23,0.573,35,2.228,38,2.093,39,2.758,40,1.091,46,1.349,57,0.516,58,0.684,63,0.166,64,0.073,65,0.012,66,0.012,73,2.093,76,0.291,77,1.156,88,0.767,91,1.281,92,1.043,93,0.542,94,0.939,98,1.156,112,2.445,124,3.549,149,1.098,150,2.144,153,1.151,169,3.928,181,2.076,187,4.369,196,3.929,198,2.032,199,3.39,202,2.381,203,3.003,205,1.216,208,2.381,209,2.381,211,3.866,226,0.99,227,1.216,231,3.842,243,3.252,252,2.287,269,1.971,272,3.551,277,2.228,283,3.003,288,2.57,289,2.57,295,2.758,302,2.555,307,5.069,308,4.26,326,3.003,372,2.695,407,2.555,410,1.646,427,2.076,429,3.718,444,2.555,567,1.151,574,3.467,575,2.758,579,2.869,633,2.287,638,1.447,640,3.252,693,2.381,708,3.866,719,2.57,720,2.57,731,2.758,733,1.907,736,2.287,761,2.57,762,5.588,763,4.34,764,4.34,765,4.34,766,3.718,767,3,768,5.588,769,3,770,5.099,771,4.787,772,4.34,773,4.34,774,3,775,5.099,776,3.718,777,2.758,778,3.718,779,4.34,780,3.309,781,2.57,782,2.57,783,3,784,3,785,3,786,3,787,3.309,788,3,789,3,790,3,791,2.287,792,3,793,2.57,794,3,795,3,796,3,797,2.287,798,3,799,3,800,3,801,2.287,802,2.57,803,3,804,3]],["title/injectables/LocalAuthGuard.html",[139,2.523,226,0.832]],["body/injectables/LocalAuthGuard.html",[12,0.02,19,0.266,20,0.266,21,0.235,23,0.54,33,4.54,35,3.057,38,3.264,57,0.449,58,1.095,63,0.266,64,0.08,65,0.016,66,0.016,75,3.266,139,4.683,211,4.683,212,4.907,216,4.54,226,1.359,227,1.945,501,3.785,579,3.476,706,3.659,707,5.547,709,5.102,710,4.54,733,4.115,805,4.112,806,4.12,807,3.785,808,5.955,809,5.955,810,4.54,811,5.955,812,5.955,813,5.955]],["title/injectables/LocalStrategy.html",[170,2.317,226,0.832]],["body/injectables/LocalStrategy.html",[12,0.02,19,0.197,20,0.197,21,0.174,23,0.399,26,1.874,31,3.379,38,2.355,40,1.254,54,3.724,57,0.454,58,0.809,63,0.197,64,0.078,65,0.013,66,0.013,76,0.344,77,1.604,83,1.489,87,2.652,88,0.67,91,1.442,92,1.174,93,0.474,94,1.057,98,1.302,112,2.309,124,3.549,148,2.454,149,0.898,150,2.143,153,2.143,170,3.826,211,4.368,212,3.865,226,1.114,227,1.437,234,2.508,235,2.355,242,4.185,243,3.463,280,5.157,281,2.963,282,1.979,302,2.875,306,3.379,365,2.679,372,2.903,402,4.185,406,2.875,407,2.875,410,2.679,458,2.508,497,2.875,579,3.091,640,3.302,684,3.724,693,2.679,708,4.625,727,3.104,731,3.104,733,2.254,736,4.259,737,3.379,766,4.185,780,3.724,781,5.409,782,3.039,801,3.724,807,3.104,814,3.039,815,4.885,816,4.185,817,3.547,818,3.547,819,3.724,820,4.885,821,3.547,822,4.885,823,4.885,824,4.885,825,3.547,826,3.547]],["title/classes/LoginUserDto.html",[64,0.045,827,2.523]],["body/classes/LoginUserDto.html",[12,0.02,19,0.28,20,0.28,21,0.248,57,0.464,63,0.28,64,0.076,65,0.016,66,0.016,76,0.491,83,1.573,85,2.359,87,2.542,88,0.844,93,0.597,149,1.818,281,2.84,446,1.745,451,1.331,493,3.215,548,2.297,549,3.901,550,3.499,551,3.499,699,4.688,827,4.255,828,5.677,829,5.058,830,4.333,831,4.333,832,6.15]],["title/injectables/LoginValidationMiddleware.html",[189,2.523,226,0.832]],["body/injectables/LoginValidationMiddleware.html",[12,0.02,19,0.203,20,0.203,21,0.179,23,0.561,40,0.918,46,1.55,57,0.481,58,0.834,63,0.203,64,0.081,65,0.013,66,0.013,76,0.355,77,1.329,80,3.801,88,0.779,91,1.079,92,0.878,93,0.355,94,0.791,98,1.329,117,1.481,118,2.786,135,2.152,150,2.177,189,3.45,198,1.329,205,2.021,209,2.735,220,1.876,222,5.466,224,2.152,226,1.138,227,1.481,231,3.876,240,2.432,299,1.567,302,3.341,306,4.218,309,2.404,327,3.607,355,5.223,406,2.935,407,2.152,451,1.079,548,2.264,574,3.572,575,4.283,585,4.326,638,2.94,640,2.735,692,3.169,693,2.735,702,3.131,729,2.786,744,3.131,776,4.272,777,3.169,780,4.326,827,3.45,833,4.272,834,3.131,835,4.986,836,4.556,837,7.036,838,6.096,839,3.655,840,3.45,841,3.169,842,6.096,843,6.096,844,4.986,845,3.655,846,3.655,847,3.131,848,3.655,849,4.986,850,3.655,851,3.655,852,4.272,853,4.272,854,3.655,855,3.655,856,3.655,857,3.655]],["title/interfaces/Paginated.html",[567,1.399,858,2.523]],["body/interfaces/Paginated.html",[12,0.02,19,0.294,20,0.294,21,0.26,46,2.178,63,0.294,65,0.017,66,0.017,76,0.515,93,0.68,381,4.847,451,1.37,567,2.036,569,3.124,858,4.379,859,4.546,860,6.002,861,5.796,862,6.33,863,4.546,864,4.546,865,4.546,866,4.546]],["title/injectables/PaginationProvider.html",[226,0.832,867,2.78]],["body/injectables/PaginationProvider.html",[12,0.02,19,0.175,20,0.175,21,0.155,23,0.355,46,0.98,57,0.431,58,0.719,63,0.175,64,0.039,65,0.017,66,0.012,76,0.306,77,1.199,88,0.433,91,1.328,92,0.758,93,0.437,94,1.4,98,1.199,150,2.319,153,1.21,214,3.854,226,1.026,227,1.278,234,2.309,236,1.088,240,2.247,299,1.352,309,3.246,322,3.955,350,2.182,372,2.169,387,1.352,388,2.702,410,2.467,448,1.147,458,2.309,472,1.619,527,2.404,728,3.628,836,4.475,858,3.955,860,2.702,861,3.854,863,2.702,864,3.854,865,2.702,866,3.854,867,3.429,868,2.702,869,5.244,870,3.153,871,3.955,872,5.205,873,5.542,874,5.666,875,4.898,876,4.931,877,3.153,878,4.498,879,5.717,880,4.498,881,5.365,882,4.498,883,6.285,884,4.498,885,5.244,886,5.717,887,5.384,888,5.542,889,4.492,890,4.498,891,4.498,892,4.498,893,3.854,894,3.153,895,3.153,896,3.153,897,3.153,898,2.702,899,3.153,900,3.854,901,3.153,902,3.153,903,3.153,904,3.153,905,3.153,906,3.153,907,3.153,908,3.153,909,3.153,910,3.153,911,3.854,912,3.153,913,3.153,914,2.702,915,2.702,916,3.153,917,3.153,918,3.153,919,3.153,920,3.153,921,3.153,922,3.153,923,3.153,924,3.153,925,3.153,926,3.153,927,3.153,928,3.153,929,3.153,930,3.153,931,3.153,932,2.702,933,3.153,934,3.153]],["title/classes/PaginationQueryDto.html",[64,0.045,871,2.523]],["body/classes/PaginationQueryDto.html",[12,0.02,19,0.273,20,0.273,21,0.242,57,0.372,63,0.273,64,0.075,65,0.016,66,0.016,76,0.479,85,2.323,88,0.831,93,0.588,94,1.479,149,1.807,381,4.728,387,2.595,389,2.595,446,1.701,451,1.311,547,4.995,548,2.239,871,4.189,887,5.614,888,5.614,900,5.855,935,5.614,936,4.225,937,6.055,938,4.931,939,4.931,940,6.553]],["title/classes/RegisterUserDto.html",[64,0.045,114,2.317]],["body/classes/RegisterUserDto.html",[12,0.02,19,0.267,20,0.267,21,0.236,57,0.49,63,0.267,64,0.074,65,0.016,66,0.016,76,0.468,83,1.62,85,2.489,87,2.489,88,0.89,93,0.63,114,3.795,149,1.856,281,2.781,282,2.629,446,1.663,451,1.293,493,3.064,545,5.558,548,2.189,549,3.819,550,4.131,551,3.335,552,4.488,553,4.13,830,4.13,831,4.13,941,5.809,942,4.821]],["title/classes/RegistryDates.html",[64,0.045,943,2.317]],["body/classes/RegistryDates.html",[12,0.02,19,0.209,20,0.209,21,0.185,23,0.424,57,0.284,63,0.209,64,0.08,65,0.014,66,0.014,76,0.56,85,2.474,88,0.791,93,0.56,110,3.543,221,2.455,236,2.343,238,2.804,239,3.523,322,3.523,350,3.523,430,3.882,443,4.362,446,1.3,451,1.102,474,1.818,482,3.394,638,2.455,664,4.396,665,4.396,675,3.523,711,3.882,756,4.362,797,3.882,819,5.066,943,3.236,944,5.29,945,3.23,946,4.362,947,5.037,948,5.919,949,5.29,950,5.29,951,4.362,952,3.77,953,3.77,954,5.694,955,3.523,956,6.175,957,5.092,958,5.766,959,3.77,960,3.924,961,5.29,962,4.362,963,5.092,964,5.766,965,3.77,966,5.092,967,4.707,968,5.092,969,5.092]],["title/classes/RemoveDto.html",[64,0.045,970,2.523]],["body/classes/RemoveDto.html",[12,0.02,19,0.251,20,0.251,21,0.222,23,0.645,33,4.377,46,1.785,57,0.476,63,0.251,64,0.082,65,0.015,66,0.015,76,0.439,85,1.737,88,0.621,93,0.664,94,1.481,112,2.203,142,2.484,149,1.596,205,2.686,234,2.325,375,4.115,389,1.941,446,1.562,451,1.243,494,3.649,503,3.424,504,3.879,544,4.919,547,4.377,548,2.056,574,2.325,640,2.484,692,3.649,703,3.879,704,3.452,960,4.609,962,4.919,970,3.972,971,3.879,972,4.528,973,4.528,974,4.377,975,4.528,976,4.528,977,3.879]],["title/entities/Session.html",[41,1.326,110,1.758]],["body/entities/Session.html",[12,0.02,19,0.198,20,0.198,21,0.176,23,0.403,26,1.887,40,1.33,41,2.654,57,0.424,63,0.198,64,0.044,65,0.013,66,0.013,76,0.587,83,1.493,85,2.511,88,0.898,93,0.651,96,2.525,105,3.253,106,2.926,110,2.915,111,2.525,112,1.887,123,2.109,143,2.478,196,2.698,205,1.993,236,1.235,238,2.233,262,2.276,268,3.749,269,2.877,277,2.525,305,4.213,310,4.213,451,1.065,469,4.16,474,3.156,477,3.885,611,3.126,638,2.708,652,4.182,701,3.402,732,3.126,754,4.213,947,4.182,954,4.213,978,2.109,979,3.069,980,4.811,981,3.069,982,3.582,983,4.918,984,3.582,985,3.582,986,4.918,987,4.213,988,3.582,989,4.608,990,3.582,991,3.582,992,4.213,993,3.582,994,4.918,995,3.069,996,3.069,997,3.582,998,4.918,999,3.069]],["title/controllers/SessionsController.html",[67,1.872,1000,2.523]],["body/controllers/SessionsController.html",[12,0.02,19,0.268,20,0.268,21,0.237,23,0.544,41,2.177,42,3.806,43,4.565,44,2.567,48,4.108,57,0.365,58,1.105,63,0.268,64,0.08,65,0.016,66,0.016,67,3.583,69,2.486,71,3.35,73,2.887,74,4.565,75,3.285,77,1.596,202,3.285,205,2.427,224,3.525,235,2.887,364,3.285,376,3.806,577,4.143,777,3.806,841,3.806,1000,4.143,1001,4.149,1002,5.13,1003,5.988,1004,5.988,1005,4.565,1006,5.13,1007,4.565,1008,4.843]],["title/modules/SessionsModule.html",[0,1.077,14,2]],["body/modules/SessionsModule.html",[0,2.021,2,1.945,3,1.945,4,2.489,5,2.489,6,2.188,7,3.461,8,3.461,12,0.02,14,3.896,16,3.153,17,2.489,18,2.33,19,0.251,20,0.251,21,0.223,23,0.51,27,2.489,41,1.65,44,1.945,47,4.925,48,2.671,57,0.517,58,1.035,63,0.251,64,0.056,65,0.015,66,0.015,69,2.952,81,3.654,198,2.09,205,2.33,209,2.489,236,1.565,248,3.459,249,4.353,253,3.459,364,3.153,590,3.459,607,2.671,628,3.887,777,2.884,841,2.884,978,2.671,1000,4.366,1002,3.887,1009,3.887,1010,3.887,1011,3.887,1012,4.538,1013,4.538,1014,4.538,1015,4.538,1016,3.887,1017,4.538,1018,3.887,1019,3.459]],["title/injectables/SessionsService.html",[226,0.832,249,2.146]],["body/injectables/SessionsService.html",[12,0.02,19,0.152,20,0.152,21,0.135,23,0.545,26,1.562,40,1.315,41,2.598,43,3.103,44,1.745,45,2.587,48,3.828,57,0.452,58,0.627,63,0.152,64,0.06,65,0.011,66,0.013,76,0.267,77,1.085,83,1.592,88,0.735,91,1.582,92,1.288,93,0.52,94,1.16,95,4.727,98,1.596,105,3.184,106,2.877,111,2.09,117,2.172,143,1.901,149,0.696,150,2.379,153,2.056,208,2.233,226,1.223,227,1.114,236,0.948,238,1.248,240,2.787,243,2.233,248,3.103,249,2.396,261,2.396,262,2.635,269,3.211,275,3.487,276,3.487,277,2.09,290,3.368,291,2.355,292,2.355,295,1.747,297,3.103,299,1.178,309,1.963,321,3.103,327,2.587,365,2.233,383,3.103,384,3.103,404,3.487,407,1.618,448,1.949,458,3.076,472,1.411,477,2.816,495,3.103,497,2.396,581,1.901,591,3.103,607,1.618,640,2.233,648,3.103,663,3.487,693,2.233,711,3.103,727,2.587,806,1.901,872,4.085,915,2.355,947,3.354,955,3.354,980,4.153,1020,2.355,1021,3.487,1022,4.07,1023,2.748,1024,2.748,1025,4.07,1026,2.748,1027,2.748,1028,4.848,1029,4.07,1030,2.748,1031,3.487,1032,4.07,1033,2.748,1034,4.848,1035,2.355,1036,2.748,1037,2.748,1038,4.07,1039,4.848,1040,4.07,1041,2.748,1042,2.748,1043,2.748,1044,4.07,1045,2.748,1046,2.355,1047,2.748,1048,2.095,1049,2.748,1050,2.748,1051,2.748,1052,2.355,1053,2.748,1054,2.748,1055,2.748]],["title/classes/UpdateUserDto.html",[64,0.045,1056,2.317]],["body/classes/UpdateUserDto.html",[12,0.02,19,0.235,20,0.235,21,0.208,23,0.618,35,2.824,40,1.264,46,2.01,57,0.461,63,0.235,64,0.085,65,0.015,66,0.015,76,0.411,83,1.529,85,1.625,88,0.581,93,0.534,96,2.824,109,3.805,112,2.11,135,2.493,142,2.323,149,1.546,262,2.833,446,1.461,448,1.54,451,1.191,491,3.596,493,2.692,494,3.496,496,3.229,497,3.238,498,3.805,502,3.805,503,2.652,543,4.193,548,1.923,579,3.32,692,3.496,693,3.017,699,4.193,700,4.712,750,4.712,967,4.657,1056,4.109,1057,4.712,1058,5.5,1059,5.5,1060,4.712,1061,4.193,1062,5.5,1063,6.466,1064,4.235,1065,4.235,1066,4.235,1067,4.235,1068,4.235,1069,4.235,1070,4.235,1071,4.235]],["title/entities/User.html",[40,0.671,110,1.758]],["body/entities/User.html",[12,0.02,19,0.154,20,0.154,21,0.136,23,0.312,40,1.296,41,2.322,48,3.17,57,0.434,63,0.154,64,0.06,65,0.011,66,0.011,71,2.837,76,0.558,83,1.513,85,2.502,87,2.204,88,0.895,92,1.381,93,0.653,94,0.888,98,0.74,110,2.9,153,1.065,205,1.662,236,0.958,261,3.17,262,1.976,268,3.126,281,2.463,282,2.328,324,3.152,325,3.152,365,1.523,376,1.765,387,2.737,451,0.888,469,4.059,472,1.426,474,3.198,482,2.414,506,3.514,507,3.718,512,4.38,524,4.38,529,2.837,534,4.418,554,3.514,555,2.379,581,1.921,621,3.374,638,3.198,664,3.126,665,2.117,691,2.606,695,2.837,727,1.765,732,3.652,876,3.718,911,3.514,914,4.614,943,3.954,946,3.514,947,1.921,950,2.379,951,3.514,960,1.765,961,3.514,978,1.634,981,3.514,987,3.514,989,3.126,992,3.514,995,3.514,996,2.379,999,2.379,1072,2.379,1073,3.126,1074,2.777,1075,2.777,1076,2.777,1077,3.514,1078,2.777,1079,2.777,1080,2.777,1081,2.777,1082,4.101,1083,2.777,1084,2.777,1085,4.101,1086,4.101,1087,4.101,1088,4.923,1089,2.777,1090,4.614,1091,2.777,1092,4.101,1093,4.101,1094,2.777,1095,3.514,1096,4.101,1097,2.777,1098,2.777,1099,2.777,1100,2.777,1101,2.777,1102,2.777,1103,4.101,1104,2.777,1105,2.777,1106,2.777,1107,2.379,1108,2.777,1109,2.117,1110,2.777,1111,2.777,1112,2.379,1113,2.777,1114,2.777,1115,2.777]],["title/classes/UserChangePasswordDto.html",[64,0.045,84,2.146]],["body/classes/UserChangePasswordDto.html",[12,0.02,19,0.284,20,0.284,21,0.251,57,0.386,63,0.284,64,0.063,65,0.016,66,0.016,76,0.497,83,1.579,84,3.646,85,2.376,88,0.85,90,4.233,93,0.601,149,1.823,446,1.765,451,1.341,549,4.172,550,3.541,551,3.541,1116,5.706,1117,4.385,1118,5.706,1119,5.706,1120,5.118,1121,5.118]],["title/controllers/UsersController.html",[67,1.872,1122,2.523]],["body/controllers/UsersController.html",[12,0.02,19,0.122,20,0.122,21,0.108,23,0.797,26,1.322,40,1.327,46,1.942,57,0.434,58,0.504,63,0.122,64,0.027,65,0.009,66,0.009,67,2.176,69,1.134,71,1.528,76,0.214,77,0.918,81,2.191,83,1.256,85,1.992,88,0.712,91,1.533,92,1.429,93,0.628,94,1.037,96,2.176,97,3.019,98,1.665,112,1.322,117,1.941,118,2.628,121,2.953,135,2.029,141,1.892,142,1.212,148,1.528,149,0.559,150,2.545,153,1.992,208,2.849,224,2.029,245,2.849,261,2.029,262,2.834,277,1.77,283,1.528,297,2.628,319,4.323,325,2.849,351,3.631,372,2.504,375,2.029,448,1.888,491,3.384,502,4.114,574,2.176,599,2.953,621,1.528,638,2.654,675,4.323,689,4.323,732,2.191,752,4.764,787,3.651,791,3.231,801,3.959,807,4.111,836,2.385,881,3.651,949,1.892,955,2.385,960,3.653,970,3.313,1016,2.953,1031,4.103,1048,1.684,1056,3.884,1060,2.953,1109,3.231,1122,2.385,1123,1.892,1124,3.447,1125,3.447,1126,3.447,1127,2.628,1128,4.103,1129,2.953,1130,1.892,1131,2.209,1132,2.209,1133,4.789,1134,6.249,1135,2.209,1136,6.249,1137,2.209,1138,3.447,1139,5.947,1140,4.789,1141,2.209,1142,2.209,1143,2.209,1144,3.447,1145,3.447,1146,2.209,1147,2.209,1148,2.209,1149,2.209,1150,2.209,1151,2.209,1152,2.209,1153,3.447,1154,2.209,1155,2.209,1156,2.209,1157,1.892,1158,1.892,1159,1.892,1160,5.503,1161,4.789,1162,3.447,1163,5.503,1164,2.209,1165,2.209,1166,2.209,1167,2.209,1168,2.209,1169,2.209,1170,2.209,1171,2.209,1172,2.209,1173,2.209,1174,2.209,1175,2.209,1176,2.209,1177,2.209,1178,2.209,1179,2.209,1180,2.209,1181,2.209,1182,2.209]],["title/modules/UsersModule.html",[0,1.077,15,2.146]],["body/modules/UsersModule.html",[0,1.945,2,2.327,3,1.44,4,1.843,5,1.843,6,1.62,7,2.977,8,2.977,12,0.02,14,2.58,15,4.021,16,2.58,17,1.843,18,1.725,19,0.186,20,0.186,21,0.165,23,0.378,26,2.256,27,2.977,30,4.068,31,3.254,39,2.989,40,1.309,41,2.138,42,4.077,44,2.966,45,3.737,49,3.737,55,3.254,57,0.507,58,0.766,61,2.561,63,0.186,64,0.042,65,0.013,66,0.013,69,2.415,73,2.268,74,3.586,75,2.58,87,2.256,178,4.138,194,3.226,195,2.878,209,2.58,221,2.268,238,2.671,245,3.927,246,3.254,255,5.038,260,3.586,359,2.989,367,3.254,435,4.03,590,4.138,607,1.978,633,3.586,678,3.254,691,2.989,806,3.254,807,3.737,816,4.03,836,3.254,841,2.989,978,2.769,1007,3.586,1021,4.03,1122,4.283,1159,2.878,1183,2.878,1184,2.878,1185,2.878,1186,3.359,1187,4.704,1188,4.704,1189,4.03,1190,4.03,1191,4.704,1192,4.704,1193,4.068,1194,4.03,1195,4.03,1196,4.03,1197,4.704,1198,4.704,1199,4.704,1200,4.704,1201,4.704,1202,4.704,1203,2.878,1204,3.359,1205,3.359,1206,3.359]],["title/injectables/UsersService.html",[226,0.832,245,2]],["body/injectables/UsersService.html",[12,0.02,19,0.109,20,0.109,21,0.096,23,0.353,35,1.612,40,1.355,44,1.682,45,3.49,46,0.61,57,0.431,58,0.448,63,0.109,64,0.068,65,0.008,66,0.008,76,0.19,77,0.836,83,1.432,84,2.887,87,2.579,88,0.783,90,1.247,91,1.621,92,1.414,93,0.533,94,1.189,98,1.463,117,2.225,135,1.848,144,1.496,145,1.496,149,0.794,150,1.72,153,2.315,198,2.241,226,0.716,227,0.795,234,1.007,236,0.677,237,2.689,238,2.74,240,2.942,243,2.459,245,1.722,247,2.972,253,2.393,261,2.309,262,2.764,263,3.618,281,1.345,282,1.272,284,1.681,285,2.689,287,1.496,295,1.995,296,2.689,299,2.732,301,2.689,302,3.233,306,4.07,309,2.648,314,1.681,319,2.172,321,2.991,324,1.722,325,1.722,326,1.357,327,2.493,328,3.361,342,1.681,343,1.496,344,1.247,345,2.689,347,1.496,348,1.681,349,1.681,359,1.995,364,1.722,365,1.722,367,2.172,372,2.162,375,2.309,387,0.841,389,0.841,407,3.079,444,2.309,448,1.783,468,1.848,491,3.079,495,2.393,580,2.493,591,2.393,601,1.357,607,1.155,621,1.357,675,3.799,678,2.172,731,2.493,752,4.349,807,2.849,872,4.6,873,4.705,874,3.841,875,3.841,876,4.186,881,2.393,889,1.681,898,1.681,943,1.995,960,2.849,978,1.848,1019,2.393,1035,1.681,1046,2.689,1048,4.698,1056,3.626,1061,2.393,1109,2.393,1118,2.689,1119,2.689,1128,3.841,1129,3.361,1130,2.689,1157,1.681,1158,1.681,1190,2.689,1203,1.681,1207,1.681,1208,2.689,1209,3.139,1210,3.139,1211,3.923,1212,1.962,1213,1.962,1214,3.139,1215,3.923,1216,3.139,1217,4.903,1218,3.139,1219,3.139,1220,1.962,1221,1.962,1222,1.962,1223,1.962,1224,3.139,1225,1.962,1226,3.139,1227,1.962,1228,3.139,1229,1.962,1230,1.962,1231,1.962,1232,1.962,1233,3.139,1234,1.962,1235,3.923,1236,3.923,1237,3.923,1238,1.962,1239,1.681,1240,1.681,1241,1.962,1242,1.962,1243,1.962,1244,1.962]],["title/classes/UsersSubscriber.html",[64,0.045,1193,2.523]],["body/classes/UsersSubscriber.html",[12,0.02,19,0.184,20,0.184,21,0.163,23,0.374,40,1.285,57,0.408,63,0.184,64,0.067,65,0.012,66,0.012,76,0.323,77,1.245,87,2.367,88,0.803,91,1.595,92,1.298,93,0.524,94,1.169,98,1.561,109,2.303,110,3.468,117,1.894,123,1.959,149,0.842,150,2.072,153,1.277,209,3.213,220,2.399,236,1.148,238,2.905,240,2.742,243,3.213,247,3.234,252,2.537,261,1.959,287,2.537,295,2.115,299,2.315,309,2.604,344,2.97,347,3.563,359,3.432,364,2.563,372,3.085,373,2.851,374,2.851,395,2.537,446,1.148,501,2.97,630,3.563,737,2.303,810,4.876,967,3.563,1007,4.465,1018,4.004,1061,2.537,1193,3.233,1194,4.004,1196,4.627,1239,2.851,1245,2.851,1246,4.673,1247,5.857,1248,5.401,1249,4.673,1250,4.673,1251,5.857,1252,3.328,1253,3.328,1254,4.673,1255,5.857,1256,3.328,1257,4.673,1258,6.706,1259,4.673,1260,5.857,1261,3.328,1262,3.328,1263,4.673,1264,3.328,1265,4.673,1266,3.328,1267,3.328,1268,3.328,1269,5.401,1270,3.328,1271,4.673,1272,3.328,1273,3.328]],["title/coverage.html",[1274,3.795]],["body/coverage.html",[6,1.408,12,0.02,21,0.143,40,1.015,41,1.547,64,0.087,65,0.011,66,0.011,67,2.577,68,2.02,70,2.501,84,1.718,90,1.855,93,0.283,106,1.251,110,2.052,114,1.855,117,1.183,124,1.499,126,2.225,128,1.499,130,2.225,136,1.855,139,2.02,169,1.855,170,1.855,189,2.02,199,1.601,226,1.551,228,2.501,245,1.601,247,1.408,249,1.718,272,1.855,290,1.718,356,2.02,357,2.501,392,2.225,411,2.225,445,2.225,447,2.501,448,1.825,449,3.473,468,1.718,491,1.718,492,2.501,493,3.506,549,2.505,552,2.943,562,2.225,563,2.501,565,2.225,566,2.501,567,2.25,568,2.02,570,3.243,571,3.243,610,2.501,626,2.225,642,2.225,643,2.501,644,2.501,676,2.501,689,2.02,690,2.501,695,2.02,705,2.501,706,3.243,734,2.225,748,2.501,749,2.501,761,2.501,805,2.501,814,2.501,827,2.02,828,2.501,833,2.501,834,2.501,840,2.02,858,2.02,859,2.501,867,2.225,868,2.501,871,2.02,935,2.501,936,2.501,941,2.501,943,1.855,944,2.501,945,2.501,970,2.02,971,2.501,974,2.225,979,2.501,1000,2.02,1001,2.501,1020,2.501,1056,1.855,1057,2.501,1072,2.501,1077,2.501,1116,2.501,1117,2.501,1122,2.02,1123,2.501,1127,2.225,1193,2.02,1207,2.501,1245,2.501,1274,2.225,1275,2.919,1276,2.501,1277,7.203,1278,7.553,1279,7.328,1280,4.255,1281,2.919,1282,2.501,1283,3.645,1284,2.501,1285,2.501,1286,2.501,1287,5.658,1288,5.517,1289,5.864,1290,6.32,1291,6.122,1292,3.645,1293,4.301,1294,3.645,1295,5.658,1296,4.726,1297,2.501,1298,2.501,1299,4.726,1300,2.501,1301,2.501,1302,2.919,1303,2.919,1304,2.501,1305,2.501,1306,2.501,1307,2.919,1308,2.919,1309,4.255,1310,2.919,1311,2.919]],["title/dependencies.html",[3,1.88,1312,2.608]],["body/dependencies.html",[3,2.066,12,0.02,58,1.1,64,0.074,65,0.016,66,0.016,142,2.645,181,3.335,183,3.335,185,3.675,196,3.275,212,3.335,236,1.663,362,4.13,548,2.189,575,3.064,607,2.838,708,4.488,728,3.335,733,3.064,847,4.13,1313,4.821,1314,4.821,1315,6.487,1316,4.821,1317,4.821,1318,4.821,1319,4.13,1320,4.821,1321,4.821,1322,4.821,1323,4.821,1324,4.821,1325,4.821,1326,5.971,1327,4.821,1328,5.971,1329,4.821,1330,4.821,1331,4.821,1332,4.821,1333,4.821,1334,4.13,1335,4.821,1336,4.821,1337,4.821,1338,4.821,1339,4.821,1340,4.821,1341,4.821,1342,4.821,1343,4.821,1344,4.821]],["title/miscellaneous/enumerations.html",[1345,1.792,1346,3.757]],["body/miscellaneous/enumerations.html",[12,0.019,26,2.438,40,1.357,65,0.015,66,0.015,76,0.447,205,1.866,221,2.221,239,3.186,325,2.526,353,3.945,389,3.009,444,4.048,448,1.674,467,3.74,505,3.945,522,4.972,524,4.424,528,5.443,529,4.396,530,4.844,534,3.186,601,3.186,611,4.462,691,2.927,802,3.945,1052,3.945,1073,4.844,1088,4.972,1345,2.711,1346,3.945,1347,4.972,1348,5.803,1349,5.803,1350,5.803,1351,4.605,1352,6.67,1353,4.605,1354,4.605,1355,4.605,1356,4.605,1357,4.605,1358,3.945,1359,4.605,1360,4.605,1361,4.605,1362,4.605,1363,4.605,1364,4.605,1365,4.605,1366,4.605,1367,4.605,1368,4.605,1369,4.605,1370,4.605,1371,4.605]],["title/miscellaneous/functions.html",[1345,1.792,1372,3.757]],["body/miscellaneous/functions.html",[6,3.457,12,0.018,26,2.186,65,0.018,66,0.018,76,0.553,840,4.567,1306,4.882,1345,3.355,1372,4.882,1373,5.699,1374,5.699,1375,5.699,1376,5.699]],["title/index.html",[76,0.295,1377,3.044,1378,3.044]],["body/index.html",[12,0.02,36,4.395,65,0.016,66,0.016,467,3.02,498,4.613,560,4.729,604,3.911,606,3.911,1005,3.911,1274,3.911,1379,5.13,1380,7.292,1381,5.13,1382,6.175,1383,5.13,1384,6.203,1385,5.13,1386,5.13,1387,5.13,1388,5.314,1389,5.13,1390,5.13,1391,5.13,1392,5.13,1393,5.13,1394,4.395,1395,4.395,1396,5.13,1397,5.13,1398,4.395]],["title/modules.html",[2,2.134]],["body/modules.html",[1,3.708,2,2.297,11,3.406,12,0.017,13,3.406,14,2.94,15,3.155,65,0.017,66,0.017,194,2.94,340,6.237,421,3.406,422,3.406,1399,7.28,1400,7.28,1401,7.413,1402,6.367,1403,6.367]],["title/overview.html",[1404,4.265]],["body/overview.html",[0,1.291,1,5.027,2,1.874,3,1.874,4,2.398,5,2.398,6,2.108,7,2.398,8,2.398,9,3.746,10,3.746,11,4.58,12,0.02,13,4.58,14,3.799,15,4.077,16,3.08,17,2.398,18,2.245,65,0.015,66,0.015,69,2.245,124,3.184,167,3.746,168,3.746,169,3.941,170,3.941,194,3.59,227,1.772,245,3.864,247,3.156,249,4.147,399,3.746,400,3.746,419,3.746,420,3.746,421,3.941,422,3.941,446,1.508,518,3.333,536,3.746,569,2.574,978,2.574,1009,3.746,1010,3.746,1011,3.746,1183,3.746,1184,3.746,1185,3.746,1404,3.746,1405,3.746,1406,4.372,1407,4.372,1408,4.372]],["title/properties.html",[451,0.949,1312,2.608]],["body/properties.html",[12,0.02,23,0.644,65,0.018,66,0.018,451,1.24,467,3.372,612,4.367,1394,4.908,1395,4.908,1398,4.908,1409,5.729,1410,5.729]],["title/miscellaneous/variables.html",[635,3.343,1345,1.792]],["body/miscellaneous/variables.html",[3,0.518,12,0.02,26,1.064,29,2.834,35,2.104,38,0.583,39,1.763,40,1.155,44,0.518,45,0.769,46,1.515,54,0.922,55,0.837,64,0.041,65,0.006,66,0.007,67,1.424,69,0.621,75,0.664,76,0.117,77,0.739,83,1.456,87,1.572,88,0.454,92,1.294,93,0.492,94,0.454,97,1.15,98,0.558,105,2.502,106,2.542,109,0.837,111,2.389,112,2.203,117,0.49,126,2.114,128,2.104,130,2.522,153,2.241,198,1.599,199,2.248,201,2.288,202,1.15,203,0.837,205,0.49,209,0.664,221,0.583,224,1.633,231,3.661,232,1.036,234,0.621,235,1.595,238,1.861,260,3.715,263,2.288,269,0.549,277,1.076,282,1.516,283,0.837,302,1.947,304,1.036,308,0.922,309,1.976,318,1.036,322,0.837,326,0.837,327,0.769,329,0.922,343,0.922,361,1.036,364,3.204,365,1.521,375,2.982,376,0.769,378,1.598,381,3.504,383,1.598,384,2.522,387,2.736,389,2.947,403,1.796,405,1.598,406,0.712,409,4.103,410,1.15,411,1.598,416,1.036,427,2.835,436,1.796,444,1.633,448,1.008,451,0.887,472,1.424,474,0.583,494,0.769,497,1.947,498,1.45,501,0.769,502,3.372,503,1.804,507,0.922,508,1.796,512,1.598,515,1.796,517,1.796,518,0.922,519,1.036,523,1.036,527,2.114,534,1.45,535,1.036,541,1.036,548,1.861,549,2.412,552,2.588,560,2.114,574,3.044,577,1.45,579,0.621,580,0.769,582,0.922,589,1.796,592,1.036,595,1.796,601,0.837,603,1.45,604,0.922,606,2.114,612,3.861,615,1.796,616,1.036,618,1.036,619,2.834,626,1.598,630,0.922,631,1.036,635,1.598,638,2.596,639,1.796,640,1.521,648,1.598,650,2.376,652,0.837,669,1.036,684,0.922,686,1.036,691,0.769,692,2.604,693,1.521,695,0.837,701,0.837,704,0.922,710,0.922,722,2.834,725,1.036,727,0.769,728,0.837,729,0.922,731,0.769,732,2.377,734,2.114,737,2.835,738,1.036,746,1.796,751,1.036,771,1.036,777,2.377,778,1.036,787,1.598,791,2.522,793,3.204,797,1.598,806,0.837,810,0.922,819,2.114,840,3.621,841,0.769,852,1.796,853,1.796,893,1.036,932,2.834,948,2.376,955,0.837,974,2.522,977,1.036,989,0.922,1005,1.598,1006,1.036,1019,0.922,1073,1.598,1090,1.036,1095,2.834,1107,1.036,1112,1.036,1127,1.598,1189,2.376,1195,1.036,1208,1.036,1240,1.036,1276,1.796,1282,1.036,1283,1.036,1284,1.036,1285,1.796,1286,1.036,1287,2.834,1292,1.036,1293,3.204,1294,3.986,1295,2.376,1296,3.204,1297,2.376,1298,2.376,1299,3.204,1300,2.376,1301,2.376,1304,1.036,1305,1.036,1319,2.834,1334,1.036,1345,0.712,1347,1.036,1358,1.796,1382,1.036,1388,2.376,1405,1.796,1411,1.21,1412,1.21,1413,4.873,1414,2.096,1415,2.096,1416,1.21,1417,1.21,1418,1.21,1419,1.21,1420,2.096,1421,1.21,1422,1.21,1423,1.21,1424,1.21,1425,1.21,1426,1.21,1427,2.096,1428,1.21,1429,2.773,1430,3.308,1431,2.096,1432,2.096,1433,2.096,1434,2.096,1435,3.308,1436,1.21,1437,1.21,1438,1.21,1439,2.096,1440,1.21,1441,1.21,1442,1.21,1443,1.21,1444,1.21,1445,1.21,1446,1.21,1447,1.21,1448,2.773,1449,2.773,1450,2.096,1451,1.21,1452,1.21,1453,1.21,1454,1.21,1455,1.21,1456,1.21,1457,1.21,1458,2.096,1459,1.21,1460,1.21,1461,1.21,1462,1.21,1463,1.21,1464,1.21,1465,1.21,1466,1.21,1467,2.096,1468,2.096,1469,1.21,1470,1.21,1471,4.398,1472,1.21,1473,1.21,1474,1.21,1475,1.21,1476,1.21,1477,1.21,1478,1.21,1479,1.21,1480,1.21,1481,1.21,1482,1.21,1483,1.21,1484,1.21,1485,3.74,1486,2.773,1487,2.773,1488,1.21,1489,2.773,1490,1.21,1491,1.21,1492,2.096,1493,3.308,1494,2.096,1495,1.21,1496,1.21,1497,1.21,1498,3.308,1499,1.21,1500,1.21,1501,1.21,1502,1.21,1503,1.21,1504,1.21,1505,2.773,1506,1.21,1507,2.773,1508,1.21,1509,1.21,1510,1.21,1511,1.21,1512,1.21,1513,1.21,1514,1.21,1515,1.21,1516,2.096,1517,2.096,1518,2.773,1519,4.873,1520,2.096,1521,2.096,1522,3.308,1523,1.21,1524,2.773,1525,1.21,1526,2.096,1527,2.096,1528,2.096,1529,3.308,1530,1.21,1531,1.21,1532,1.21,1533,1.21,1534,1.21,1535,1.21,1536,1.21,1537,2.096,1538,2.096,1539,1.21,1540,1.21,1541,1.21,1542,1.21,1543,1.21,1544,1.21,1545,1.21,1546,1.21,1547,1.21,1548,1.21,1549,1.21,1550,1.21,1551,1.21,1552,1.21,1553,1.21,1554,2.773,1555,1.21,1556,1.21,1557,1.21,1558,1.21,1559,1.21,1560,1.21,1561,3.74,1562,1.21,1563,2.773,1564,2.096,1565,4.398,1566,1.21,1567,2.096,1568,1.21,1569,2.773,1570,2.773,1571,1.21,1572,1.21,1573,1.21,1574,1.21,1575,3.74,1576,1.21,1577,1.21,1578,1.21,1579,1.21,1580,2.096,1581,2.096,1582,1.21,1583,1.21,1584,1.21,1585,1.21,1586,1.21,1587,1.21,1588,1.21,1589,1.21,1590,1.21,1591,1.21,1592,1.21,1593,5.383,1594,1.21,1595,2.096,1596,3.74,1597,2.096,1598,3.308,1599,3.74,1600,2.096,1601,3.308,1602,1.21,1603,2.096,1604,1.21,1605,2.096,1606,2.096,1607,2.096,1608,1.21,1609,1.21,1610,2.773,1611,2.096,1612,1.21,1613,3.74,1614,1.21,1615,1.21,1616,1.21,1617,2.096,1618,1.21,1619,1.21,1620,1.21,1621,1.21,1622,2.096,1623,1.21,1624,1.21,1625,1.21,1626,1.21,1627,1.21,1628,2.773,1629,1.21,1630,1.21,1631,1.21,1632,1.21,1633,1.21,1634,1.21,1635,1.21,1636,1.21,1637,1.21,1638,1.21,1639,1.21,1640,1.21,1641,2.096,1642,2.096,1643,2.096,1644,1.21,1645,1.21,1646,1.21,1647,1.21]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1287,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1409,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1331,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1341,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1344,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1330,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1336,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":1288,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1289,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":900,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["1.0",{"_index":623,"title":{},"body":{"interfaces/Device.html":{}}}],["1.0.0",{"_index":1337,"title":{},"body":{"dependencies.html":{}}}],["1.0.16",{"_index":1327,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1314,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1333,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1279,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":1303,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":388,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/PaginationProvider.html":{}}}],["10.0.0",{"_index":1315,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1323,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1320,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1317,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1278,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":1045,"title":{},"body":{"injectables/SessionsService.html":{}}}],["11",{"_index":1406,"title":{},"body":{"overview.html":{}}}],["127.0.0.1",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["14",{"_index":1407,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":1335,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1405,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.5",{"_index":624,"title":{},"body":{"interfaces/Device.html":{}}}],["2/2",{"_index":1291,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":1139,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":1133,"title":{},"body":{"controllers/UsersController.html":{}}}],["24",{"_index":1043,"title":{},"body":{"injectables/SessionsService.html":{}}}],["2bdd",{"_index":1068,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["3",{"_index":536,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.2.2",{"_index":1316,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1290,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["30})@index({unique",{"_index":1098,"title":{},"body":{"entities/User.html":{}}}],["31",{"_index":1039,"title":{},"body":{"injectables/SessionsService.html":{}}}],["4",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1328,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1302,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1308,"title":{},"body":{"coverage.html":{}}}],["4e7b",{"_index":1069,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["5",{"_index":1408,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":1325,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1329,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1280,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1077,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["6/6",{"_index":1309,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":1044,"title":{},"body":{"injectables/SessionsService.html":{}}}],["7.4.0",{"_index":1322,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1343,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":1339,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1281,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1307,"title":{},"body":{"coverage.html":{}}}],["8721c3c99ea4",{"_index":1071,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["9/9",{"_index":1310,"title":{},"body":{"coverage.html":{}}}],["9\\.]+)[\\);]/.exec(useragent)?.[1",{"_index":1609,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._",{"_index":1605,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._]+)[\\);]/.exec(useragent)?.[1",{"_index":1616,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9f53",{"_index":1070,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["_",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":677,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["access",{"_index":444,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["accessing",{"_index":811,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["account",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":674,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["actions",{"_index":1007,"title":{},"body":{"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["activate",{"_index":528,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["activate'})@isoptional()@isenum(userstatus",{"_index":531,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["activated",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{}}}],["activation",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["active",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["adapt",{"_index":600,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["add",{"_index":669,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":1006,"title":{},"body":{"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":577,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["adhere",{"_index":539,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":696,"title":{},"body":{"classes/IdDto.html":{}}}],["admin",{"_index":1352,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["administrative",{"_index":1353,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["affect",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":1593,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["agent.decorator.ts",{"_index":1285,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aggregating",{"_index":426,"title":{},"body":{"modules/CoreModule.html":{}}}],["algorithm",{"_index":363,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["allow",{"_index":743,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["allowed",{"_index":725,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["allowing",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":365,"title":{},"body":{"injectables/BcryptProvider.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":462,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["always",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["android",{"_index":619,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["android/.test(useragent",{"_index":1608,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1060,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":1160,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1161,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":543,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional",{"_index":544,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({description",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({enum",{"_index":525,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":1162,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1163,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1167,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_pipe",{"_index":412,"title":{},"body":{"modules/CommonModule.html":{}}}],["applicable",{"_index":622,"title":{},"body":{"interfaces/Device.html":{}}}],["application",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"injectables/LocalStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["application's",{"_index":429,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtStrategy.html":{}}}],["application'})@apiresponse({status",{"_index":1138,"title":{},"body":{"controllers/UsersController.html":{}}}],["applies",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apply",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{},"injectables/PaginationProvider.html":{}}}],["applydecorators(defaultisboolean(validationoptions",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":435,"title":{},"body":{"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["associated",{"_index":754,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Session.html":{}}}],["async",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["asynchronous",{"_index":1374,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["atom",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":706,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":718,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:33",{"_index":723,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":782,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/config/jwt.config",{"_index":783,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":735,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/dto/login",{"_index":845,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["auth/login",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["authenticated",{"_index":808,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authenticating",{"_index":815,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authentication",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":707,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":813,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":467,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["authorization",{"_index":792,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice's",{"_index":824,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["automatic",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":948,"title":{},"body":{"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1403,"title":{},"body":{"modules.html":{}}}],["await",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["badrequestexception",{"_index":843,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["badrequestexception(errors",{"_index":857,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["balancer",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":727,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":1359,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":362,"title":{},"body":{"injectables/BcryptProvider.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":398,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.gensalt(roundssalt",{"_index":394,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcrypt.hash(data",{"_index":397,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["bcryptprovider",{"_index":356,"title":{"injectables/BcryptProvider.html":{}},"body":{"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["bcryptservice",{"_index":358,"title":{},"body":{"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{}}}],["bearer",{"_index":794,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":810,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["beforeinsert",{"_index":1249,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeinsert(event",{"_index":1254,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1250,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate(event",{"_index":1259,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["behind",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["being",{"_index":1637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":596,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["between",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":375,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["boolean'})@isoptional()@isboolean",{"_index":972,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator",{"_index":976,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator.ts",{"_index":1293,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["booleans",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1401,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1399,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":369,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["bug",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":932,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["builder",{"_index":903,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["buildmessage",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["built",{"_index":573,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["business",{"_index":1190,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["calculate",{"_index":928,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["call",{"_index":719,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["callback",{"_index":800,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["called",{"_index":402,"title":{},"body":{"modules/CommonModule.html":{},"injectables/LocalStrategy.html":{}}}],["calling",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calls",{"_index":801,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["canactivate",{"_index":715,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":721,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":1093,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cases",{"_index":616,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["central",{"_index":424,"title":{},"body":{"modules/CoreModule.html":{}}}],["certain",{"_index":540,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["change",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changelog",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changepassword",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["changes",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":650,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":737,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":64,"title":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":446,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{},"overview.html":{}}}],["clean",{"_index":1200,"title":{},"body":{"modules/UsersModule.html":{}}}],["client's",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":399,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":400,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":419,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":420,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule",{"_index":1009,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule_exports",{"_index":1010,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule_providers",{"_index":1011,"title":{},"body":{"modules/SessionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1183,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1184,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1185,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":469,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["column()@index",{"_index":984,"title":{},"body":{"entities/Session.html":{}}}],["column(undefined",{"_index":1083,"title":{},"body":{"entities/User.html":{}}}],["column({length",{"_index":1076,"title":{},"body":{"entities/User.html":{}}}],["column({select",{"_index":1080,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":981,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column({unique",{"_index":995,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["combines",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commas",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commented",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["commit",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint.config.ts",{"_index":1276,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commitlint/config",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint/format",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":443,"title":{},"body":{"modules/CoreModule.html":{},"classes/RegistryDates.html":{}}}],["common/common.module",{"_index":439,"title":{},"body":{"modules/CoreModule.html":{}}}],["commonmodule",{"_index":194,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":367,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["compare(data",{"_index":368,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compared",{"_index":1357,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compares",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["comparing",{"_index":360,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["compodoc/compodoc",{"_index":1313,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":1021,"title":{},"body":{"injectables/SessionsService.html":{},"modules/UsersModule.html":{}}}],["compression",{"_index":1332,"title":{},"body":{"dependencies.html":{}}}],["concerns",{"_index":1202,"title":{},"body":{"modules/UsersModule.html":{}}}],["concrete",{"_index":680,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["conditions",{"_index":891,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["config",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/database.config",{"_index":608,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/jwt.config",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":632,"title":{},"body":{"modules/EnvModule.html":{}}}],["configtype",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["conforms",{"_index":578,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["connect",{"_index":1208,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":589,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["consecutive",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considered",{"_index":1113,"title":{},"body":{"entities/User.html":{}}}],["console.log('user",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":655,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["constraints",{"_index":542,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(authservice",{"_index":817,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(hashingprovider",{"_index":1252,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["constructor(jwtconfiguration",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":716,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(sessionrepository",{"_index":1023,"title":{},"body":{"injectables/SessionsService.html":{}}}],["constructor(userrepository",{"_index":1212,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(loginvalidationmiddleware).forroutes('auth/login",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{}}}],["contain",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["container",{"_index":1216,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["content",{"_index":522,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["context",{"_index":405,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":742,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":740,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["continuous",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["control",{"_index":905,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('sessions",{"_index":1008,"title":{},"body":{"controllers/SessionsController.html":{}}}],["controller('users",{"_index":1166,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["conventional",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convert",{"_index":848,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["converted",{"_index":1641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core/common/common.module",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["core/common/decorators/validators/is",{"_index":550,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["core/common/dto/id.dto",{"_index":1164,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/remove.dto",{"_index":1165,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/user",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["core/common/embedded/registry",{"_index":1100,"title":{},"body":{"entities/User.html":{}}}],["core/common/enums/user",{"_index":554,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["core/common/interfaces/custom",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/device.interface",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/jwt",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["core/common/providers/hashing.provider",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["core/core.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["correcting",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corresponding",{"_index":812,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["coverage",{"_index":1274,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cpu",{"_index":1604,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":448,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1168,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1130,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(userid",{"_index":1026,"title":{},"body":{"injectables/SessionsService.html":{}}}],["created",{"_index":955,"title":{},"body":{"classes/RegistryDates.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":482,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":969,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createdatecolumn()@index({unique",{"_index":952,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createparamdecorator",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["createsessionindexes1726229695133",{"_index":445,"title":{"classes/CreateSessionIndexes1726229695133.html":{}},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"coverage.html":{}}}],["createuserdto",{"_index":491,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserindexes1726228684695",{"_index":562,"title":{"classes/CreateUserIndexes1726228684695.html":{}},"body":{"classes/CreateUserIndexes1726228684695.html":{},"coverage.html":{}}}],["createuserindexes1726229324413",{"_index":565,"title":{"classes/CreateUserIndexes1726229324413.html":{}},"body":{"classes/CreateUserIndexes1726229324413.html":{},"coverage.html":{}}}],["creating",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":949,"title":{},"body":{"classes/RegistryDates.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["crud",{"_index":1191,"title":{},"body":{"modules/UsersModule.html":{}}}],["cryptographic",{"_index":682,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["ctx",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":580,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1364,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currentpage",{"_index":865,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["currentpassword",{"_index":1118,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":409,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["customizing",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customrequest",{"_index":568,"title":{"interfaces/CustomRequest.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["customuser",{"_index":290,"title":{"interfaces/CustomUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionsService.html":{},"coverage.html":{}}}],["customuser.data",{"_index":1055,"title":{},"body":{"injectables/SessionsService.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiparam({name",{"_index":1154,"title":{},"body":{"controllers/UsersController.html":{}}}],["data_source_database",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_host",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_password",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_port",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_url",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_username",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":440,"title":{},"body":{"modules/CoreModule.html":{}}}],["databaseconfig",{"_index":594,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databaseentity",{"_index":1268,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["databaseentity.password",{"_index":1272,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["databasemodule",{"_index":421,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["date",{"_index":947,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["date(date.now",{"_index":1042,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dates",{"_index":951,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dates.embedded",{"_index":1101,"title":{},"body":{"entities/User.html":{}}}],["dates.embedded.ts",{"_index":945,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["dates.embedded.ts:20",{"_index":953,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:27",{"_index":965,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:35",{"_index":959,"title":{},"body":{"classes/RegistryDates.html":{}}}],["days",{"_index":1040,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dcbec18c",{"_index":1067,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["deactivate",{"_index":529,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":1365,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["debugging",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":703,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{}}}],["declares",{"_index":1188,"title":{},"body":{"modules/UsersModule.html":{}}}],["decoded",{"_index":779,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorated",{"_index":1003,"title":{},"body":{"controllers/SessionsController.html":{}}}],["decorator",{"_index":364,"title":{},"body":{"injectables/BcryptProvider.html":{},"modules/EnvModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{}}}],["decorators/ipaddress.decorator",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user.decorator",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/validators/is",{"_index":975,"title":{},"body":{"classes/RemoveDto.html":{}}}],["default",{"_index":387,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaults",{"_index":1090,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["defines",{"_index":691,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":582,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"miscellaneous/variables.html":{}}}],["delegate",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["delete",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":1179,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({description",{"_index":1148,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteat",{"_index":665,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deleted",{"_index":961,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deletedat",{"_index":1087,"title":{},"body":{"entities/User.html":{}}}],["deletedatecolumn",{"_index":958,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deleting",{"_index":1219,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletion",{"_index":950,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dependency",{"_index":1019,"title":{},"body":{"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["deps",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describing",{"_index":694,"title":{},"body":{"classes/IdDto.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"properties.html":{}}}],["destructure",{"_index":1265,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["details",{"_index":585,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["detection",{"_index":1621,"title":{},"body":{"miscellaneous/variables.html":{}}}],["determine",{"_index":1112,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":724,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["development",{"_index":604,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device",{"_index":106,"title":{"interfaces/Device.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":601,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["differs",{"_index":1270,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["docs",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1127,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["documenting",{"_index":1058,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":1236,"title":{},"body":{"injectables/UsersService.html":{}}}],["don't",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dots",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":452,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["down(queryrunner",{"_index":455,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["drop",{"_index":470,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["dto",{"_index":692,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["dto/create",{"_index":1157,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/pagination",{"_index":894,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["dto/register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":1158,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos",{"_index":1645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["due",{"_index":1369,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["during",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["e.g",{"_index":603,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1389,"title":{},"body":{"index.html":{}}}],["each",{"_index":989,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["eachprefix",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easier",{"_index":599,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/UsersController.html":{}}}],["easily",{"_index":436,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["embedded",{"_index":1085,"title":{},"body":{"entities/User.html":{}}}],["enable",{"_index":633,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["enableimplicitconversion",{"_index":1643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":1639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabling",{"_index":1218,"title":{},"body":{"injectables/UsersService.html":{}}}],["encapsulates",{"_index":1199,"title":{},"body":{"modules/UsersModule.html":{}}}],["encapsulating",{"_index":431,"title":{},"body":{"modules/CoreModule.html":{}}}],["encrypted",{"_index":370,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["encryption",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1136,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoints",{"_index":1125,"title":{},"body":{"controllers/UsersController.html":{}}}],["enforces",{"_index":702,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["enforcing",{"_index":1633,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":1647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensure",{"_index":915,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{}}}],["ensures",{"_index":701,"title":{},"body":{"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["ensuring",{"_index":806,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":978,"title":{},"body":{"entities/Session.html":{},"modules/SessionsModule.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["entities/session.entity",{"_index":1013,"title":{},"body":{"modules/SessionsModule.html":{}}}],["entities/user.entity",{"_index":1203,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":110,"title":{"entities/Session.html":{},"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["entity.${field",{"_index":923,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["entity.id",{"_index":921,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["entity.password",{"_index":1269,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["entitysubscriberinterface",{"_index":1248,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["entry",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":534,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["enum('activate",{"_index":660,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enum('admin",{"_index":466,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["enumeration",{"_index":1363,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1346,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.constants",{"_index":627,"title":{},"body":{"modules/EnvModule.html":{}}}],["env/env.module",{"_index":441,"title":{},"body":{"modules/CoreModule.html":{}}}],["env_validation_schema",{"_index":626,"title":{},"body":{"modules/EnvModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":602,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["envmodule",{"_index":422,"title":{"modules/EnvModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/EnvModule.html":{},"modules.html":{},"overview.html":{}}}],["error",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":842,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["errors.length",{"_index":856,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["essential",{"_index":442,"title":{},"body":{"modules/CoreModule.html":{}}}],["etc",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1258,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["events",{"_index":1196,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["eventsubscriber",{"_index":1263,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["example",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exec(useragent)?.[2",{"_index":1606,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execute",{"_index":924,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["execution",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":722,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":1237,"title":{},"body":{"injectables/UsersService.html":{}}}],["expandvariables",{"_index":637,"title":{},"body":{"modules/EnvModule.html":{}}}],["expansion",{"_index":634,"title":{},"body":{"modules/EnvModule.html":{}}}],["expirationdate",{"_index":586,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["expire",{"_index":986,"title":{},"body":{"entities/Session.html":{}}}],["expired",{"_index":1034,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expiry",{"_index":1038,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expirydate",{"_index":477,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["export",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":575,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["expression",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extending",{"_index":572,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["extends",{"_index":579,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["external",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":1601,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extracting",{"_index":788,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraction",{"_index":785,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":784,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":790,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":791,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failure",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":732,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["false})@index",{"_index":1078,"title":{},"body":{"entities/User.html":{}}}],["faster",{"_index":879,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["feat",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feature",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["fetch",{"_index":1140,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":819,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PaginationProvider.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["files",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["filtering",{"_index":890,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["filters",{"_index":909,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["find",{"_index":1048,"title":{},"body":{"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1128,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":1129,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":1173,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(undefined",{"_index":1142,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":1222,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1210,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1224,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionsrelations",{"_index":875,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":873,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fix",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixes",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fk_e1dde0bd0402cc9b1967c40a1b3",{"_index":670,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["flag",{"_index":1181,"title":{},"body":{"controllers/UsersController.html":{}}}],["flexibility",{"_index":597,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{}}}],["following",{"_index":631,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":853,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":671,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["format",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["format'})@isstring()@isuuid",{"_index":697,"title":{},"body":{"classes/IdDto.html":{}}}],["formatter",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatting",{"_index":541,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["forwarded",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forwardref",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":428,"title":{},"body":{"modules/CoreModule.html":{}}}],["full",{"_index":1355,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["function",{"_index":840,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functionalities",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["functionality",{"_index":430,"title":{},"body":{"modules/CoreModule.html":{},"injectables/HashingProvider.html":{},"classes/RegistryDates.html":{}}}],["functions",{"_index":1372,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":1051,"title":{},"body":{"injectables/SessionsService.html":{}}}],["generate",{"_index":392,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generated",{"_index":396,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["generates",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["generatetables1725986093329",{"_index":642,"title":{"classes/GenerateTables1725986093329.html":{}},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generating",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":1172,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({description",{"_index":1143,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({description",{"_index":1137,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@user('id",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile(userid",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsalt",{"_index":393,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["getsessions",{"_index":1022,"title":{},"body":{"injectables/SessionsService.html":{}}}],["getsessions(customuser",{"_index":1029,"title":{},"body":{"injectables/SessionsService.html":{}}}],["getter",{"_index":1111,"title":{},"body":{"entities/User.html":{}}}],["getting",{"_index":1377,"title":{"index.html":{}},"body":{}}],["given",{"_index":383,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["graph",{"_index":1402,"title":{},"body":{"modules.html":{}}}],["grouping",{"_index":1126,"title":{},"body":{"controllers/UsersController.html":{}}}],["guard",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["guards",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/jwt",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/local",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":729,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{}}}],["handling",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["hash",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hash(data",{"_index":379,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["hashed",{"_index":395,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"classes/UsersSubscriber.html":{}}}],["hashing",{"_index":359,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hashing.provider",{"_index":391,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["hashingprovider",{"_index":247,"title":{"injectables/HashingProvider.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"injectables/HashingProvider.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["hashingservice",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/HashingProvider.html":{},"modules/UsersModule.html":{}}}],["header",{"_index":793,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":778,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helping",{"_index":758,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["here",{"_index":1622,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":592,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":1189,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@useguards(jwtauthguard)@post('change",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://minidocs.com",{"_index":1397,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":1144,"title":{},"body":{"controllers/UsersController.html":{}}}],["iddto",{"_index":689,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["identification",{"_index":1625,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":695,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifies",{"_index":753,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["identify",{"_index":615,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["identifying",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["idx_065d4d8f3b5adb4a08841eae3c",{"_index":478,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["idx_232f8e85d7633bd6ddfad42169",{"_index":475,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{}}}],["idx_78a916df40e02a9deb1c4b75ed",{"_index":480,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["idx_d051e3dbf62fe9574dee6570ce",{"_index":476,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{}}}],["idx_e11e649824a45d8ed01d597fd9",{"_index":481,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["idx_e12875dfb3b1d92d7d7c5377e2",{"_index":479,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["immutability",{"_index":757,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["implement",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["implementation",{"_index":416,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["implemented",{"_index":679,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["implements",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["import",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["imported",{"_index":629,"title":{},"body":{"modules/EnvModule.html":{}}}],["importing",{"_index":425,"title":{},"body":{"modules/CoreModule.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["improvement",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["included",{"_index":892,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["includes",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["including",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":777,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indexes.ts",{"_index":449,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"coverage.html":{}}}],["indexes.ts:4",{"_index":454,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["indexes.ts:44",{"_index":564,"title":{},"body":{"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["indexes.ts:50",{"_index":457,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{}}}],["indexes.ts:6",{"_index":460,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["indicate",{"_index":977,"title":{},"body":{"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1596,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicating",{"_index":376,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["information",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["initialize",{"_index":630,"title":{},"body":{"modules/EnvModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1375,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["inject(forwardref",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["inject(jwtconfig.key",{"_index":786,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":226,"title":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":404,"title":{},"body":{"modules/CommonModule.html":{},"injectables/SessionsService.html":{}}}],["injecting",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UsersSubscriber.html":{}}}],["injection",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":1035,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(session",{"_index":1037,"title":{},"body":{"injectables/SessionsService.html":{}}}],["injectrepository(user",{"_index":1215,"title":{},"body":{"injectables/UsersService.html":{}}}],["injects",{"_index":1214,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inserted",{"_index":1257,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["insertevent",{"_index":1255,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["inserting",{"_index":1266,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["installation",{"_index":1379,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1381,"title":{},"body":{"index.html":{}}}],["instance",{"_index":407,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["integrate",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["integration",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["integrity",{"_index":760,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["intel|ppc",{"_index":1611,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interact",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":567,"title":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingProvider.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":569,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/paginated.interface",{"_index":897,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["invalid",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["invokes",{"_index":823,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["ios",{"_index":1597,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ip",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["ip.split(',')[0].replace",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipaddress",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iphone",{"_index":618,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["ips",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_password_key",{"_index":1297,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":734,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_username_key",{"_index":1300,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":974,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":1114,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":545,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":546,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":559,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isnotempty",{"_index":832,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isstring",{"_index":829,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":547,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RemoveDto.html":{}}}],["isoptional()@ispositive",{"_index":937,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispassword",{"_index":549,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispassword(value",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispositive",{"_index":940,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispublic",{"_index":738,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":699,"title":{},"body":{"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isusername",{"_index":552,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isusername(value",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuuid",{"_index":700,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["it's",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{}}}],["itemsperpages",{"_index":863,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["joi",{"_index":1334,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["joi.number().required",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":652,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt_secret_key",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":136,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconfiguration",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.secret",{"_index":796,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":789,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":272,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwts",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":169,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["keeps",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":427,"title":{},"body":{"modules/CoreModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["keyof",{"_index":898,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["last",{"_index":966,"title":{},"body":{"classes/RegistryDates.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["length(0",{"_index":561,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":741,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["leverages",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1398,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":366,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["lightweight",{"_index":878,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["limit",{"_index":888,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["limited",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["links",{"_index":934,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["linux",{"_index":1617,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linux/i.test(useragent",{"_index":1619,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":1031,"title":{},"body":{"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["listen",{"_index":1264,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["listens",{"_index":1194,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["listento",{"_index":1251,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["literal",{"_index":862,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":139,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":170,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["login(user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":849,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["loginuserdto",{"_index":827,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["loginvalidationmiddleware",{"_index":189,"title":{"injectables/LoginValidationMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["longer",{"_index":1366,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercase",{"_index":535,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":1598,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macos",{"_index":1610,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["mainly",{"_index":1360,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maintain",{"_index":759,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["maintained",{"_index":438,"title":{},"body":{"modules/CoreModule.html":{}}}],["making",{"_index":598,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["manage",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/RegistryDates.html":{},"miscellaneous/enumerations.html":{}}}],["managed",{"_index":437,"title":{},"body":{"modules/CoreModule.html":{}}}],["management",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["manages",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["mandatory",{"_index":613,"title":{},"body":{"interfaces/Device.html":{}}}],["many",{"_index":1096,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":998,"title":{},"body":{"entities/Session.html":{}}}],["manytoone(undefined",{"_index":991,"title":{},"body":{"entities/Session.html":{}}}],["map",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mark",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"injectables/SessionsService.html":{}}}],["marks",{"_index":1246,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["matches",{"_index":378,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"miscellaneous/variables.html":{}}}],["matches(value",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":931,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["maximum",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["meaning",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":860,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["metadata",{"_index":728,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/PaginationProvider.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":372,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["middlewareconsumer",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/login",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["migrationinterface",{"_index":450,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["minimal",{"_index":883,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["miscellaneous",{"_index":1345,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1384,"title":{},"body":{"index.html":{}}}],["modified",{"_index":756,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{}}}],["modifier",{"_index":755,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["modify",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modular",{"_index":434,"title":{},"body":{"modules/CoreModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohamadreza",{"_index":1394,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mohmadreza",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["more",{"_index":904,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["morethan",{"_index":1036,"title":{},"body":{"injectables/SessionsService.html":{}}}],["morethan(new",{"_index":1050,"title":{},"body":{"injectables/SessionsService.html":{}}}],["mosalli",{"_index":1395,"title":{},"body":{"index.html":{},"properties.html":{}}}],["multiple",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":1187,"title":{},"body":{"modules/UsersModule.html":{}}}],["needed",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":1063,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["nestjs",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["nestjs's",{"_index":1626,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1318,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":733,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1321,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":607,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":844,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nestmodule",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/EnvModule.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":1028,"title":{},"body":{"injectables/SessionsService.html":{}}}],["newpassword",{"_index":1119,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":837,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nextfunction",{"_index":838,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["node_env",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["non",{"_index":1630,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":745,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["notfoundexception",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["now",{"_index":663,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{}}}],["npm",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt",{"_index":1615,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt/.test(useragent",{"_index":1614,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":648,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":992,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["number",{"_index":381,"title":{},"body":{"injectables/BcryptProvider.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["obj",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["object.keys(relations",{"_index":912,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["objectliteral",{"_index":896,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["objects",{"_index":1646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtain",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurs",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["one",{"_index":1095,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":1103,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1091,"title":{},"body":{"entities/User.html":{}}}],["operating",{"_index":1618,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["optimized",{"_index":882,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["option",{"_index":1628,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":410,"title":{},"body":{"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["orchestrates",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["organizing",{"_index":432,"title":{},"body":{"modules/CoreModule.html":{}}}],["original",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["os",{"_index":1599,"title":{},"body":{"miscellaneous/variables.html":{}}}],["others",{"_index":593,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["otherwise",{"_index":731,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["over",{"_index":906,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["overall",{"_index":1198,"title":{},"body":{"modules/UsersModule.html":{}}}],["overhead",{"_index":884,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["overrides",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["overview",{"_index":1404,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":980,"title":{},"body":{"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["ownerid",{"_index":654,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["owns",{"_index":994,"title":{},"body":{"entities/Session.html":{}}}],["package",{"_index":1312,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":887,"title":{},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{}}}],["pages",{"_index":930,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginate",{"_index":880,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginated",{"_index":858,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginatequery",{"_index":869,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginatequery(paginationquery",{"_index":870,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["pagination",{"_index":886,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationprovider",{"_index":867,"title":{"injectables/PaginationProvider.html":{}},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["paginationquery",{"_index":885,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.limit",{"_index":901,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquery.page",{"_index":899,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["paginationquerydto",{"_index":871,"title":{"classes/PaginationQueryDto.html":{}},"body":{"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["param",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["param0",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["param1",{"_index":1178,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["parent",{"_index":720,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["parsed",{"_index":1623,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parserpreset",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parses",{"_index":1624,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{}}}],["partialtype",{"_index":1066,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":1062,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participating",{"_index":1362,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["passes",{"_index":730,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passing",{"_index":799,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passport",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy",{"_index":781,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":798,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["password.decorator",{"_index":551,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["password.decorator.ts",{"_index":1296,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":1117,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:5",{"_index":1120,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":1121,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["passwordmatches",{"_index":1271,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["passwordregex",{"_index":1298,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":361,"title":{},"body":{"injectables/BcryptProvider.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":1156,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1175,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({description",{"_index":1152,"title":{},"body":{"controllers/UsersController.html":{}}}],["pattern",{"_index":1595,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":749,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["perf",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performance",{"_index":893,"title":{},"body":{"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["performs",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1356,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1338,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":403,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":668,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["pk_f55da76ac1c3ac420f444d2ff11",{"_index":657,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["plain",{"_index":373,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/UsersSubscriber.html":{}}}],["plaintoinstance",{"_index":846,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["plaintoinstance(loginuserdto",{"_index":850,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["point",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["populated",{"_index":956,"title":{},"body":{"classes/RegistryDates.html":{}}}],["port",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":526,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["possibly",{"_index":802,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["post",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({description",{"_index":1131,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["preform",{"_index":1209,"title":{},"body":{"injectables/UsersService.html":{}}}],["present",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":1635,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarily",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":658,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["primarygeneratedcolumn",{"_index":999,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":987,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["private",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["privileges",{"_index":1354,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["proceed",{"_index":744,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["process",{"_index":746,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":1638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":1192,"title":{},"body":{"modules/UsersModule.html":{}}}],["processing",{"_index":1004,"title":{},"body":{"controllers/SessionsController.html":{}}}],["production",{"_index":606,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["project",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":458,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{}}}],["promise.all",{"_index":925,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["promoting",{"_index":433,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/JwtPayload.html":{}}}],["properly",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":451,"title":{"properties.html":{}},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["propertydecorator",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protect",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["protecting",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["provide",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{}}}],["provided",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationProvider.html":{},"classes/RemoveDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":1018,"title":{},"body":{"modules/SessionsModule.html":{},"classes/UsersSubscriber.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["providers/bcrypt.provider",{"_index":415,"title":{},"body":{"modules/CommonModule.html":{}}}],["providers/hashing.provider",{"_index":414,"title":{},"body":{"modules/CommonModule.html":{}}}],["provides",{"_index":678,"title":{},"body":{"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["proxied",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public\".\"idx_065d4d8f3b5adb4a08841eae3c",{"_index":486,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["public\".\"idx_232f8e85d7633bd6ddfad42169",{"_index":488,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{}}}],["public\".\"idx_78a916df40e02a9deb1c4b75ed",{"_index":484,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["public\".\"idx_d051e3dbf62fe9574dee6570ce",{"_index":487,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{}}}],["public\".\"idx_e11e649824a45d8ed01d597fd9",{"_index":483,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["public\".\"idx_e12875dfb3b1d92d7d7c5377e2",{"_index":485,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["public\".\"user_role_enum",{"_index":463,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["public\".\"user_role_enum_old",{"_index":473,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["public\".\"user_status_enum",{"_index":659,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public()@httpcode(httpstatus.ok)@useguards(localauthguard)@post('login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":881,"title":{},"body":{"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto",{"_index":895,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["query.dto.ts",{"_index":936,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":939,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":938,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["querybuilder",{"_index":907,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querybuilder.getcount",{"_index":927,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querybuilder.leftjoinandselect(`entity.${relation",{"_index":913,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querybuilder.select",{"_index":920,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querybuilder.skip(skip).take(limit).getmany",{"_index":926,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["querybuilder.where(where",{"_index":910,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["queryrunner",{"_index":456,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["queryrunner.query",{"_index":461,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["raw",{"_index":685,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["read",{"_index":704,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["reasons",{"_index":1371,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receives",{"_index":1169,"title":{},"body":{"controllers/UsersController.html":{}}}],["record",{"_index":963,"title":{},"body":{"classes/RegistryDates.html":{}}}],["recover",{"_index":1110,"title":{},"body":{"entities/User.html":{}}}],["recovered",{"_index":1108,"title":{},"body":{"entities/User.html":{}}}],["refactor",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":672,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["reflect",{"_index":1340,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":717,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["regex",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registered",{"_index":1016,"title":{},"body":{"modules/SessionsModule.html":{},"controllers/UsersController.html":{}}}],["registers",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":114,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["registry",{"_index":1086,"title":{},"body":{"entities/User.html":{}}}],["registrydates",{"_index":943,"title":{"classes/RegistryDates.html":{}},"body":{"classes/RegistryDates.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["regular",{"_index":1358,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rejects",{"_index":854,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["related",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["relation",{"_index":911,"title":{},"body":{"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["relations",{"_index":874,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["release",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relevant",{"_index":1195,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["remove",{"_index":1109,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1180,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":1226,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":1147,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":1107,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["removedto",{"_index":970,"title":{"classes/RemoveDto.html":{}},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["removes",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["removing",{"_index":962,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{}}}],["rename",{"_index":464,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["replace",{"_index":1602,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/_/g",{"_index":1607,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":1612,"title":{},"body":{"miscellaneous/variables.html":{}}}],["report",{"_index":617,"title":{},"body":{"interfaces/Device.html":{}}}],["repositories",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":872,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["repository.createquerybuilder('entity",{"_index":908,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["represent",{"_index":583,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["representation",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["representing",{"_index":946,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["represents",{"_index":611,"title":{},"body":{"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["req",{"_index":776,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["req.body",{"_index":851,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["req.headers?.authorization.replace('bearer",{"_index":804,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":574,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":1594,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['x",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.interface",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["request.interface.ts",{"_index":571,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["request.user",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requested",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":841,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["requirements",{"_index":523,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":681,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["res",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":687,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["resources",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalAuthGuard.html":{},"classes/RemoveDto.html":{}}}],["respective",{"_index":1644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":836,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["responsible",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["results",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["rethrows",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieval",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieve",{"_index":787,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["retrieved",{"_index":1053,"title":{},"body":{"injectables/SessionsService.html":{}}}],["retrieves",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["retrieving",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returning",{"_index":686,"title":{},"body":{"injectables/HashingProvider.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["revert",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reverts",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reviewing",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["role",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["role\"::\"text\"::\"public\".\"user_role_enum",{"_index":471,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["role\"::\"text\"::\"public\".\"user_role_enum_old",{"_index":489,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["role.enum",{"_index":1102,"title":{},"body":{"entities/User.html":{}}}],["role.enum.ts",{"_index":1348,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1351,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":386,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["roundssalt",{"_index":380,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["route",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["rule",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rules",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1382,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1342,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":385,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["save",{"_index":1046,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["saves",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["schema",{"_index":639,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scopes",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scripts",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":795,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":1082,"title":{},"body":{"entities/User.html":{}}}],["see",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":876,"title":{},"body":{"injectables/PaginationProvider.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["select.map((field",{"_index":918,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["selected",{"_index":914,"title":{},"body":{"injectables/PaginationProvider.html":{},"entities/User.html":{}}}],["send",{"_index":1153,"title":{},"body":{"controllers/UsersController.html":{}}}],["sent",{"_index":1059,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["separation",{"_index":1201,"title":{},"body":{"modules/UsersModule.html":{}}}],["serves",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["service",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["services",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["session",{"_index":41,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["session.owner",{"_index":1092,"title":{},"body":{"entities/User.html":{}}}],["sessioncontroller",{"_index":1002,"title":{},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{}}}],["sessionmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionsModule.html":{}}}],["sessionrepository",{"_index":1025,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["sessions.controller",{"_index":1015,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions.service",{"_index":1014,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions/entities/session.entity",{"_index":581,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["sessions/sessions.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["sessions/sessions.service",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["sessionscontroller",{"_index":1000,"title":{"controllers/SessionsController.html":{}},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"coverage.html":{}}}],["sessionservice",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{}}}],["sessionsmodule",{"_index":14,"title":{"modules/SessionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionsservice",{"_index":249,"title":{"injectables/SessionsService.html":{}},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":472,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/JwtPayload.html":{},"injectables/PaginationProvider.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":588,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["settings",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":595,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["several",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["shared",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":752,"title":{},"body":{"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":902,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["soft",{"_index":960,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["softly",{"_index":1106,"title":{},"body":{"entities/User.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["space",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":384,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["specifies",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/LocalAuthGuard.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["specify",{"_index":628,"title":{},"body":{"modules/EnvModule.html":{},"modules/SessionsModule.html":{}}}],["splits",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.constants.ts",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.constants.ts",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipaddress.decorator.ts",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1373,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../to",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1347,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:53",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:63",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:106",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:124",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:159",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:51",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:68",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:90",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/ipaddress.decorator.ts",{"_index":1282,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1283,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user",{"_index":1284,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":1286,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":828,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":941,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":705,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":805,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/middlewares/login",{"_index":833,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":814,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":818,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:30",{"_index":821,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/common/common.module.ts",{"_index":401,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/decorators/transforms/to",{"_index":1292,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/decorators/validators/is",{"_index":1295,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/dto/id.dto.ts",{"_index":690,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/core/common/dto/id.dto.ts:23",{"_index":698,"title":{},"body":{"classes/IdDto.html":{}}}],["src/core/common/dto/pagination",{"_index":935,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/core/common/dto/remove.dto.ts",{"_index":971,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{}}}],["src/core/common/dto/remove.dto.ts:23",{"_index":973,"title":{},"body":{"classes/RemoveDto.html":{}}}],["src/core/common/dto/user",{"_index":1116,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["src/core/common/embedded/registry",{"_index":944,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["src/core/common/enums/user",{"_index":1350,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/common/interfaces/custom",{"_index":570,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/core/common/interfaces/device.interface.ts",{"_index":610,"title":{},"body":{"interfaces/Device.html":{},"coverage.html":{}}}],["src/core/common/interfaces/jwt",{"_index":748,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/core/common/interfaces/paginated.interface.ts",{"_index":859,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/core/common/providers/bcrypt.provider.ts",{"_index":357,"title":{},"body":{"injectables/BcryptProvider.html":{},"coverage.html":{}}}],["src/core/common/providers/bcrypt.provider.ts:17",{"_index":382,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/core/common/providers/bcrypt.provider.ts:32",{"_index":371,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["src/core/common/providers/hashing.provider.ts",{"_index":676,"title":{},"body":{"injectables/HashingProvider.html":{},"coverage.html":{}}}],["src/core/common/providers/hashing.provider.ts:16",{"_index":688,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/core/common/providers/hashing.provider.ts:26",{"_index":683,"title":{},"body":{"injectables/HashingProvider.html":{}}}],["src/core/common/providers/pagination.provider.ts",{"_index":868,"title":{},"body":{"injectables/PaginationProvider.html":{},"coverage.html":{}}}],["src/core/common/providers/pagination.provider.ts:24",{"_index":877,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["src/core/common/util/common.constants.ts",{"_index":1304,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":423,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/database/database.module.ts",{"_index":587,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/migrations/1725986093329",{"_index":643,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["src/core/database/migrations/1726228684695",{"_index":563,"title":{},"body":{"classes/CreateUserIndexes1726228684695.html":{},"coverage.html":{}}}],["src/core/database/migrations/1726229324413",{"_index":566,"title":{},"body":{"classes/CreateUserIndexes1726229324413.html":{},"coverage.html":{}}}],["src/core/database/migrations/1726229695133",{"_index":447,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"coverage.html":{}}}],["src/core/env/env.constants.ts",{"_index":1305,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/env/env.module.ts",{"_index":625,"title":{},"body":{"modules/EnvModule.html":{}}}],["src/main.ts",{"_index":1306,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/sessions/entities/session.entity.ts",{"_index":979,"title":{},"body":{"entities/Session.html":{},"coverage.html":{}}}],["src/sessions/entities/session.entity.ts:20",{"_index":988,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:27",{"_index":997,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:33",{"_index":982,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:39",{"_index":990,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:46",{"_index":985,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:55",{"_index":993,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/sessions.controller.ts",{"_index":1001,"title":{},"body":{"controllers/SessionsController.html":{},"coverage.html":{}}}],["src/sessions/sessions.module.ts",{"_index":1012,"title":{},"body":{"modules/SessionsModule.html":{}}}],["src/sessions/sessions.service.ts",{"_index":1020,"title":{},"body":{"injectables/SessionsService.html":{},"coverage.html":{}}}],["src/sessions/sessions.service.ts:15",{"_index":1024,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:29",{"_index":1027,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:54",{"_index":1033,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:70",{"_index":1030,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/users/dto/create",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1057,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1072,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1075,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:29",{"_index":1079,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":1074,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:43",{"_index":1099,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:49",{"_index":1081,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:55",{"_index":1097,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:61",{"_index":1089,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:67",{"_index":1084,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:78",{"_index":1094,"title":{},"body":{"entities/User.html":{}}}],["src/users/subscribers/users.subscriber.ts",{"_index":1245,"title":{},"body":{"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["src/users/subscribers/users.subscriber.ts:14",{"_index":1253,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:28",{"_index":1262,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:37",{"_index":1256,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:51",{"_index":1261,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/users.controller.ts",{"_index":1123,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:122",{"_index":1155,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":1150,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1135,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1141,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":1146,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1186,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1207,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1229,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:134",{"_index":1231,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:162",{"_index":1227,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:18",{"_index":1213,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:39",{"_index":1220,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:56",{"_index":1221,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":1223,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:92",{"_index":1225,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":576,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["start",{"_index":1005,"title":{},"body":{"controllers/SessionsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1385,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1386,"title":{},"body":{"index.html":{}}}],["started",{"_index":1378,"title":{"index.html":{}},"body":{}}],["starts",{"_index":1376,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statement",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1275,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["status.enum",{"_index":555,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["status.enum.ts",{"_index":1349,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1392,"title":{},"body":{"index.html":{}}}],["still",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stores",{"_index":983,"title":{},"body":{"entities/Session.html":{}}}],["storing",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategies",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["strength",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":1634,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string(field",{"_index":919,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["stringfields",{"_index":917,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["stringfields.map((field",{"_index":922,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["stringhash",{"_index":390,"title":{},"body":{"injectables/BcryptProvider.html":{}}}],["strings",{"_index":916,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["stripped",{"_index":1629,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":750,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/UpdateUserDto.html":{}}}],["structured",{"_index":584,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["style",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style/formatting",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["submits",{"_index":822,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["subscriber",{"_index":1247,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["subscribers/users.subscriber",{"_index":1204,"title":{},"body":{"modules/UsersModule.html":{}}}],["successful",{"_index":780,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["successfully",{"_index":1134,"title":{},"body":{"controllers/UsersController.html":{}}}],["such",{"_index":591,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":736,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":747,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["suspend",{"_index":530,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"miscellaneous/enumerations.html":{}}}],["suspended",{"_index":1368,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["svg",{"_index":1400,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":1073,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":861,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["table",{"_index":468,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tables.ts",{"_index":644,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["tables.ts:4",{"_index":645,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:48",{"_index":646,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:6",{"_index":647,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1311,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":620,"title":{},"body":{"interfaces/Device.html":{}}}],["tags",{"_index":1124,"title":{},"body":{"controllers/UsersController.html":{}}}],["take",{"_index":533,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["taken",{"_index":1197,"title":{},"body":{"modules/UsersModule.html":{}}}],["takes",{"_index":684,"title":{},"body":{"injectables/HashingProvider.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["temporarily",{"_index":1367,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["test",{"_index":560,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test'})@isoptional()@length(0",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test:covsupport",{"_index":1391,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1390,"title":{},"body":{"index.html":{}}}],["test@1234",{"_index":558,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@1234'})@ispassword",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com",{"_index":556,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com'})@isemail",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122",{"_index":557,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122'})@isusername",{"_index":537,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["testing",{"_index":605,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tests",{"_index":1388,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":374,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/UsersSubscriber.html":{}}}],["this.authservice.changepassword(userid",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getprofile(userid",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwt",{"_index":803,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatelocal(email",{"_index":826,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.findonebyid(id",{"_index":1242,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingprovider.compare",{"_index":1239,"title":{},"body":{"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["this.hashingprovider.hash(entity.password",{"_index":1273,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.hashingprovider.hash(user.password",{"_index":1267,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.hashingservice.compare(password",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":739,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registrydates.deleteat",{"_index":1115,"title":{},"body":{"entities/User.html":{}}}],["this.sessionrepository.create",{"_index":1041,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.find",{"_index":1054,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.findone",{"_index":1049,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.save(session",{"_index":1047,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionservice.create(user.id",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.validate(user.id",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create",{"_index":1232,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1234,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1235,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.preload",{"_index":1238,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":1244,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1233,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softremove(user",{"_index":1243,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update(id",{"_index":1241,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updatepassword(id",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1170,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1171,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":1174,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1182,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1177,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":726,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["throw",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":954,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{}}}],["timestamp",{"_index":653,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["toboolean",{"_index":1294,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(obj[key",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["total",{"_index":929,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["totalitems",{"_index":864,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["totalpages",{"_index":866,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{}}}],["touch",{"_index":1393,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":847,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":1642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":638,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["true})@index({unique",{"_index":996,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["try",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["two",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingProvider.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationProvider.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/PaginationProvider.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":590,"title":{},"body":{"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([session",{"_index":1017,"title":{},"body":{"modules/SessionsModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":1206,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(databaseconfig.asprovider",{"_index":609,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1319,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1324,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1326,"title":{},"body":{"dependencies.html":{}}}],["typically",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unchanged",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":621,"title":{},"body":{"interfaces/Device.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["underscores",{"_index":1603,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unexpected",{"_index":1636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":474,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["uniquely",{"_index":614,"title":{},"body":{"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}}}],["unit",{"_index":1387,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1410,"title":{},"body":{"properties.html":{}}}],["unnecessary",{"_index":933,"title":{},"body":{"injectables/PaginationProvider.html":{}}}],["up",{"_index":453,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{}}}],["up(queryrunner",{"_index":459,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{}}}],["update",{"_index":675,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1176,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":1228,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(undefined",{"_index":1151,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":967,"title":{},"body":{"classes/RegistryDates.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{}}}],["updated.'})@isstring()@isuuid",{"_index":1064,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updatedat",{"_index":664,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":964,"title":{},"body":{"classes/RegistryDates.html":{}}}],["updateevent",{"_index":1260,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["updatepassword",{"_index":1211,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepassword(id",{"_index":1230,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":1240,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updateuserdto",{"_index":1056,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":1061,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["upon",{"_index":957,"title":{},"body":{"classes/RegistryDates.html":{}}}],["uppercase",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uq_232f8e85d7633bd6ddfad421696",{"_index":656,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":667,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":666,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["url",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":406,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["use(req",{"_index":835,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["useclass",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["used",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1632,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":673,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["user's",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user'})@apiresponse({status",{"_index":1132,"title":{},"body":{"controllers/UsersController.html":{}}}],["user('id",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":831,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:13",{"_index":942,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:19",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1065,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":538,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":532,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":830,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["user.password",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user.status",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.status.tolowercase",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_role_enum",{"_index":490,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["user_role_enum_old",{"_index":465,"title":{},"body":{"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{}}}],["useragent",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userchangepassworddto",{"_index":84,"title":{"classes/UserChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userconfig",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["username",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username.decorator",{"_index":553,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["username.decorator.ts",{"_index":1299,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["username/password",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["usernamefield",{"_index":825,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernameregex",{"_index":1301,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernames",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":1217,"title":{},"body":{"injectables/UsersService.html":{}}}],["userrole",{"_index":1088,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":1105,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":807,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1205,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1159,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"classes/UsersSubscriber.html":{}}}],["users/users.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["userscontroller",{"_index":1122,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":245,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":1193,"title":{"classes/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["userstatus",{"_index":524,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.activate",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstatus.deactivate",{"_index":1104,"title":{},"body":{"entities/User.html":{}}}],["uses",{"_index":797,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":417,"title":{},"body":{"modules/CommonModule.html":{}}}],["using",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["util/common.constants",{"_index":413,"title":{},"body":{"modules/CommonModule.html":{}}}],["utility",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizes",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["uuid'})@apiquery({name",{"_index":1149,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid'})@apiresponse({status",{"_index":1145,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid_generate_v4",{"_index":649,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["valid",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":640,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["validate(email",{"_index":820,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(logindto",{"_index":855,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validate(req",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userid",{"_index":1032,"title":{},"body":{"injectables/SessionsService.html":{}}}],["validateby",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatejwt",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(undefined",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validatelocal(email",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["validating",{"_index":693,"title":{},"body":{"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validation.middleware",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["validation.middleware.ts",{"_index":834,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["validation.middleware.ts:23",{"_index":839,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validation_pipe_options",{"_index":411,"title":{},"body":{"modules/CommonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":408,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipe(validation_pipe_options",{"_index":418,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipeoptions",{"_index":1627,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":641,"title":{},"body":{"modules/EnvModule.html":{}}}],["validator",{"_index":548,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":389,"title":{},"body":{"injectables/BcryptProvider.html":{},"classes/CreateSessionIndexes1726229695133.html":{},"classes/CreateUserIndexes1726228684695.html":{},"classes/CreateUserIndexes1726229324413.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RemoveDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":527,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationProvider.html":{},"miscellaneous/variables.html":{}}}],["var_name",{"_index":636,"title":{},"body":{"modules/EnvModule.html":{}}}],["variable",{"_index":1277,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":635,"title":{"miscellaneous/variables.html":{}},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":651,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(30",{"_index":662,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(50",{"_index":661,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["verification",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":612,"title":{},"body":{"interfaces/Device.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":809,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["viewing",{"_index":1361,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violations",{"_index":1370,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["w][\\w.]{3,30",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1383,"title":{},"body":{"index.html":{}}}],["way",{"_index":1640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":751,"title":{},"body":{"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":1396,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":968,"title":{},"body":{"classes/RegistryDates.html":{}}}],["whether",{"_index":377,"title":{},"body":{"injectables/BcryptProvider.html":{},"injectables/HashingProvider.html":{}}}],["white",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitelist",{"_index":852,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["whitelisted",{"_index":1631,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whose",{"_index":1052,"title":{},"body":{"injectables/SessionsService.html":{},"miscellaneous/enumerations.html":{}}}],["windows",{"_index":1613,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":816,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["without",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PaginationProvider.html":{},"classes/RegistryDates.html":{}}}],["word",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x/.test(useragent",{"_index":1600,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x11/i.test(useragent",{"_index":1620,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":1380,"title":{},"body":{"index.html":{}}}],["yes",{"_index":889,"title":{},"body":{"injectables/PaginationProvider.html":{},"injectables/UsersService.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[@$!%*?&])[a",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AppModule serves as the root module for the application.\nIt imports several feature modules, including:\n\nCoreModule: Contains shared resources and services used across the app.\nAuthModule: Manages authentication logic and user session management.\nUsersModule: Handles user-related operations and data management.\nSessionModule: Manages user sessions and related functionalities.\n\nThis module is the main entry point for the application and orchestrates\nthe integration of various features.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SessionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { SessionsModule } from './sessions/sessions.module';\nimport { CoreModule } from './core/core.module';\n\n/**\n * AppModule serves as the root module for the application.\n * It imports several feature modules, including:\n * - CoreModule: Contains shared resources and services used across the app.\n * - AuthModule: Manages authentication logic and user session management.\n * - UsersModule: Handles user-related operations and data management.\n * - SessionModule: Manages user sessions and related functionalities.\n *\n * This module is the main entry point for the application and orchestrates\n * the integration of various features.\n */\n@Module({\n  imports: [CoreModule, AuthModule, UsersModule, SessionsModule]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController is responsible for handling authentication-related routes in the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@UseGuards(JwtAuthGuard)@Post('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Change user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Get the user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserEntity, ip: string, device: Device)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Login an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User entity\n\n                                            \n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IP address\n\n                                            \n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Device is object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards\n} from '@nestjs/common';\nimport { User as UserEntity } from 'users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { IpAddress } from './decorators/ipAddress.decorator';\nimport { Public } from './decorators/public.decorator';\nimport { UserAgent } from './decorators/user-agent.decorator';\nimport { User } from './decorators/user.decorator';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthController is responsible for handling authentication-related routes in the application\n */\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Register a new user\n   * @param registerUserDto\n   * @returns User entity\n   */\n  @Public()\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  /**\n   * Login an existing user\n   * @param user User entity\n   * @param ip IP address\n   * @param device Device is object\n   * @returns\n   */\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  login(\n    @User() user: UserEntity,\n    @IpAddress() ip: string,\n    @UserAgent() device: Device\n  ) {\n    return this.authService.login(user, ip, device);\n  }\n\n  /**\n   * Get the user profile\n   * @param userId UserID is string and UUID format\n   * @returns\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@User('id') userId: string) {\n    return this.authService.getProfile(userId);\n  }\n\n  /**\n   * Change user password\n   * @param userId UserID is string and UUID format\n   * @param changePasswordDto\n   * @returns\n   */\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  changePassword(\n    @User('id') userId: string,\n    @Body() userChangePasswordDto: UserChangePasswordDto\n  ) {\n    return this.authService.changePassword(userId, userChangePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AuthModule is responsible for all authentication-related functionalities\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:63\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import {\n  forwardRef,\n  MiddlewareConsumer,\n  Module,\n  NestModule\n} from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './config/jwt.config';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LoginValidationMiddleware } from './middlewares/login-validation.middleware';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { CommonModule } from 'core/common/common.module';\nimport { UsersModule } from 'users/users.module';\nimport { SessionsModule } from 'sessions/sessions.module';\n\n/**\n * AuthModule is responsible for all authentication-related functionalities\n */\n@Module({\n  imports: [\n    // Register JWT module asynchronously using configuration from jwtConfig\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n\n    // Import configuration module for environment-specific settings\n    ConfigModule.forFeature(jwtConfig),\n\n    forwardRef(() => CommonModule),\n    forwardRef(() => UsersModule),\n    forwardRef(() => SessionsModule)\n  ],\n  // Define the controllers related to authentication\n  controllers: [AuthController],\n\n  // Providers for authentication services, strategies, and guards\n  providers: [\n    // Service to handle authenticate user\n    AuthService,\n\n    // Strategy for local (username/password) authentication\n    LocalStrategy,\n\n    // Strategy for JWT authentication\n    JwtStrategy,\n\n    // Apply JwtAuthGuard as a global guard for protecting routes\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard\n    }\n  ]\n})\n\n/**\n * AuthModule implements NestModule, allowing for middleware configuration\n */\nexport class AuthModule implements NestModule {\n  // Configure the middleware for specific routes\n  configure(consumer: MiddlewareConsumer) {\n    // Apply LoginValidationMiddleware to the 'auth/login' route\n    consumer.apply(LoginValidationMiddleware).forRoutes('auth/login');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService is a service responsible for all authentication-related functionalities\nin the application, including user registration, login, profile retrieval\nand JWT validation. It utilizes various services and\nrepositories provided by NestJS and TypeORM to interact with the database\nand manage user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                            \n                                    Async\n                                validateLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, hashingService: HashingProvider, sessionService: SessionsService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:27\n                            \n                        \n\n                \n                    \n                            Injecting dependencies using constructor injection\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                UserService for user management\n\n                                                        \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SessionService for managing user sessions\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JwtService for generating JWT tokens\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:106\n                        \n                    \n\n\n            \n                \n                        Changes a user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Registers a new user ****\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:68\n                        \n                    \n\n\n            \n                \n                        Login user and generates a JWT token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user and JWT token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Registers a new user ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(undefined: JwtPayload, jwtToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Validates a JWT token and retrieves the user information ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwtToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                UserId and object of session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocal(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:124\n                        \n                    \n\n\n            \n                \n                        Validates a user's credentials using email or username and password ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SessionsService } from 'sessions/sessions.service';\nimport { User } from 'users/entities/user.entity';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { HashingProvider } from '../core/common/providers/hashing.provider';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { UsersService } from 'users/users.service';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthService is a service responsible for all authentication-related functionalities\n * in the application, including user registration, login, profile retrieval\n * and JWT validation. It utilizes various services and\n * repositories provided by NestJS and TypeORM to interact with the database\n * and manage user sessions.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Injecting dependencies using constructor injection\n   * @param userService UserService for user management\n   * @param sessionService SessionService for managing user sessions\n   * @param jwtService JwtService for generating JWT tokens\n   */\n  constructor(\n    @Inject(forwardRef(() => UsersService))\n    private readonly userService: UsersService,\n    @Inject(forwardRef(() => HashingProvider))\n    private readonly hashingService: HashingProvider,\n    // Injecting the SessionService for managing user sessions\n    @Inject(forwardRef(() => SessionsService))\n    private readonly sessionService: SessionsService,\n    // Injecting the JwtService for generating JWT tokens\n    private readonly jwtService: JwtService\n  ) {}\n\n  /**\n   * Registers a new user ***\n   * @param registerUserDto\n   * @returns Object of user data\n   */\n  async register(registerUserDto: RegisterUserDto) {\n    try {\n      // Creates a new user and saves to database from the RegisterUserDto\n      return await this.userService.create({ ...registerUserDto });\n    } catch (error) {\n      // Rethrows any error that occurs during registration\n      throw error;\n    }\n  }\n\n  /**\n   * Login user and generates a JWT token\n   * @param user\n   * @param ip\n   * @param device\n   * @returns Object of user and JWT token\n   */\n  async login(user: User, ip: string, device: Device) {\n    // Creates a payload for the JWT token, containing the user's ID\n    const payload = { id: user.id };\n\n    // Generates a JWT token using the JwtService\n    const token = this.jwtService.sign(payload);\n\n    // Creates a new session for the user, storing the token, IP address, and device information\n    await this.sessionService.create(user.id, token, ip, device);\n\n    // Returns the user data and the JWT token\n    return {\n      ...user,\n      token: this.jwtService.sign(payload)\n    };\n  }\n\n  /**\n   * Registers a new user ****\n   * @param id The ID is string and UUID format\n   * @returns Object of user data\n   */\n  async getProfile(id: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Removes the ID from the user object, as it's not needed in the profile\n    delete user.id;\n\n    // Returns the user's profile data\n    return user;\n  }\n\n  /**\n   * Changes a user's password\n   * @param id\n   * @param userChangePasswordDto\n   */\n  async changePassword(\n    id: string,\n    userChangePasswordDto: UserChangePasswordDto\n  ) {\n    try {\n      return await this.userService.updatePassword(id, userChangePasswordDto);\n    } catch (error) {\n      // Rethrows any error that occurs during changePassword\n      throw error;\n    }\n  }\n\n  /**\n   * Validates a user's credentials using email or username and password ***\n   * @param email\n   * @param password\n   * @returns Object of user data\n   */\n  async validateLocal(email: string, password: string) {\n    // Finds the user by their email or username, retrieving specific fields\n    const user = await this.userService.findOne(\n      [{ email }, { username: email }],\n      ['id', 'role', 'status', 'password']\n    );\n\n    // Throws a NotFoundException if the user is not found\n    if (!user) throw new NotFoundException('User not found');\n\n    // // Checks if the user's account is activated (this part is commented out, but it could be used to implement user account activation)\n    // if (user.status !== UserStatus.ACTIVATE)\n    //   throw new UnauthorizedException(\n    //     `Your account is ${user.status.toLowerCase()} see support for reviewing your account`\n    //   );\n\n    // Compares the provided password with the stored password hash\n    const isMatch = await this.hashingService.compare(password, user.password);\n\n    // Throws an UnauthorizedException if the password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // Removes the password from the user object, as it's not needed for authentication\n    delete user.password;\n\n    // Returns the user information without the password\n    return user;\n  }\n\n  /**\n   * Validates a JWT token and retrieves the user information ***\n   * @param param0\n   * @param jwtToken\n   * @returns UserId and object of session\n   */\n  async validateJwt({ id }: JwtPayload, jwtToken: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Throws an UnauthorizedException if the user is not found\n    if (!user) throw new UnauthorizedException();\n\n    // Validates the JWT token and checks if the session is still active\n    const session = await this.sessionService.validate(user.id, jwtToken);\n\n    // Throws an UnauthorizedException if the session is invalid\n    if (!session) throw new UnauthorizedException();\n\n    // Creates a CustomUser object containing the user's ID and the session information\n    const res: CustomUser = { data: user, session };\n\n    // Returns the CustomUser object\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptProvider.html":{"url":"injectables/BcryptProvider.html","title":"injectable - BcryptProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/providers/bcrypt.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\nThe Injectable decorator allows NestJS to manage the lifecycle of the service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/providers/bcrypt.provider.ts:32\n                        \n                    \n\n\n            \n                \n                        Method to compare a plain text data with an encrypted hash.\nReturns a boolean indicating whether the data matches the encrypted hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer, roundsSalt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/providers/bcrypt.provider.ts:17\n                        \n                    \n\n\n            \n                \n                        Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                roundsSalt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                stringHash\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingProvider } from './hashing.provider';\n\n/**\n * BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\n * The Injectable decorator allows NestJS to manage the lifecycle of the service.\n */\n@Injectable()\nexport class BcryptProvider implements HashingProvider {\n  /**\n   * Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n   * @param data\n   * @param roundsSalt\n   * @returns stringHash\n   */\n  async hash(data: string | Buffer, roundsSalt: number = 10) {\n    // Generate a salt with the specified number of rounds.\n    const getSalt = await bcrypt.genSalt(roundsSalt);\n\n    // Return the hashed data using the generated salt.\n    return bcrypt.hash(data, getSalt);\n  }\n\n  /**\n   * Method to compare a plain text data with an encrypted hash.\n   * Returns a boolean indicating whether the data matches the encrypted hash.\n   * @param data\n   * @param encrypted\n   * @returns boolean\n   */\n  compare(data: string | Buffer, encrypted: string) {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nCommonModule\n\nCommonModule\n\nHashingProvider  -->\n\nCommonModule->HashingProvider \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a module called CommonModule\nProvide a global validation pipe for the application, which is injected into the NestJS application context\nUse a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n\n        \n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            HashingProvider\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { VALIDATION_PIPE_OPTIONS } from './util/common.constants';\nimport { HashingProvider } from './providers/hashing.provider';\nimport { BcryptProvider } from './providers/bcrypt.provider';\n\n/**\n * Define a module called CommonModule\n * Provide a global validation pipe for the application, which is injected into the NestJS application context\n * Use a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n */\n@Module({\n  providers: [\n    {\n      // Use BcryptService as the implementation of HashingService\n      provide: HashingProvider,\n      useClass: BcryptProvider\n    },\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe(VALIDATION_PIPE_OPTIONS)\n    }\n  ],\n  // Export the HashingService for use in other modules\n  exports: [HashingProvider]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The CoreModule is a central module for the application,\nresponsible for importing and aggregating other key modules.\nIt serves as a foundation for the application's functionality\nby encapsulating and organizing related modules, promoting\na modular architecture where features can be easily managed and maintained.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EnvModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModule } from './common/common.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EnvModule } from './env/env.module';\n\n/**\n * The CoreModule is a central module for the application,\n * responsible for importing and aggregating other key modules.\n * It serves as a foundation for the application's functionality\n * by encapsulating and organizing related modules, promoting\n * a modular architecture where features can be easily managed and maintained.\n */\n@Module({\n  // Importing essential modules that provide common functionalities,\n  // database access, and environment configuration.\n  imports: [CommonModule, DatabaseModule, EnvModule]\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSessionIndexes1726229695133.html":{"url":"classes/CreateSessionIndexes1726229695133.html","title":"class - CreateSessionIndexes1726229695133","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSessionIndexes1726229695133\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1726229695133-create-session-indexes.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateSessionIndexes1726229695133'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1726229695133-create-session-indexes.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726229695133-create-session-indexes.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726229695133-create-session-indexes.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateSessionIndexes1726229695133 implements MigrationInterface {\n  name = 'CreateSessionIndexes1726229695133';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum\"\n            RENAME TO \"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'AUTHOR', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum\" USING \"role\"::\"text\"::\"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_232f8e85d7633bd6ddfad42169\" ON \"session\" (\"token\")\n        `);\n    await queryRunner.query(`\n            CREATE INDEX \"IDX_d051e3dbf62fe9574dee6570ce\" ON \"session\" (\"expiryDate\")\n        `);\n    await queryRunner.query(`\n            CREATE INDEX \"IDX_065d4d8f3b5adb4a08841eae3c\" ON \"user\" (\"name\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e12875dfb3b1d92d7d7c5377e2\" ON \"user\" (\"email\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_78a916df40e02a9deb1c4b75ed\" ON \"user\" (\"username\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e11e649824a45d8ed01d597fd9\" ON \"user\" (\"createdAt\")\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e11e649824a45d8ed01d597fd9\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_78a916df40e02a9deb1c4b75ed\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e12875dfb3b1d92d7d7c5377e2\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_065d4d8f3b5adb4a08841eae3c\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_d051e3dbf62fe9574dee6570ce\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_232f8e85d7633bd6ddfad42169\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum_old\" AS ENUM('ADMIN', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum_old\" USING \"role\"::\"text\"::\"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum_old\"\n            RENAME TO \"user_role_enum\"\n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get valid email address', example: 'test@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    Specifies that 'email' is a required property, must be a valid email format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name limited to a maximum of 30 characters', example: 'mohmadreza test'})@IsOptional()@Length(0, 30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    Optional 'name' property with a maximum length of 30 characters\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters', example: 'test@1234'})@IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    Specifies that 'password' is a required property, with specific content and length requirements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserStatus, description: 'Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'', example: 'ACTIVATE'})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:54\n                        \n                    \n\n            \n                \n                    Optional property 'status' that can take specific enum values defined in UserStatus\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters', example: 'test_122'})@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    Specifies that 'username' is a required property\nMust adhere to certain formatting and length constraints\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsOptional, Length } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\n\n/**\n * Data Transfer Object for creating a new user\n */\nexport class CreateUserDto {\n  /**\n   * Specifies that 'email' is a required property, must be a valid email format\n   */\n  @ApiProperty({\n    description: 'Get valid email address',\n    example: 'test@gmail.com'\n  })\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Specifies that 'username' is a required property\n   * Must adhere to certain formatting and length constraints\n   */\n  @ApiProperty({\n    description:\n      'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters',\n    example: 'test_122'\n  })\n  @IsUsername()\n  readonly username: string;\n\n  /**\n   * Specifies that 'password' is a required property, with specific content and length requirements\n   */\n  @ApiProperty({\n    description:\n      'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters',\n    example: 'test@1234'\n  })\n  @IsPassword()\n  readonly password: string;\n\n  /**\n   * Optional property 'status' that can take specific enum values defined in UserStatus\n   */\n  @ApiPropertyOptional({\n    enum: UserStatus,\n    description: \"Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'\",\n    example: 'ACTIVATE'\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  readonly status?: UserStatus;\n\n  /**\n   * Optional 'name' property with a maximum length of 30 characters\n   */\n  @ApiPropertyOptional({\n    description: 'Name limited to a maximum of 30 characters',\n    example: 'mohmadreza test'\n  })\n  @IsOptional()\n  @Length(0, 30)\n  readonly name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserIndexes1726228684695.html":{"url":"classes/CreateUserIndexes1726228684695.html","title":"class - CreateUserIndexes1726228684695","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserIndexes1726228684695\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1726228684695-create-user-indexes.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateUserIndexes1726228684695'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1726228684695-create-user-indexes.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726228684695-create-user-indexes.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726228684695-create-user-indexes.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUserIndexes1726228684695 implements MigrationInterface {\n  name = 'CreateUserIndexes1726228684695';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum\"\n            RENAME TO \"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'AUTHOR', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum\" USING \"role\"::\"text\"::\"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE INDEX \"IDX_065d4d8f3b5adb4a08841eae3c\" ON \"user\" (\"name\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e12875dfb3b1d92d7d7c5377e2\" ON \"user\" (\"email\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_78a916df40e02a9deb1c4b75ed\" ON \"user\" (\"username\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e11e649824a45d8ed01d597fd9\" ON \"user\" (\"createdAt\")\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e11e649824a45d8ed01d597fd9\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_78a916df40e02a9deb1c4b75ed\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e12875dfb3b1d92d7d7c5377e2\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_065d4d8f3b5adb4a08841eae3c\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum_old\" AS ENUM('ADMIN', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum_old\" USING \"role\"::\"text\"::\"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum_old\"\n            RENAME TO \"user_role_enum\"\n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserIndexes1726229324413.html":{"url":"classes/CreateUserIndexes1726229324413.html","title":"class - CreateUserIndexes1726229324413","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserIndexes1726229324413\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1726229324413-create-user-indexes.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateUserIndexes1726229324413'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1726229324413-create-user-indexes.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726229324413-create-user-indexes.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1726229324413-create-user-indexes.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from 'typeorm';\n\nexport class CreateUserIndexes1726229324413 implements MigrationInterface {\n  name = 'CreateUserIndexes1726229324413';\n\n  public async up(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum\"\n            RENAME TO \"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'AUTHOR', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum\" USING \"role\"::\"text\"::\"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            CREATE INDEX \"IDX_065d4d8f3b5adb4a08841eae3c\" ON \"user\" (\"name\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e12875dfb3b1d92d7d7c5377e2\" ON \"user\" (\"email\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_78a916df40e02a9deb1c4b75ed\" ON \"user\" (\"username\")\n        `);\n    await queryRunner.query(`\n            CREATE UNIQUE INDEX \"IDX_e11e649824a45d8ed01d597fd9\" ON \"user\" (\"createdAt\")\n        `);\n  }\n\n  public async down(queryRunner: QueryRunner): Promise {\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e11e649824a45d8ed01d597fd9\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_78a916df40e02a9deb1c4b75ed\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_e12875dfb3b1d92d7d7c5377e2\"\n        `);\n    await queryRunner.query(`\n            DROP INDEX \"public\".\"IDX_065d4d8f3b5adb4a08841eae3c\"\n        `);\n    await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum_old\" AS ENUM('ADMIN', 'USER')\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" DROP DEFAULT\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\" TYPE \"public\".\"user_role_enum_old\" USING \"role\"::\"text\"::\"public\".\"user_role_enum_old\"\n        `);\n    await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ALTER COLUMN \"role\"\n            SET DEFAULT 'USER'\n        `);\n    await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n    await queryRunner.query(`\n            ALTER TYPE \"public\".\"user_role_enum_old\"\n            RENAME TO \"user_role_enum\"\n        `);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extending the built-in Request type from Express to create a CustomRequest interface.\nThis interface includes all properties of the standard Request object,\nwith an additional 'user' property that conforms to the CustomUser interface.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         CustomUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomUser\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The User object is user data and session data of current user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'sessions/entities/session.entity';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {object} data - The data of current user.\n * @property {object} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The data of current user\n   */\n  readonly data: User;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {object} user - The user of the CustomUser.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is user data and session data of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining a CustomUser interface to represent a user object.\nThis interface includes a user ID and a session object,\nallowing for structured user information with session details.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            session\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The data of current user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Session object of current user like token, expirationDate, device and IP address\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'sessions/entities/session.entity';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {object} data - The data of current user.\n * @property {object} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The data of current user\n   */\n  readonly data: User;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {object} user - The user of the CustomUser.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is user data and session data of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            DatabaseModule is a NestJS module responsible for setting up\nthe database connection using TypeORM.\nIt imports the TypeOrmModule with a configuration provided\nasynchronously. The configuration options, such as the database\ntype, host, username, password, and others, are defined in\nthe databaseConfig module.\nThis setup allows for better flexibility and management of\ndatabase connection settings, making it easier to adapt to\ndifferent environments (e.g., development, testing, production).\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database.config';\n\n/**\n * DatabaseModule is a NestJS module responsible for setting up\n * the database connection using TypeORM.\n *\n * It imports the TypeOrmModule with a configuration provided\n * asynchronously. The configuration options, such as the database\n * type, host, username, password, and others, are defined in\n * the databaseConfig module.\n *\n * This setup allows for better flexibility and management of\n * database connection settings, making it easier to adapt to\n * different environments (e.g., development, testing, production).\n */\n@Module({\n  imports: [TypeOrmModule.forRootAsync(databaseConfig.asProvider())]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Device.html":{"url":"interfaces/Device.html","title":"interface - Device","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Device\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/device.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a device with a specific name and an optional version.\nThe name property is mandatory and should uniquely identify the device,\nwhile the version property is optional, allowing for flexibility in cases\nwhere the device may not have a specific version to report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the device (e.g., \"iPhone\", \"Android Tablet\")\na string that specifies the name of the device\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Device {\n  /**\n   * The name of the device (e.g., \"iPhone\", \"Android Tablet\")\n   * a string that specifies the name of the device\n   */\n  readonly name: string;\n\n  /**\n   * The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n   */\n  readonly version?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnvModule.html":{"url":"modules/EnvModule.html","title":"module - EnvModule","body":"\n                   \n\n\n\n\n    Modules\n    EnvModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/env/env.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a new module using the Module decorator\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ENV_VALIDATION_SCHEMA } from './env.constants';\n\n/**\n * Define a new module using the Module decorator\n */\n@Module({\n  imports: [\n    /**\n     * Specify the modules to be imported into this module\n     * Initialize the ConfigModule with the following configuration options\n     */\n    ConfigModule.forRoot({\n      // Enable the expansion of environment variables (e.g., using ${VAR_NAME})\n      expandVariables: true,\n\n      // Use a validation schema to validate environment variables\n      validationSchema: ENV_VALIDATION_SCHEMA\n    })\n  ]\n})\nexport class EnvModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTables1725986093329.html":{"url":"classes/GenerateTables1725986093329.html","title":"class - GenerateTables1725986093329","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTables1725986093329\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1725986093329-generate-tables.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GenerateTables1725986093329'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1725986093329-generate-tables.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class GenerateTables1725986093329 implements MigrationInterface {\n    name = 'GenerateTables1725986093329'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TABLE \"session\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"token\" character varying NOT NULL,\n                \"device\" json NOT NULL,\n                \"ip\" character varying NOT NULL,\n                \"expiryDate\" TIMESTAMP NOT NULL,\n                \"ownerId\" uuid NOT NULL,\n                CONSTRAINT \"UQ_232f8e85d7633bd6ddfad421696\" UNIQUE (\"token\"),\n                CONSTRAINT \"PK_f55da76ac1c3ac420f444d2ff11\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_status_enum\" AS ENUM('ACTIVATE', 'DEACTIVATE', 'SUSPEND')\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'USER')\n        `);\n        await queryRunner.query(`\n            CREATE TABLE \"user\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"name\" character varying(50),\n                \"email\" character varying NOT NULL,\n                \"username\" character varying(30) NOT NULL,\n                \"password\" character varying NOT NULL,\n                \"status\" \"public\".\"user_status_enum\" NOT NULL DEFAULT 'DEACTIVATE',\n                \"role\" \"public\".\"user_role_enum\" NOT NULL DEFAULT 'USER',\n                \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"deleteAt\" TIMESTAMP,\n                CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"),\n                CONSTRAINT \"UQ_78a916df40e02a9deb1c4b75edb\" UNIQUE (\"username\"),\n                CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\" FOREIGN KEY (\"ownerId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"user\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_status_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"session\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingProvider.html":{"url":"injectables/HashingProvider.html","title":"injectable - HashingProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/providers/hashing.provider.ts\n        \n\n\n            \n                Description\n            \n            \n                The HashingService class is defined as an abstract service in NestJS.\nIt provides an interface for hashing and comparing hashed data,\nwhich can be implemented by any concrete class that requires\ncryptographic hashing functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/providers/hashing.provider.ts:26\n                        \n                    \n\n\n            \n                \n                        The compare method is an abstract method that takes raw data\nand an encrypted string, returning a Promise that resolves to a\nboolean indicating whether the raw data matches the hashed data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/providers/hashing.provider.ts:16\n                        \n                    \n\n\n            \n                \n                        The hash method is an abstract method that takes data as a string or Buffer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a hashed string\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * The HashingService class is defined as an abstract service in NestJS.\n * It provides an interface for hashing and comparing hashed data,\n * which can be implemented by any concrete class that requires\n * cryptographic hashing functionality.\n */\n@Injectable()\nexport abstract class HashingProvider {\n  /**\n   * The hash method is an abstract method that takes data as a string or Buffer\n   * @param data\n   * @returns returns a Promise that resolves to a hashed string\n   */\n  abstract hash(data: string | Buffer): Promise;\n\n  /**\n   * The compare method is an abstract method that takes raw data\n   * and an encrypted string, returning a Promise that resolves to a\n   * boolean indicating whether the raw data matches the hashed data.\n   * @param data\n   * @param encrypted\n   * @returns returns a Promise that resolves to a boolean\n   */\n  abstract compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This class defines a Data Transfer Object (DTO) for validating and describing\nan identifier that adheres to the UUID standard.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID must be string and conforms to the UUID format'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/id.dto.ts:23\n                        \n                    \n\n            \n                \n                    The 'id' property represents a unique identifier and must be a string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * This class defines a Data Transfer Object (DTO) for validating and describing\n * an identifier that adheres to the UUID standard.\n */\nexport class IdDto {\n  /**\n   * The 'id' property represents a unique identifier and must be a string\n   */\n  @ApiProperty({\n    description: 'The ID must be string and conforms to the UUID format'\n  })\n\n  // Ensures the value is of type string\n  @IsString()\n\n  // Enforces that the string is a valid UUID\n  @IsUUID()\n\n  // Declare the property as read-only\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard is a custom authentication guard that extends the default\nAuthGuard provided by the NestJS Passport module. This guard is used\nto protect routes that require JWT authentication, while also allowing\nfor certain routes to be marked as public (i.e., accessible without\nauthentication).\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Call the constructor of the parent AuthGuard class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines if the current request should be allowed through based\non the authentication logic. It checks if the route is marked as\npublic using the Reflector to access metadata.\nrequest, including the handler and the class where the route is\ndefined.\nlogic passes; otherwise, it returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ExecutionContext provides the context of the\nrequest, including the handler and the class where the route is\ndefined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                true if the route is public or if the default authentication\nlogic passes; otherwise, it returns false.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'auth/decorators/public.decorator';\n\n/**\n * JwtAuthGuard is a custom authentication guard that extends the default\n * AuthGuard provided by the NestJS Passport module. This guard is used\n * to protect routes that require JWT authentication, while also allowing\n * for certain routes to be marked as public (i.e., accessible without\n * authentication).\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * Call the constructor of the parent AuthGuard class.\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Determines if the current request should be allowed through based\n   * on the authentication logic. It checks if the route is marked as\n   * public using the Reflector to access metadata.\n   * @param context - The ExecutionContext provides the context of the\n   * request, including the handler and the class where the route is\n   * defined.\n   * @returns true if the route is public or if the default authentication\n   * logic passes; otherwise, it returns false.\n   */\n  canActivate(context: ExecutionContext) {\n    // Use the Reflector to check if the current route is marked as public.\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(), // Get the method (handler) level metadata.\n      context.getClass() // Get the class level metadata.\n    ]);\n\n    // If the route is public, allow the request without authentication.\n    if (isPublic) return true;\n\n    // Otherwise, proceed with the normal authentication process.\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface represents the structure of a JWT (JSON Web Token) payload.\nIt contains a single property 'id', which is a string that uniquely identifies\nthe user or entity associated with the token. The 'readonly' modifier ensures\nthat the 'id' cannot be modified after it has been set, promoting immutability\nand helping to maintain the integrity of the JWT payload.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of user is string and UUID format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * The ID of user is string and UUID format\n   */\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class is responsible for validating JWTs using Passport.\nIt extends Passport's Strategy class for JWTs and overrides the\nvalidation method to integrate with the application's authentication service.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT containing secret and other settings.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of AuthService to delegate JWT validation logic.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validate method to handle the verification of the JWT.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIncoming request object, used to access headers and other request-specific data.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe decoded payload of the JWT, containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user object if validation is successful; otherwise, it throws an error.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport jwtConfig from 'auth/config/jwt.config'; // Import the JWT configuration\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface'; // Define the interface for JWT payload\nimport { Request } from 'express'; // Import Request type from Express\nimport { ExtractJwt, Strategy } from 'passport-jwt'; // Import JWT extraction and strategy from passport-jwt\n\n/**\n * JwtStrategy class is responsible for validating JWTs using Passport.\n * It extends Passport's Strategy class for JWTs and overrides the\n * validation method to integrate with the application's authentication service.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor for JwtStrategy.\n   * @param jwtConfiguration - Configuration object for JWT containing secret and other settings.\n   * @param authService - Instance of AuthService to delegate JWT validation logic.\n   */\n  constructor(\n    @Inject(jwtConfig.KEY) // Inject the JWT configuration using the key defined in jwtConfig\n    private readonly jwtConfiguration: ConfigType, // Retrieve configuration type for jwtConfig\n    private readonly authService: AuthService // Injecting the AuthService for validation\n  ) {\n    // Call the parent constructor with options for extracting JWT and using the secret\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extracts JWT from Authorization header as Bearer token\n      secretOrKey: jwtConfiguration.secret, // Uses the secret defined in JWT configuration for verification\n      passReqToCallback: true // Enable passing the request object to the validation callback\n    });\n  }\n\n  /**\n   * Validate method to handle the verification of the JWT.\n   * @param req - Incoming request object, used to access headers and other request-specific data.\n   * @param payload - The decoded payload of the JWT, containing user information.\n   * @returns The user object if validation is successful; otherwise, it throws an error.\n   */\n  validate(req: Request, payload: JwtPayload) {\n    // Calls the AuthService to validate the token payload and possibly retrieve user info\n    return this.authService.validateJwt(\n      payload,\n      req.headers?.authorization.replace('bearer ', '')\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\nand specifies the 'local' strategy for authentication.\nThis guard will be used to protect routes that require local authentication,\nensuring that users are authenticated via the local strategy before accessing\nthe corresponding resources.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\n * and specifies the 'local' strategy for authentication.\n * This guard will be used to protect routes that require local authentication,\n * ensuring that users are authenticated via the local strategy before accessing\n * the corresponding resources.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\nIt extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor takes in an AuthService instance, which contains methods for validating user credentials.\nIt also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:30\n                        \n                    \n\n\n            \n                \n                        The validate method is called by Passport after the user submits their credentials.\nIt invokes the AuthService's validateLocal method to check if the provided email and password are valid.\nIf authentication is successful, it should return the user object; otherwise, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                promise user object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport { Strategy } from 'passport-local';\n\n/**\n * The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\n * It extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor takes in an AuthService instance, which contains methods for validating user credentials.\n   * It also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n   * @param authService\n   */\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * The validate method is called by Passport after the user submits their credentials.\n   * It invokes the AuthService's validateLocal method to check if the provided email and password are valid.\n   * If authentication is successful, it should return the user object; otherwise, it will throw an error.\n   * @param email\n   * @param password\n   * @returns promise user object\n   */\n  validate(email: string, password: string) {\n    return this.authService.validateLocal(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly email: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginValidationMiddleware.html":{"url":"injectables/LoginValidationMiddleware.html","title":"injectable - LoginValidationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginValidationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middlewares/login-validation.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a middleware class for validating login user data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/middlewares/login-validation.middleware.ts:23\n                        \n                    \n\n\n            \n                \n                        Middleware function to handle incoming requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express request\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express response\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express next\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware\n} from '@nestjs/common';\nimport { LoginUserDto } from 'auth/dto/login-user.dto';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * Define a middleware class for validating login user data\n */\n@Injectable()\nexport class LoginValidationMiddleware implements NestMiddleware {\n  /**\n   * Middleware function to handle incoming requests\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next\n   * @returns If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n   */\n  async use(req: Request, res: Response, next: NextFunction) {\n    // Convert the request body to a LoginUserDto instance\n    const loginDto = plainToInstance(LoginUserDto, req.body);\n\n    // Validate the loginDto using class-validator\n    // - whitelist: true enforces only the properties defined in the DTO\n    // - forbidNonWhitelisted: true rejects any properties not defined in the DTO\n    const errors = await validate(loginDto, {\n      whitelist: true,\n      forbidNonWhitelisted: true\n    });\n\n    // If validation errors are found, throw a BadRequestException with the error details\n    if (errors.length) {\n      throw new BadRequestException(errors);\n    }\n\n    // If validation is successful, proceed to the next middleware or route handler\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPages: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationProvider.html":{"url":"injectables/PaginationProvider.html","title":"injectable - PaginationProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/providers/pagination.provider.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository, where?: FindOptionsWhere | FindOptionsWhere[], relations?: FindOptionsRelations, select?: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/providers/pagination.provider.ts:24\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n                        A lightweight and faster method to paginate query results.\nOptimized for minimal response overhead.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Pagination options like page and limit\n\n                                            \n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The repository to query\n\n                                            \n                                        \n                                        \n                                                where\n                                            \n                                                        FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional filtering conditions for the query\n\n                                            \n                                        \n                                        \n                                                relations\n                                            \n                                                        FindOptionsRelations\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional relations to be included in the query\n\n                                            \n                                        \n                                        \n                                                select\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional fields to select in the query\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                Paginated response with minimal metadata for faster performance\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from '../dto/pagination-query.dto';\nimport {\n  Repository,\n  ObjectLiteral,\n  FindOptionsWhere,\n  FindOptionsRelations\n} from 'typeorm';\nimport { Paginated } from '../interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationProvider {\n  /**\n   * A lightweight and faster method to paginate query results.\n   * Optimized for minimal response overhead.\n   *\n   * @param paginationQuery Pagination options like `page` and `limit`\n   * @param repository The repository to query\n   * @param where Optional filtering conditions for the query\n   * @param relations Optional relations to be included in the query\n   * @param select Optional fields to select in the query\n   * @returns Paginated response with minimal metadata for faster performance\n   */\n  async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    where?: FindOptionsWhere | FindOptionsWhere[],\n    relations?: FindOptionsRelations,\n    select?: (keyof T)[]\n  ): Promise> {\n    // Set default values for `page` and `limit` if not provided\n    const page = paginationQuery.page || 1;\n    const limit = paginationQuery.limit || 10;\n    const skip = (page - 1) * limit;\n\n    // Create a query builder for more control over the query\n    const queryBuilder = repository.createQueryBuilder('entity');\n\n    // Apply filters and relations\n    if (where) {\n      queryBuilder.where(where);\n    }\n    if (relations) {\n      for (const relation of Object.keys(relations)) {\n        queryBuilder.leftJoinAndSelect(`entity.${relation}`, relation);\n      }\n    }\n\n    // Apply selected fields if provided\n    if (select) {\n      // Ensure all fields are strings\n      const stringFields = select.map((field) => String(field));\n      queryBuilder.select([\n        'entity.id',\n        ...stringFields.map((field) => `entity.${field}`)\n      ]);\n    }\n\n    // Execute the query with pagination\n    const [results, totalItems] = await Promise.all([\n      queryBuilder.skip(skip).take(limit).getMany(),\n      queryBuilder.getCount()\n    ]);\n\n    // Calculate total pages and minimal metadata\n    const totalPages = Math.ceil(totalItems / limit);\n\n    // Build the minimal response without unnecessary pagination links\n    const response: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPages: limit,\n        totalItems,\n        currentPage: page,\n        totalPages\n      }\n    };\n\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  readonly limit?: number = 1;\n\n  @IsOptional()\n  @IsPositive()\n  readonly page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  readonly email: string;\n\n  @IsUsername()\n  readonly username: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistryDates.html":{"url":"classes/RegistryDates.html","title":"class - RegistryDates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistryDates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/embedded/registry-dates.embedded.ts\n        \n\n\n            \n                Description\n            \n            \n                A class representing common date fields for an entity in the database.\nThis class uses TypeORM decorators to automatically manage\nthe creation, update, and deletion dates of the entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:20\n                        \n                    \n\n            \n                \n                    The date and time when the entity was created.\nThis field is automatically populated by TypeORM upon entity creation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:35\n                        \n                    \n\n            \n                \n                    The date and time when the entity was soft deleted.\nThis field is automatically populated when the entity is marked as deleted,\nallowing for soft deletion functionality without removing the record from the database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:27\n                        \n                    \n\n            \n                \n                    The date and time when the entity was last updated.\nThis field is automatically updated by TypeORM whenever the entity is modified.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  Index,\n  UpdateDateColumn\n} from 'typeorm';\n\n/**\n * A class representing common date fields for an entity in the database.\n * This class uses TypeORM decorators to automatically manage\n * the creation, update, and deletion dates of the entity.\n */\nexport class RegistryDates {\n  /**\n   * The date and time when the entity was created.\n   * This field is automatically populated by TypeORM upon entity creation.\n   */\n  @CreateDateColumn()\n  @Index({ unique: true })\n  createdAt: Date;\n\n  /**\n   * The date and time when the entity was last updated.\n   * This field is automatically updated by TypeORM whenever the entity is modified.\n   */\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * The date and time when the entity was soft deleted.\n   * This field is automatically populated when the entity is marked as deleted,\n   * allowing for soft deletion functionality without removing the record from the database.\n   */\n  @DeleteDateColumn()\n  deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveDto.html":{"url":"classes/RemoveDto.html","title":"class - RemoveDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/remove.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a Data Transfer Object (DTO) class for removing resources\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                soft\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        soft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The \"soft\" property is optional and has type boolean'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/remove.dto.ts:23\n                        \n                    \n\n            \n                \n                    Define a property 'soft' that is optional and of type boolean\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { IsBoolean } from '../decorators/validators/is-boolean.decorator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Define a Data Transfer Object (DTO) class for removing resources\n */\nexport class RemoveDto {\n  /**\n   * Define a property 'soft' that is optional and of type boolean\n   */\n  @ApiPropertyOptional({\n    description: 'The \"soft\" property is optional and has type boolean'\n  })\n\n  // Indicate that the 'soft' property is optional in the request\n  @IsOptional()\n\n  // Validate that the 'soft' property, if provided, must be a boolean value\n  @IsBoolean()\n\n  // Declare the property as read-only\n  readonly soft: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the Session entity that represents a user session in the application\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                device\n                            \n                            \n                                    \n                                    \n                                expiryDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ip\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Device\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:33\n                        \n                    \n\n            \n                \n                    Stores device information as a JSON object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:46\n                        \n                    \n\n            \n                \n                    The date and time when the session will expire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:20\n                        \n                    \n\n            \n                \n                    Generates a unique UUID for each session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:39\n                        \n                    \n\n            \n                \n                    IP address of the user during this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:55\n                        \n                    \n\n            \n                \n                    This session must be associated with a user\nThe user who owns this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:27\n                        \n                    \n\n            \n                \n                    Ensures each token is JWT and unique in the database\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Device } from 'core/common/interfaces/device.interface';\nimport {\n  Column,\n  Entity,\n  Index,\n  ManyToOne,\n  PrimaryGeneratedColumn\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Define the Session entity that represents a user session in the application\n */\n@Entity()\nexport class Session {\n  /**\n   * Generates a unique UUID for each session\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * Ensures each token is JWT and unique in the database\n   */\n  @Column({ unique: true })\n  @Index({ unique: true })\n  token: string;\n\n  /**\n   * Stores device information as a JSON object\n   */\n  @Column({ type: 'json' })\n  device: Device;\n\n  /**\n   * IP address of the user during this session\n   */\n  @Column()\n  ip: string;\n\n  /**\n   * The date and time when the session will expire\n   */\n  @Column()\n  @Index()\n  expiryDate: Date;\n\n  /**\n   * This session must be associated with a user\n   * The user who owns this session\n   */\n  @ManyToOne(() => User, (user) => user.id, {\n    nullable: false\n  })\n  owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionsController.html":{"url":"controllers/SessionsController.html","title":"controller - SessionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sessions\n            \n\n\n            \n                Description\n            \n            \n                The SessionController handles incoming requests related to sessions.\nIt is decorated with the Controller decorator, indicating that it\nis a NestJS controller responsible for processing routes that start\nwith 'sessions'. Additional route handling methods can be added in\nthis class to define specific actions for session management.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n/**\n * The SessionController handles incoming requests related to sessions.\n * It is decorated with the Controller decorator, indicating that it\n * is a NestJS controller responsible for processing routes that start\n * with 'sessions'. Additional route handling methods can be added in\n * this class to define specific actions for session management.\n */\n@Controller('sessions')\nexport class SessionsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionsModule.html":{"url":"modules/SessionsModule.html","title":"module - SessionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_exports\n\n\n\ncluster_SessionsModule_providers\n\n\n\n\nSessionsService \n\nSessionsService \n\n\n\nSessionsModule\n\nSessionsModule\n\nSessionsService  -->\n\nSessionsModule->SessionsService \n\n\n\n\n\nSessionsService\n\nSessionsService\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sessions/sessions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define the SessionModule using the Module decorator\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from './entities/session.entity';\nimport { SessionsService } from './sessions.service';\nimport { SessionsController } from './sessions.controller';\n\n/**\n * Define the SessionModule using the Module decorator\n */\n@Module({\n  // Specify the entities that should be registered with TypeORM\n  imports: [TypeOrmModule.forFeature([Session])],\n  // Register the SessionService as a provider for dependency injection\n  providers: [SessionsService],\n  // Register the SessionController to handle incoming requests related to sessions\n  controllers: [SessionsController],\n  exports: [SessionsService]\n})\nexport class SessionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionsService.html":{"url":"injectables/SessionsService.html","title":"injectable - SessionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The SessionService class is marked as Injectable,\nwhich allows it to be injected into other components in the application.\nThis service handles session-related operations, such as creating,\nvalidating, and retrieving user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getSessions\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sessionRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/sessions/sessions.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string, token: string, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:29\n                        \n                    \n\n\n            \n                \n                        Creates a new session for a specified user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe session token\n\n\n                                            \n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe IP address of the user\n\n\n                                            \n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nInformation about the user's device\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The newly created session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getSessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSessions(customUser: CustomUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:70\n                        \n                    \n\n\n            \n                \n                        Retrieves all sessions for a given user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                customUser\n                                            \n                                                            CustomUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                A list of sessions for the user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:54\n                        \n                    \n\n\n            \n                \n                        Validates a session based on the user ID and token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the user\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe session token\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                The session if valid, or null if not found or expired\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { Session } from 'sessions/entities/session.entity';\nimport { MoreThan, Repository } from 'typeorm';\n\n/**\n * The SessionService class is marked as Injectable,\n * which allows it to be injected into other components in the application.\n * This service handles session-related operations, such as creating,\n * validating, and retrieving user sessions.\n */\n@Injectable()\nexport class SessionsService {\n  constructor(\n    @InjectRepository(Session)\n    private readonly sessionRepository: Repository\n  ) {}\n\n  /**\n   * Creates a new session for a specified user\n   * @param userId - The ID of the user\n   * @param token - The session token\n   * @param ip - The IP address of the user\n   * @param device - Information about the user's device\n   * @returns The newly created session\n   */\n  async create(\n    userId: string,\n    token: string,\n    ip: string,\n    device: Device\n  ): Promise {\n    // Create a new session instance with an expiry date set to 31 days from now\n    const session = this.sessionRepository.create({\n      owner: { id: userId },\n      ip,\n      token,\n      device,\n      expiryDate: new Date(Date.now() + 31 * 24 * 60 * 60 * 1000) // 31 days from now\n    });\n\n    // Save the newly created session to the database and return it\n    return this.sessionRepository.save(session);\n  }\n\n  /**\n   * Validates a session based on the user ID and token.\n   * @param userId - The ID of the user\n   * @param token - The session token\n   * @returns The session if valid, or null if not found or expired\n   */\n  async validate(userId: string, token: string): Promise {\n    // Find a session matching the user ID and token, ensuring it has not expired\n    return this.sessionRepository.findOne({\n      where: {\n        token,\n        owner: { id: userId },\n        expiryDate: MoreThan(new Date()) // Ensure the expiry date is in the future\n      }\n    });\n  }\n\n  /**\n   * Retrieves all sessions for a given user.\n   * @param user - The user whose sessions are to be retrieved\n   * @returns A list of sessions for the user\n   */\n  async getSessions(customUser: CustomUser): Promise {\n    const sessions = await this.sessionRepository.find({\n      where: {\n        owner: customUser.data\n      }\n    });\n\n    return sessions;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                UpdateUserDto class is a Data Transfer Object (DTO) that\nextends the CreateUserDto. This class is used for validating\nand documenting the structure of data sent to the API for updating\nan existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user that needs to be updated.'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the user that needs to be updated.\nThis property is required and should be a valid UUID string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * UpdateUserDto class is a Data Transfer Object (DTO) that\n * extends the CreateUserDto. This class is used for validating\n * and documenting the structure of data sent to the API for updating\n * an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * The ID of the user that needs to be updated.\n   * This property is required and should be a valid UUID string.\n   * @type {string}\n   * @example \"dcbec18c-2bdd-4e7b-9f53-8721c3c99ea4\"\n   */\n  @ApiProperty({\n    description: 'The ID of the user that needs to be updated.'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the User entity representing a user in the system\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                registryDates\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                sessions\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:36\n                        \n                    \n\n            \n                \n                    User's email must be unique\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    Generates a unique identifier for each user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: true, select: false})@Index()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:29\n                        \n                    \n\n            \n                \n                    User's name, optional and not selected by default\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:49\n                        \n                    \n\n            \n                \n                    Password is not selected by default (for security)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registryDates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistryDates\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column(undefined, {prefix: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:67\n                        \n                    \n\n            \n                \n                    Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:61\n                        \n                    \n\n            \n                \n                    User role defaults to USER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Session[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, session => session.owner, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:78\n                        \n                    \n\n            \n                \n                    Defines a one-to-many relation with the Session entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:55\n                        \n                    \n\n            \n                \n                    User status, defaults to DEACTIVATE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 30})@Index({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:43\n                        \n                    \n\n            \n                \n                    Username has a maximum length of 30 and must be unique\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { RegistryDates } from 'core/common/embedded/registry-dates.embedded';\nimport { UserRole } from 'core/common/enums/user-role.enum';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\nimport { Session } from 'sessions/entities/session.entity';\nimport {\n  Column,\n  Entity,\n  Index,\n  OneToMany,\n  PrimaryGeneratedColumn\n} from 'typeorm';\n\n/**\n * Define the User entity representing a user in the system\n */\n@Entity()\nexport class User {\n  /**\n   * Generates a unique identifier for each user\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * User's name, optional and not selected by default\n   */\n  @Column({ length: 50, nullable: true, select: false })\n  @Index()\n  name: string;\n\n  /**\n   * User's email must be unique\n   */\n  @Column({ unique: true })\n  @Index({ unique: true })\n  email: string;\n\n  /**\n   * Username has a maximum length of 30 and must be unique\n   */\n  @Column({ unique: true, length: 30 })\n  @Index({ unique: true })\n  username: string;\n\n  /**\n   * Password is not selected by default (for security)\n   */\n  @Column({ select: false })\n  password: string;\n\n  /**\n   * User status, defaults to DEACTIVATE\n   */\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.DEACTIVATE })\n  status: UserStatus;\n\n  /**\n   * User role defaults to USER\n   */\n  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n   */\n  @Column(() => RegistryDates, { prefix: false })\n  registryDates: RegistryDates;\n\n  /**\n   * Defines a one-to-many relation with the Session entity\n   */\n  @OneToMany(() => Session, (session) => session.owner, {\n    /**\n     * Allows sessions to be softly removed or recovered\n     */\n    cascade: ['soft-remove', 'recover']\n  })\n  sessions: Session[];\n\n  /**\n   * Getter to determine if the user is considered deleted based on the deletion date\n   */\n  get isDeleted() {\n    /**\n     * Returns true if deleteAt is set (indicating the user is deleted)\n     */\n    return !!this.registryDates.deleteAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserChangePasswordDto.html":{"url":"classes/UserChangePasswordDto.html","title":"class - UserChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/user-change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPassword\n                            \n                            \n                                    \n                                    Readonly\n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class UserChangePasswordDto {\n  @IsPassword()\n  readonly currentPassword: string;\n\n  @IsPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for 'users' route\nTags the API endpoints for easier grouping in documentation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({description: 'Creates a new user'})@ApiResponse({status: 201, description: 'You get a 201 response if your data is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Endpoint to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'Get list of users register in application'})@ApiResponse({status: 200, description: 'Fetch users successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve all registered users\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Users list\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({description: 'Get single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Fetch single user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Get object of user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: IdDto, undefined: RemoveDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({description: 'Delete single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiQuery({name: 'soft', type: Boolean, required: false, description: 'This query for soft delete data of user in application'})@ApiResponse({status: 200, description: 'Delete user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:156\n                        \n                    \n\n\n            \n                \n                        Endpoint to delete a user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            RemoveDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({description: 'Update single user with id and send data'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Update data of user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Endpoint to update a user's information\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags\n} from '@nestjs/swagger';\nimport { IdDto } from 'core/common/dto/id.dto';\nimport { RemoveDto } from 'core/common/dto/remove.dto';\n\n/**\n * Controller for 'users' route\n * Tags the API endpoints for easier grouping in documentation\n */\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  /**\n   * Inject the UsersService\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Endpoint to create a new user\n   * @param createUserDto\n   * @returns\n   */\n  @Post()\n  @ApiOperation({\n    description: 'Creates a new user'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your data is created successfully'\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    /**\n     * Receives user data for creation\n     * Calls the service method to create a user\n     */\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Endpoint to retrieve all registered users\n   * @returns Users list\n   */\n  @Get()\n  @ApiOperation({\n    description: 'Get list of users register in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch users successfully'\n  })\n  findAll() {\n    // Calls the service method to get all users\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Endpoint to retrieve a single user by ID\n   * @param param0\n   * @returns Get object of user\n   */\n  @Get(':id')\n  @ApiOperation({\n    description: 'Get single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch single user successfully'\n  })\n  findOne(@Param('id') { id }: IdDto) {\n    /**\n     * Extracts user ID from the request parameters\n     * Calls the service method to find a user by ID\n     */\n    return this.usersService.findOneById(id);\n  }\n\n  /**\n   * Endpoint to update a user's information\n   * @param param0\n   * @param updateUserDto\n   * @returns\n   */\n  @Patch(':id')\n  @ApiOperation({\n    description: 'Update single user with id and send data'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Update data of user successfully'\n  })\n  update(@Param('id') { id }: IdDto, @Body() updateUserDto: UpdateUserDto) {\n    /**\n     * Extracts ID and update data from the request\n     * Calls the service method to update user data\n     */\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  /**\n   * Endpoint to delete a user by ID\n   * @param param0\n   * @param param1\n   * @returns\n   */\n  @Delete(':id')\n  @ApiOperation({\n    description: 'Delete single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiQuery({\n    name: 'soft',\n    type: Boolean,\n    required: false,\n    description: 'This query for soft delete data of user in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete user successfully'\n  })\n  remove(@Param('id') { id }: IdDto, @Query() { soft }: RemoveDto) {\n    /**\n     * Extracts ID and soft delete flag from the request\n     * Calls the service method to remove the user\n     */\n    return this.usersService.remove(id, soft);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            UsersModule is responsible for managing user-related functionalities within the application.\nIt imports necessary modules and provides various components for user management, including:\n\nTypeOrmModule with User and Session entities to enable database operations for user and session management.\nCommonModule to handle hashing password and compare password with hashingService.\n\nThe module declares:\n\nUsersController, which defines the routes and handling of user-related HTTP requests.\nUsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\nUsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n\nOverall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/users.subscriber';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { CommonModule } from 'core/common/common.module';\nimport { SessionsModule } from 'sessions/sessions.module';\n\n/**\n * UsersModule is responsible for managing user-related functionalities within the application.\n *\n * It imports necessary modules and provides various components for user management, including:\n * - TypeOrmModule with User and Session entities to enable database operations for user and session management.\n * - CommonModule to handle hashing password and compare password with hashingService.\n *\n * The module declares:\n * - UsersController, which defines the routes and handling of user-related HTTP requests.\n * - UsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\n * - UsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n *\n * Overall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    forwardRef(() => CommonModule),\n    forwardRef(() => SessionsModule)\n  ],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber],\n  exports: [UsersService]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and preform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:18\n                            \n                        \n\n                \n                    \n                            Constructor for the class, which injects the User repository.\nThe @InjectRepository(User) decorator is used to get an instance of the\nUser repository from the dependency injection container. This allows\nthe class to interact with the database using the userRepository\ninstance, enabling operations such as creating, retrieving,\nupdating, or deleting User entities.\naccess to user-related database operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the Repository that provides\naccess to user-related database operations.\n\n\n                                                        \n                                                \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                hashingProvider for password hashing and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:39\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:56\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(where: FindOptionsWhere | FindOptionsWhere[], select: ()[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Find a single user using Where and Select query\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                select\n                                            \n                                                        ()[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string, relations?: FindOptionsRelations)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:92\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                relations\n                                            \n                                                            FindOptionsRelations\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, soft: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:162\n                        \n                    \n\n\n            \n                \n                        Find and Delete a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Find and Update a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(id: string, undefined: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Update user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { FindOptionsRelations, FindOptionsWhere, Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserChangePasswordDto } from '../core/common/dto/user-change-password.dto';\nimport { HashingProvider } from 'core/common/providers/hashing.provider';\n\n/**\n * Class to connect to Users table and preform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the class, which injects the User repository.\n   * The @InjectRepository(User) decorator is used to get an instance of the\n   * User repository from the dependency injection container. This allows\n   * the class to interact with the database using the userRepository\n   * instance, enabling operations such as creating, retrieving,\n   * updating, or deleting User entities.\n   * @param userRepository - An instance of the Repository that provides\n   * access to user-related database operations.\n   * @param hashingProvider hashingProvider for password hashing and compare password\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    private readonly hashingProvider: HashingProvider\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...createUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find a single user using Where and Select query\n   */\n  async findOne(\n    where: FindOptionsWhere | FindOptionsWhere[],\n    select: (keyof User)[] = [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n  ) {\n    // Find user\n    const user = await this.userRepository.findOne({\n      where,\n      select\n    });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  async findOneById(id: string, relations?: FindOptionsRelations) {\n    // Find user with id\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations\n    });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find and Update a single user using the ID of user\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      // Find user with id and update data\n      const user = await this.userRepository.preload({\n        id,\n        ...updateUserDto\n      });\n\n      // If doesn't exists, throw error\n      if (!user) {\n        throw new NotFoundException('user not found');\n      }\n\n      // Otherwise save and return user\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update user's password\n   * @param id\n   * @param UserChangePasswordDto\n   */\n  async updatePassword(\n    id: string,\n    { currentPassword, newPassword }: UserChangePasswordDto\n  ) {\n    // Finds the user by their ID, only retrieving the password\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['password']\n    });\n\n    /**\n     * Compares the provided current password with the stored password hash using the hashingProvider\n     */\n    const isMatch = await this.hashingProvider.compare(\n      currentPassword,\n      user.password\n    );\n\n    // Throws an UnauthorizedException if the current password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // If the new password is different from the current password, updates the user's password in the database\n    await this.userRepository.update(id, { password: newPassword });\n  }\n\n  /**\n   * Find and Delete a single user using the ID of user\n   */\n  async remove(id: string, soft: boolean) {\n    const user = await this.findOneById(id);\n    return soft\n      ? await this.userRepository.softRemove(user)\n      : await this.userRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersSubscriber.html":{"url":"classes/UsersSubscriber.html","title":"class - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/subscribers/users.subscriber.ts\n        \n\n\n            \n                Description\n            \n            \n                Decorator that marks the class as a subscriber for entity events\n\n            \n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeInsert\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(hashingProvider: HashingProvider)\n                    \n                \n                        \n                            \n                                Defined in src/users/subscribers/users.subscriber.ts:14\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the hashing provider\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        hashingProvider\n                                                  \n                                                        \n                                                                        HashingProvider\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeInsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeInsert(event: InsertEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:37\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is inserted into the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            InsertEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(event: UpdateEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:51\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is updated in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UpdateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:28\n                        \n                    \n\n\n            \n                \n                        This method specifies the entity that this subscriber listens to\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashingProvider } from 'core/common/providers/hashing.provider';\nimport {\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  UpdateEvent\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Decorator that marks the class as a subscriber for entity events\n */\n@EventSubscriber()\nexport class UsersSubscriber implements EntitySubscriberInterface {\n  /**\n   * Constructor to initialize the hashing provider\n   * @param hashingProvider\n   */\n  constructor(\n    // Injecting HashingProvider for password hashing\n    private readonly hashingProvider: HashingProvider\n  ) {}\n\n  /**\n   * This method specifies the entity that this subscriber listens to\n   * @returns User entity\n   */\n  listenTo() {\n    // Listen to User entity events\n    return User;\n  }\n\n  /**\n   * Method to handle actions before a user entity is inserted into the database\n   * @param event\n   */\n  async beforeInsert(event: InsertEvent) {\n    // Destructure user entity from the event\n    const { entity: user } = event;\n\n    // Hash the user's password before inserting it into the database\n    if (user.password) {\n      user.password = await this.hashingProvider.hash(user.password);\n    }\n  }\n\n  /**\n   * Method to handle actions before a user entity is updated in the database\n   * @param event\n   */\n  async beforeUpdate(event: UpdateEvent) {\n    // Destructure the entity from the event\n    const { entity, databaseEntity } = event;\n\n    if (entity.password) {\n      // Check if the new plain text password differs from the existing hashed password\n      const passwordMatches = await this.hashingProvider.compare(\n        entity.password,\n        databaseEntity.password\n      );\n\n      if (!passwordMatches)\n        // Hash the new password before updating it in the database\n        entity.password = await this.hashingProvider.hash(entity.password);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                commitlint.config.ts\n            \n            variable\n            Configuration\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/ipAddress.decorator.ts\n            \n            variable\n            IpAddress\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user-agent.decorator.ts\n            \n            variable\n            UserAgent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/middlewares/login-validation.middleware.ts\n            \n            injectable\n            LoginValidationMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            toBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            ToBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-boolean.decorator.ts\n            \n            variable\n            IsBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IS_PASSWORD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            isPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IsPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IS_USERNAME_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            isUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IsUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            usernameRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/dto/remove.dto.ts\n            \n            class\n            RemoveDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/user-change-password.dto.ts\n            \n            class\n            UserChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/embedded/registry-dates.embedded.ts\n            \n            class\n            RegistryDates\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomUser\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/device.interface.ts\n            \n            interface\n            Device\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/providers/bcrypt.provider.ts\n            \n            injectable\n            BcryptProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/providers/hashing.provider.ts\n            \n            injectable\n            HashingProvider\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/providers/pagination.provider.ts\n            \n            injectable\n            PaginationProvider\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/core/common/util/common.constants.ts\n            \n            variable\n            VALIDATION_PIPE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1725986093329-generate-tables.ts\n            \n            class\n            GenerateTables1725986093329\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1726228684695-create-user-indexes.ts\n            \n            class\n            CreateUserIndexes1726228684695\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1726229324413-create-user-indexes.ts\n            \n            class\n            CreateUserIndexes1726229324413\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1726229695133-create-session-indexes.ts\n            \n            class\n            CreateSessionIndexes1726229695133\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/env/env.constants.ts\n            \n            variable\n            ENV_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.controller.ts\n            \n            controller\n            SessionsController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.service.ts\n            \n            injectable\n            SessionsService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/subscribers/users.subscriber.ts\n            \n            class\n            UsersSubscriber\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport : ^1.0.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            compression : ^1.7.4\n        \n            joi : ^17.13.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            This enum defines the different roles a user can have in the application.\n\nADMIN: Represents a user with administrative privileges, allowing full access to the system.\nAUTHOR: Represents a user who can create and manage content, but with limited permissions compared to an admin.\nUSER: Represents a regular user with basic access, mainly for viewing content and participating in the application.\n\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 AUTHOR\n                            \n                        \n                        \n                            \n                                Value : AUTHOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/core/common/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                    \n                        \n                            Define an enumeration for user status in the application\n\nACTIVATE: Represents a user who is currently active and has access to the system\nDEACTIVATE: Represents a user who has been deactivated and no longer has access to the system\nSUSPEND: Represents a user whose access is temporarily suspended, possibly due to violations or other reasons\n\n\n                        \n                    \n                        \n                            \n                                 ACTIVATE\n                            \n                        \n                        \n                            \n                                Value : ACTIVATE\n                            \n                        \n                        \n                            \n                                 DEACTIVATE\n                            \n                        \n                        \n                            \n                                Value : DEACTIVATE\n                            \n                        \n                        \n                            \n                                 SUSPEND\n                            \n                        \n                        \n                            \n                                Value : SUSPEND\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function is an asynchronous function that initializes and starts the application.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nStay in touch\n\nAuthor - Mohamadreza Mosalli\nWebsite - https://minidocs.com\n\nLicense\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnvModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_exports\n\n\n\ncluster_SessionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nSessionsService \n\nSessionsService \n\nSessionsService  -->\n\nSessionsModule->SessionsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nHashingProvider \n\nHashingProvider \n\n\n\nCommonModule\n\nCommonModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\nHashingProvider  -->\n\nCommonModule->HashingProvider \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Mohamadreza Mosalli\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Configuration   (commitlint.config.ts)\n                        \n                        \n                            ENV_VALIDATION_SCHEMA   (src/.../env.constants.ts)\n                        \n                        \n                            IpAddress   (src/.../ipAddress.decorator.ts)\n                        \n                        \n                            IS_PASSWORD_KEY   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            IS_USERNAME_KEY   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsBoolean   (src/.../is-boolean.decorator.ts)\n                        \n                        \n                            isPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            isUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            passwordRegex   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            ToBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserAgent   (src/.../user-agent.decorator.ts)\n                        \n                        \n                            usernameRegex   (src/.../is-username.decorator.ts)\n                        \n                        \n                            VALIDATION_PIPE_OPTIONS   (src/.../common.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    commitlint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  extends: ['@commitlint/config-conventional'],\n  parserPreset: 'conventional-changelog-atom',\n  formatter: '@commitlint/format',\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // New feature\n        'fix', // Bug fix\n        'docs', // Documentation changes\n        'style', // Changes that do not affect the meaning of the code (white-space, formatting, etc.)\n        'refactor', // Code changes that neither fix a bug nor add a feature\n        'perf', // Performance improvement\n        'test', // Adding missing tests or correcting existing tests\n        'build', // Changes that affect the build system or external dependencies (example scopes: npm)\n        'ci', // Changes to CI configuration files and scripts\n        'chore', // Other changes that don't modify src or test files\n        'revert' // Reverts a previous commit\n      ]\n    ],\n    'scope-enum': [\n      2,\n      'always',\n      [\n        'setup', // Project setup\n        'config', // Configuration files\n        'deps', // Dependency updates\n        'feature', // Feature-specific changes\n        'bug', // Bug fixes\n        'docs', // Documentation\n        'style', // Code style/formatting\n        'refactor', // Code refactoring\n        'test', // Tests\n        'build', // Build scripts or configuration\n        'ci', // Continuous integration\n        'release', // Release related changes\n        'other' // Other changes\n      ]\n    ]\n  }\n}\n                    \n                \n\n            \n                \n                    Check messages of commit with this format\n\n                \n            \n\n        \n    \n\n    src/core/env/env.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  // Database username, must be a string and is required.\n  DATA_SOURCE_USERNAME: Joi.string().required(),\n\n  // Database password, must be a string and is required.\n  DATA_SOURCE_PASSWORD: Joi.string().required(),\n\n  // Host address for the database, must be a string and is required.\n  DATA_SOURCE_HOST: Joi.string().required(),\n\n  // Port number for the database connection, must be a number and is required.\n  DATA_SOURCE_PORT: Joi.number().required(),\n\n  // Name of the database to connect to, must be a string and is required.\n  DATA_SOURCE_DATABASE: Joi.string().required(),\n\n  // Connection URL for the database, must be a string and is required.\n  DATA_SOURCE_URL: Joi.string().required(),\n\n  // Secret key for JSON Web Token encryption, must be a string and is required.\n  JWT_SECRET_KEY: Joi.string().required(),\n\n  // Current environment (e.g., development, production), must be a string and is required.\n  NODE_ENV: Joi.string().required()\n})\n                    \n                \n\n            \n                \n                    Defines a validation schema for environment variables using Joi.\nThis schema specifies the required fields for the application to run properly.\nEach field must meet the specified type requirements:\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/ipAddress.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IpAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get ip address\n    const ip = request.headers['x-forwarded-for'] as string;\n\n    if (ip && process.env.NODE_ENV === 'production') {\n      ip.split(',')[0].replace(',', '');\n    }\n\n    // Set ip address\n    return ip ?? '127.0.0.1';\n  }\n)\n                    \n                \n\n            \n                \n                    IpAddress is a custom parameter decorator for use in NestJS controllers.\nIt extracts the client's IP address from the request object. The decorator will primarily\nbe used to inject the IP address into controller methods as a parameter.\nThe decorator performs the following operations:\n\nIt uses the ExecutionContext to access the HTTP request object.\nIt attempts to read the IP address from the 'x-forwarded-for' header, which is typically\nused in a proxied environment (like behind a load balancer).\nIf the application is running in a production environment and the 'x-forwarded-for' header\nis present, it splits the header value (which may contain multiple IPs) and keeps the first one,\nensuring that any extra spaces or commas are removed.\nIf no valid IP address is found, it defaults to returning '127.0.0.1', which is the localhost address.\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PASSWORD_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPassword'\n                    \n                \n\n            \n                \n                    A unique key identifier for the custom password validator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, passwordRegex)\n                    \n                \n\n            \n                \n                    A helper function that checks if the given value matches the password regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_PASSWORD_KEY, // Name of the custom validation rule\n    validator: {\n      // Implementation of the validation logic, using the isPassword helper\n      validate: (value): boolean => isPassword(value),\n      // Custom default error message returned when validation fails\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom decorator function for validating passwords on class properties.\nIt utilizes the 'class-validator' library to create a validation rule for password strength.\nIt takes an optional validationOptions parameter for customizing error messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n            \n                \n                    Regular expression for validating a password.\nThe password must contain:\n\nAt least one lowercase letter\nAt least one uppercase letter\nAt least one special character from the specified set (@$!%*?&)\nLength between 8 to 20 characters\n\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Defining a constant key for identifying public routes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    The Public decorator function sets metadata on a route handler to indicate\nthat the route should be treated as public, meaning it does not require authentication.\nBy calling SetMetadata with the IS_PUBLIC_KEY and a value of true,\nthis decorator can be used to easily mark controller methods for public access.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_USERNAME_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isUsername'\n                    \n                \n\n            \n                \n                    Key to identify the custom validation rule\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, usernameRegex)\n                    \n                \n\n            \n                \n                    Function to determine if a value matches the username regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions // Optional object for additional validation options\n): PropertyDecorator => {\n  return ValidateBy({\n    // Name of the validation rule\n    name: IS_USERNAME_KEY,\n\n    // Validator object containing the validation logic\n    validator: {\n      // Validation function that returns true if value is a valid username\n      validate: (value): boolean => isUsername(value),\n\n      // Default error message if validation fails\n      defaultMessage: buildMessage(\n        // Custom message format, indicating which property failed validation\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom validation decorator for username validation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{3,30}$/\n                    \n                \n\n            \n                \n                    Define a regular expression for validating usernames\nUsername must:\n\nNot contain two consecutive dots\nNot end with a dot\nStart with a word character (not a special character)\nHave a length between 4 to 30 characters\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) =>\n  applyDecorators(DefaultIsBoolean(validationOptions), ToBoolean())\n                    \n                \n\n            \n                \n                    Create a custom decorator 'IsBoolean' that combines the default class-validator\n'IsBoolean' validation with a custom transformation decorator 'ToBoolean'.\nThis allows for both validation of boolean values and automatic conversion\nof input values into booleans before validation occurs.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/transforms/to-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown) => {\n  // Using switch statement to handle different input cases.\n  switch (value) {\n    // If the input value is null, return 'failure'.\n    case null:\n      return 'failure';\n\n    // When the input value is the string 'true', return a boolean true.\n    case 'true':\n      return true;\n\n    // When the input value is the string 'false', return a boolean false.\n    case 'false':\n      return false;\n\n    // For any other value, return the value unchanged.\n    default:\n      return value;\n  }\n}\n                    \n                \n\n            \n                \n                    A utility function that converts various input values to a boolean type.\nThe function returns either a boolean (true or false), a string 'failure', or the original value based on the input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ToBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Transform(({ obj, key }) => toBoolean(obj[key]))\n                    \n                \n\n            \n                \n                    A decorator function ToBoolean that applies the custom transformation logic to class properties.\nThis decorator uses the Transform decorator to map the relevant property value to its boolean representation\nusing the toBoolean function. It extracts the value from the object using the given key.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    // Retrieve the request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get the user object from the request\n    const user = request.user;\n\n    // Log the user object for debugging purposes\n    console.log('user', user);\n\n    // If a specific field is requested, return that field; otherwise, return the whole user object\n    return data ? user?.[data] : user;\n  }\n)\n                    \n                \n\n            \n                \n                    User decorator that extracts user information from the request object.\nThis custom decorator can be used in NestJS route handlers to easily access\nuser data stored in the request object. It leverages the createParamDecorator\nfunction provided by NestJS to create a parameter decorator that can be used in\ncontroller methods.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user-agent.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Device => {\n    // Retrieve the HTTP request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Obtain the 'User-Agent' header from the request headers\n    const userAgent = request.headers['user-agent'];\n\n    // Initialize the device object with a default name of 'unknown'\n    let device: Device = {\n      name: 'unknown'\n    };\n\n    // If a User-Agent string is present, start pattern matching to identify the device\n    if (userAgent) {\n      // Check if the User-Agent indicates an iOS device\n      if (/like Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'iOS',\n          // Extract the version number using a regex pattern and replace underscores with dots\n          version: /CPU( iPhone)? OS ([0-9\\._]+) like Mac OS X/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates an Android device\n      } else if (/Android/.test(userAgent)) {\n        device = {\n          name: 'Android',\n          // Extract the version number of Android from the User-Agent string\n          version: /Android ([0-9\\.]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a macOS device\n      } else if (/(Intel|PPC) Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'macOS',\n          // Extract the version number of macOS from the User-Agent string, replacing underscores with dots\n          version: /(Intel|PPC) Mac OS X ?([0-9\\._]*)[\\)\\;]/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates a Windows device\n      } else if (/Windows NT/.test(userAgent)) {\n        device = {\n          name: 'Windows',\n          // Extract the version number of Windows from the User-Agent string\n          version: /Windows NT ([0-9\\._]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a Linux operating system\n      } else if (/Linux/i.test(userAgent) && /X11/i.test(userAgent)) {\n        device = {\n          name: 'Linux'\n          // Version detection can be added here if needed\n        };\n      }\n    }\n\n    // Return the parsed device information\n    return device;\n  }\n)\n                    \n                \n\n            \n                \n                    This decorator extracts and parses the 'User-Agent' header from the HTTP request,\nallowing the identification of the client's device type and version.\nIt is created using NestJS's createParamDecorator function.\n\n                \n            \n\n        \n    \n\n    src/core/common/util/common.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_PIPE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * 'whitelist' option ensures that only properties that are defined in the DTO\n   * are allowed in the incoming request. Any properties that are not in the\n   * DTO will be stripped from the request object.\n   */\n  whitelist: true,\n\n  /**\n   * 'forbidNonWhitelisted' option throws an error if any non-whitelisted\n   * properties are present in the incoming request. This is useful for\n   * enforcing strict validation and preventing unexpected data from being processed.\n   */\n  forbidNonWhitelisted: true,\n\n  /**\n   * 'transform' option enables automatic transformation of incoming request\n   * data into the specified DTO types. This way, data will be automatically\n   * converted to the types defined in the DTO (e.g., string to number).\n   */\n  transform: true,\n\n  // 'transformOptions' allows for additional settings for the transformation process.\n  transformOptions: {\n    /**\n     * 'enableImplicitConversion' allows for automatic type conversion of properties\n     * to their respective types as defined in the DTO. For example, if a property\n     * is defined as a number in the DTO, a string representation of that number\n     * in the incoming request will be converted to a number automatically.\n     */\n    enableImplicitConversion: true\n  }\n}\n                    \n                \n\n            \n                \n                    Configuration object for the validation pipe in a NestJS application.\nThe validation pipe is used to automatically validate incoming requests and\ntransform DTOs (Data Transfer Objects) to the specified types.\nThe options set here enhance the validation and transformation process.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
