var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.977,1,2.427]],["body/modules/AppModule.html",[0,1.801,1,4.811,2,2.27,3,1.655,4,2.042,5,2.042,6,1.768,7,1.896,8,2.042,9,3.018,10,3.018,11,3.844,12,0.022,13,4.165,14,4.165,15,4.165,16,2.789,17,2.042,18,2.042,19,0.252,20,0.252,21,0.225,22,3.54,23,0.569,24,4.122,25,4.835,26,2.595,27,3.17,28,4.835,29,4.122,30,4.122,31,3.653,32,4.835,33,3.653,34,4.835,35,3.022,36,4.122,37,5.918,38,2.59,39,3.302,40,1.241,41,1.67,42,5.045,43,4.835,44,4.042,45,3.653,46,1.993,47,3.653,48,4.122,49,4.835,50,4.835,51,4.835,52,4.835,53,3.653,54,4.122,55,4.122,56,0.539,57,0.774,58,3.018,59,3.54,60,3.54,61,3.54,62,0.252,63,0.032,64,0.015,65,0.015]],["title/controllers/AuthController.html",[66,1.775,67,2.427]],["body/controllers/AuthController.html",[12,0.023,19,0.189,20,0.189,21,0.169,23,0.834,26,1.725,38,2.107,40,1.34,44,2.686,56,0.58,57,0.579,62,0.189,63,0.024,64,0.012,65,0.012,66,1.324,67,3.544,68,1.324,69,2.26,70,1.81,71,2.65,72,2.459,73,3.933,74,2.269,75,0.322,76,1.283,77,3.999,78,3.354,79,4.188,80,3.921,81,2.65,82,1.457,83,3.944,84,2.015,85,2.65,86,2.276,87,0.834,88,2.65,89,3.933,90,1.792,91,1.428,92,0.631,93,1.428,94,4.85,95,2.994,96,3.244,97,1.903,98,2.65,99,2.65,100,2.65,101,3.933,102,2.26,103,5.189,104,3.003,105,2.685,106,2.65,107,2.65,108,3.354,109,2.426,110,2.269,111,1.725,112,2.26,113,3.758,114,2.65,115,2.65,116,1.725,117,2.972,118,2.65,119,2.65,120,2.26,121,2.65,122,1.419,123,2.343,124,2.26,125,2.972,126,2.65,127,2.932,128,2.65,129,2.972,130,2.65,131,2.65,132,2.65,133,2.26,134,2.26,135,2.26,136,1.529,137,1.657,138,2.26,139,3.354,140,1.81,141,2.65,142,2.26,143,1.419,144,1.81,145,2.65,146,2.65,147,1.81,148,0.651,149,3.003,150,2.65,151,2.65,152,2.015,153,2.65,154,3.933,155,2.65,156,2.65,157,2.65,158,3.933,159,2.65,160,2.65,161,2.65,162,2.65,163,2.65,164,2.65]],["title/modules/AuthModule.html",[0,0.977,11,2.05]],["body/modules/AuthModule.html",[0,1.487,2,1.408,3,1.597,4,1.971,5,1.971,6,1.706,7,2.895,8,3.118,11,4.018,12,0.023,16,2.722,17,1.971,18,1.971,19,0.243,20,0.243,21,0.217,27,1.829,40,0.663,41,1.63,56,0.619,57,0.747,62,0.243,63,0.031,64,0.014,65,0.014,67,3.691,68,2.357,76,1.114,87,0.549,90,1.18,91,0.94,92,0.415,93,0.94,97,1.052,122,1.829,123,3.16,124,2.912,137,2.949,138,2.912,139,2.912,165,2.912,166,2.912,167,2.912,168,3.3,169,3.954,170,3.954,171,3.388,172,3.416,173,3.416,174,4.718,175,5.829,176,3.416,177,3.416,178,3.416,179,4.718,180,2.912,181,2.333,182,4.718,183,2.333,184,3.416,185,2.581,186,2.333,187,1.706,188,1.971,189,3.416,190,2.912,191,3.416,192,3.222,193,3.416,194,2.912,195,2.333,196,3.416,197,3.416,198,3.416,199,3.416,200,2.912,201,2.581,202,3.416,203,3.416,204,3.564,205,4.718,206,2.135,207,3.416]],["title/injectables/AuthService.html",[123,1.775,208,0.823]],["body/injectables/AuthService.html",[12,0.023,19,0.144,20,0.144,21,0.129,40,1.321,41,1.804,46,0.836,56,0.54,57,0.443,62,0.144,63,0.019,64,0.01,65,0.01,75,0.246,76,1.045,77,3.385,78,2.731,79,2.42,80,2.42,82,1.445,83,2.82,86,2.824,87,0.879,90,1.889,91,1.504,92,0.665,93,1.504,94,1.532,97,1.609,102,2.731,104,2.253,105,2.337,111,0.889,112,2.731,113,3.264,116,2.486,122,1.086,123,1.6,133,1.728,134,1.728,135,1.728,136,1.169,144,1.385,148,1.107,152,2.32,168,2.731,171,2.929,185,1.532,187,1.013,194,1.728,200,1.728,208,0.742,209,0.836,210,1.728,211,3.541,212,3.97,213,2.731,214,1.715,215,1.728,216,3.408,217,5.468,218,2.027,219,2.42,220,2.027,221,1.385,222,2.027,223,2.441,224,3.203,225,2.027,226,3.07,227,2.027,228,2.027,229,2.027,230,2.82,231,4.511,232,2.027,233,3.203,234,2.027,235,2.416,236,1.728,237,4.511,238,1.532,239,0.889,240,1.728,241,1.728,242,1.848,243,1.728,244,1.728,245,1.532,246,2.82,247,1.728,248,1.404,249,3.044,250,3.264,251,1.728,252,1.728,253,1.728,254,1.728,255,1.848,256,3.735,257,1.532,258,2.731,259,1.385,260,1.848,261,2.296,262,3.203,263,2.027,264,3.385,265,2.731,266,1.385,267,2.027,268,2.187,269,3.385,270,3.385,271,2.731,272,2.731,273,2.712,274,2.002,275,4.511,276,2.027,277,3.385,278,3.203,279,3.355,280,3.203,281,1.385,282,1.267,283,2.027,284,1.6,285,1.532,286,1.848,287,2.731,288,2.731,289,1.728,290,1.385,291,2.027,292,2.027,293,3.203,294,2.027,295,2.027,296,1.728,297,2.027,298,2.027,299,1.532,300,2.027,301,3.203,302,2.027,303,2.731]],["title/injectables/BcryptService.html",[192,2.427,208,0.823]],["body/injectables/BcryptService.html",[12,0.022,19,0.227,20,0.227,21,0.203,23,0.513,46,2.791,56,0.454,57,0.698,62,0.227,63,0.048,64,0.014,65,0.014,72,2.813,75,0.388,76,1.468,82,1.48,87,0.723,90,1.554,91,1.238,92,0.547,93,1.238,97,1.908,149,2.827,152,2.023,168,2.248,192,3.865,206,1.995,208,1.311,209,1.316,211,2.791,226,1.995,249,1.594,250,1.709,259,2.18,304,2.721,305,3.836,306,3.836,307,3.836,308,2.603,309,4.825,310,4.5,311,3.399,312,2.813,313,2.41,314,3.399,315,4.5,316,3.399,317,4.825,318,5.539,319,3.836,320,5.539,321,5.632,322,3.191,323,3.265,324,4.5,325,4.5,326,3.265,327,3.073,328,3.836,329,3.399,330,3.836,331,5.659,332,5.279,333,3.191,334,3.836,335,4.443,336,5.659,337,5.212,338,3.258,339,4.825,340,1.841,341,4.5,342,3.191,343,4.5,344,3.191,345,2.721,346,3.191,347,3.191,348,3.191]],["title/classes/ChangePasswordDto.html",[63,0.033,83,2.221]],["body/classes/ChangePasswordDto.html",[12,0.022,19,0.347,20,0.347,21,0.31,56,0.424,62,0.347,63,0.045,64,0.018,65,0.018,75,0.592,82,1.46,83,3.715,84,2.307,87,0.955,92,0.722,148,1.71,269,5.469,270,5.469,349,2.008,350,5.469,351,4.152,352,1.545,353,3.952,354,4.87,355,4.87,356,3.326,357,3.326]],["title/modules/CommonModule.html",[0,0.977,358,2.221]],["body/modules/CommonModule.html",[0,1.785,2,1.848,7,2.401,12,0.022,19,0.319,20,0.319,21,0.285,23,0.721,26,2.845,56,0.538,57,0.98,62,0.319,63,0.041,64,0.017,65,0.017,87,0.907,116,2.71,183,3.062,204,4.67,313,3.024,358,4.056,359,4.483,360,2.639,361,4.814,362,5.646,363,3.529,364,4.814,365,5.646,366,4.266,367,3.257,368,3.856,369,6.181,370,4.266,371,3.257,372,4.67,373,5.646,374,4.483,375,4.483,376,4.483]],["title/modules/CoreModule.html",[0,0.977,13,2.221]],["body/modules/CoreModule.html",[0,1.765,2,2.718,3,1.837,4,2.267,5,2.267,6,1.963,7,2.105,8,2.267,12,0.022,13,4.42,16,2.992,17,2.267,18,2.267,19,0.28,20,0.28,21,0.25,23,0.632,24,4.422,26,2.274,27,2.778,44,3.542,48,3.35,55,4.422,56,0.537,57,0.859,62,0.28,63,0.036,64,0.016,65,0.016,72,3.242,204,2.969,358,4.12,377,3.35,378,3.35,379,4.12,380,4.12,381,3.929,382,5.186,383,5.805,384,5.186,385,3.542,386,5.186,387,4.422,388,3.918,389,5.186,390,5.186,391,4.422,392,5.186,393,5.186,394,4.422,395,5.186,396,5.186,397,3.929,398,3.929,399,3.929,400,3.929,401,3.35,402,2.267,403,2.456,404,2.969,405,2.267]],["title/classes/CreateUserDto.html",[63,0.033,406,2.05]],["body/classes/CreateUserDto.html",[12,0.022,19,0.223,20,0.223,21,0.199,23,0.989,56,0.516,62,0.223,63,0.041,64,0.013,65,0.013,75,0.381,82,1.414,84,2.301,86,2.599,87,0.953,91,1.63,92,0.72,110,2.563,143,1.679,148,1.709,235,3.174,274,2.777,284,2.96,286,2.977,349,1.292,352,1.155,353,2.563,356,3.034,357,2.141,406,2.563,407,5.248,408,1.959,409,3.899,410,5.039,411,3.134,412,2.672,413,2.672,414,5.248,415,3.356,416,4.65,417,6.669,418,4.442,419,3.134,420,3.134,421,4.442,422,4.442,423,5.614,424,5.614,425,3.356,426,3.788,427,3.134,428,3.134,429,4.478,430,3.134,431,4.442,432,3.788,433,4.4,434,3.034,435,3.356,436,3.134,437,3.134,438,3.788,439,4.442,440,4.442,441,3.788,442,3.134,443,3.134,444,4.241,445,4.4,446,3.788,447,3.134,448,4.4,449,2.368,450,1.465,451,3.034,452,2.672,453,2.672,454,2.672,455,3.134,456,3.134,457,3.134,458,2.141,459,3.134,460,2.368,461,3.134]],["title/interfaces/CustomRequest.html",[462,1.465,463,2.427]],["body/interfaces/CustomRequest.html",[12,0.022,19,0.255,20,0.255,21,0.228,23,0.576,40,1.397,41,2.367,56,0.424,62,0.347,64,0.015,65,0.015,75,0.436,82,1.36,92,0.674,104,2.435,105,2.285,110,2.813,111,2.931,148,1.36,188,2.067,223,2.549,242,3.855,248,2.138,261,2.279,282,4.012,352,1.546,462,2.825,463,4.062,464,2.24,465,2.707,466,2.707,467,4.157,468,4.157,469,3.517,470,3.464,471,4.725,472,3.684,473,3.684,474,3.438,475,3.684,476,2.435,477,2.707,478,3.055,479,1.919,480,3.055,481,2.24,482,2.707,483,4.157,484,3.048]],["title/interfaces/CustomUser.html",[242,2.05,462,1.465]],["body/interfaces/CustomUser.html",[12,0.022,19,0.251,20,0.251,21,0.224,23,0.566,40,1.389,41,2.464,56,0.419,62,0.343,64,0.015,65,0.015,75,0.428,82,1.429,92,0.667,104,2.742,105,2.434,110,3.167,111,2.96,148,1.348,188,2.03,223,2.676,242,3.77,248,1.543,261,2.566,282,4.085,352,1.427,462,2.783,463,3.289,464,2.2,465,2.658,466,2.658,467,3,468,3,469,3.162,470,3.01,471,4.68,472,2.658,473,2.658,474,3.311,475,2.658,476,1.758,477,3.638,478,4.105,479,2.579,480,4.105,481,3.01,482,3.638,483,4.68,484,3.01]],["title/modules/DatabaseModule.html",[0,0.977,379,2.221]],["body/modules/DatabaseModule.html",[0,1.827,2,1.665,12,0.022,19,0.288,20,0.288,21,0.257,23,0.649,27,3.151,42,4.502,56,0.512,57,0.883,62,0.288,63,0.037,64,0.016,65,0.016,72,3.301,86,2.315,87,0.849,92,0.642,186,4.018,187,2.017,239,2.315,281,3.606,284,2.637,308,2.637,312,3.301,313,2.828,371,3.046,379,3.9,402,3.832,405,3.599,485,4.038,486,5.28,487,4.502,488,5.32,489,3.301,490,5.28,491,5.28,492,4.502,493,5.28,494,5.883,495,4.502,496,5.28,497,4.502,498,3.989,499,5.28,500,5.28,501,5.28,502,5.28,503,3.606,504,3.989,505,5.28,506,3.989,507,4.038,508,4.038]],["title/interfaces/Device.html",[105,1.465,462,1.465]],["body/interfaces/Device.html",[12,0.022,19,0.302,20,0.302,21,0.27,23,0.682,62,0.302,64,0.016,65,0.016,75,0.516,82,1.516,91,1.943,92,0.663,93,1.852,105,2.931,148,1.339,221,4.115,352,1.417,462,1.75,464,2.653,474,3.406,479,2.273,484,4.379,497,3.618,503,4.343,509,3.618,510,2.653,511,4.12,512,4.244,513,3.618,514,3.618,515,3.618,516,4.244,517,4.649,518,4.649,519,5.453,520,4.12,521,5.453,522,5.453,523,5.453]],["title/modules/EnvModule.html",[0,0.977,380,2.221]],["body/modules/EnvModule.html",[0,1.913,2,2.351,12,0.022,19,0.324,20,0.324,21,0.29,23,0.732,27,2.439,56,0.542,57,0.995,62,0.324,63,0.042,64,0.017,65,0.017,116,2.5,180,4.861,181,3.11,308,3.109,311,4.308,360,2.665,363,2.846,367,2.627,371,2.627,380,3.564,404,4.308,405,2.627,503,3.11,524,4.553,525,4.308,526,4.553,527,4.553,528,4.553,529,3.882,530,3.882,531,4.553,532,3.882,533,4.553,534,4.308,535,4.553,536,4.553,537,2.274,538,3.882,539,2.439,540,4.553]],["title/classes/GenerateTables1725986093329.html",[63,0.033,541,2.684]],["body/classes/GenerateTables1725986093329.html",[12,0.022,19,0.216,20,0.216,21,0.193,40,1.074,41,1.911,56,0.264,62,0.216,63,0.028,64,0.013,65,0.013,75,0.369,76,1.417,82,0.664,86,1.332,87,0.815,90,1.5,91,1.676,92,0.762,93,1.195,95,2.925,97,1.338,104,1.517,105,1.252,127,3.807,206,2.715,211,3.262,223,2.148,235,2.326,239,1.332,248,2.427,250,3.548,259,3.78,261,2.03,268,2.074,284,2.169,285,2.294,286,1.752,338,3.92,340,1.752,349,1.252,352,1.129,385,3.463,434,2.966,435,2.294,487,3.703,541,4.181,542,4.718,543,2.589,544,5.071,545,4.343,546,3.036,547,4.343,548,6.529,549,3.036,550,3.78,551,4.343,552,3.036,553,6.624,554,4.602,555,5.868,556,4.343,557,5.193,558,5.534,559,2.074,560,2.294,561,5.534,562,4.343,563,6.271,564,3.036,565,3.17,566,3.036,567,4.343,568,5.071,569,3.036,570,5.071,571,3.036,572,3.036,573,3.036,574,2.294,575,3.703,576,2.294,577,2.294,578,3.036,579,3.036,580,3.036,581,4.343,582,2.589,583,4.343,584,3.036,585,3.036,586,3.036,587,4.343,588,2.074,589,5.855]],["title/injectables/HashingService.html",[168,1.775,208,0.823]],["body/injectables/HashingService.html",[12,0.022,19,0.236,20,0.236,21,0.211,23,0.533,46,2.877,56,0.289,57,0.725,62,0.236,63,0.055,64,0.014,65,0.014,75,0.403,76,1.508,82,1.534,87,0.925,90,1.597,91,1.272,92,0.562,93,1.272,97,2.021,149,2.659,168,2.876,208,1.072,209,1.368,305,4.908,306,3.943,313,2.477,316,3.494,317,4.908,318,4.908,319,3.943,320,5.594,321,5.345,323,3.785,326,3.321,327,3.158,328,3.943,329,3.494,330,3.943,345,5.345,388,3.494,462,1.907,550,4.61,590,2.829,591,6.933,592,3.943,593,4.624,594,4.624,595,4.624,596,4.624,597,3.319,598,4.35,599,4.908,600,3.943,601,6.269,602,3.319]],["title/classes/IdDto.html",[63,0.033,603,2.427]],["body/classes/IdDto.html",[12,0.022,19,0.298,20,0.298,21,0.266,23,0.868,46,2.227,56,0.47,62,0.298,63,0.058,64,0.016,65,0.016,75,0.508,82,1.511,84,1.624,87,0.672,92,0.657,95,3.777,96,2.615,111,2.369,143,2.24,148,1.469,223,2.649,274,2.615,340,2.413,349,1.725,352,1.404,409,3.16,444,4.082,450,1.955,472,4.082,474,3.205,475,4.082,510,3.377,565,3.377,603,3.69,604,3.566,605,3.69,606,4.082,607,3.69,608,3.377,609,5.402,610,4.319,611,5.402,612,4.183,613,4.183,614,4.082,615,4.606,616,2.857,617,3.566,618,3.566,619,3.16]],["title/injectables/JwtAuthGuard.html",[137,2.221,208,0.823]],["body/injectables/JwtAuthGuard.html",[0,1.159,12,0.022,19,0.207,20,0.207,21,0.185,23,0.677,30,4.221,35,2.633,38,3.598,39,3.933,56,0.472,57,0.636,62,0.207,63,0.057,64,0.013,65,0.013,74,3.131,75,0.354,76,1.374,87,0.926,90,1.455,91,1.159,92,0.512,93,1.159,97,1.774,127,3.964,137,3.392,147,1.988,148,0.714,149,2.104,152,1.635,183,1.988,208,0.976,209,1.2,214,2.652,249,1.454,260,2.43,273,1.988,282,3.095,299,3.741,308,2.104,313,2.256,323,1.679,338,3.392,366,4.1,367,1.679,370,3.183,403,2.633,469,3.216,476,2.711,479,2.256,489,2.633,537,2.473,592,3.592,620,4.221,621,2.199,622,4.627,623,4.91,624,2.877,625,3.592,626,3.183,627,4.213,628,4.91,629,4.213,630,4.213,631,4.213,632,4.213,633,2.91,634,6.562,635,2.91,636,3.592,637,3.592,638,4.213,639,5.119,640,2.91,641,4.213,642,3.592,643,4.213,644,2.877,645,3.592,646,4.882,647,4.1,648,4.1,649,4.951,650,3.392,651,3.095,652,1.819,653,2.199,654,2.91,655,2.199,656,3.592,657,2.91,658,2.91,659,4.213,660,2.91,661,2.91,662,2.481,663,2.91,664,2.481,665,2.91]],["title/interfaces/JwtPayload.html",[230,2.221,462,1.465]],["body/interfaces/JwtPayload.html",[12,0.021,19,0.332,20,0.332,21,0.297,23,0.749,31,3.522,40,1.221,62,0.332,64,0.017,65,0.017,75,0.567,82,1.507,92,0.567,95,3.338,96,3.617,109,2.179,148,1.42,223,2.742,230,3.617,257,4.372,260,3.338,261,2.705,352,1.504,391,3.975,462,2.386,464,2.914,474,2.497,510,2.914,513,3.975,559,3.184,616,3.184,666,3.975,667,3.975,668,4.662,669,3.975,670,3.522,671,4.662,672,3.975,673,4.662,674,3.975,675,3.522,676,4.662,677,4.662,678,4.662,679,4.662]],["title/injectables/JwtStrategy.html",[169,2.221,208,0.823]],["body/injectables/JwtStrategy.html",[12,0.022,19,0.28,20,0.189,21,0.169,23,0.754,35,2.459,38,2.107,39,2.686,40,1.076,46,1.622,56,0.567,57,0.579,62,0.189,63,0.051,64,0.012,65,0.012,72,2.459,75,0.322,76,1.283,87,0.834,90,1.359,91,1.082,92,0.631,93,1.082,97,1.212,111,2.637,123,3.293,148,0.966,149,2.592,152,1.029,169,3.63,181,1.81,190,3.999,208,0.911,209,1.093,214,2.969,230,3.244,240,2.26,241,2.26,246,2.459,255,2.269,257,4.766,260,3.961,261,1.838,279,2.686,308,2.592,316,2.972,323,2.994,360,1.239,363,3.86,368,2.686,371,1.529,385,1.81,387,3.354,403,2.459,405,3.351,462,1.093,469,3.438,470,2.459,476,2.592,481,2.459,498,2.972,511,2.972,532,2.26,537,1.324,539,2.969,608,2.459,624,3.544,636,2.26,637,2.26,650,2.459,652,1.657,655,2.002,680,2.26,681,5.189,682,3.933,683,3.921,684,3.933,685,3.933,686,3.354,687,2.65,688,5.189,689,2.65,690,4.69,691,4.425,692,4.425,693,3.933,694,3.933,695,2.65,696,4.69,697,3.354,698,2.972,699,3.354,700,3.933,701,2.972,702,3.354,703,3.354,704,2.26,705,2.26,706,2.65,707,2.65,708,2.65,709,2.65,710,3.354,711,2.65,712,2.65,713,2.65,714,2.65,715,2.26,716,2.65,717,2.26,718,2.65,719,2.65,720,2.65,721,2.002,722,2.65,723,2.65,724,2.65,725,2.26,726,2.26,727,2.65,728,2.65]],["title/injectables/LocalAuthGuard.html",[140,2.427,208,0.823]],["body/injectables/LocalAuthGuard.html",[12,0.022,19,0.319,20,0.319,21,0.285,23,0.721,33,4.266,35,3.529,38,3.475,56,0.491,57,0.98,62,0.319,63,0.057,64,0.017,65,0.017,74,3.257,140,4.431,208,1.308,209,1.848,476,3.241,520,4.266,621,3.387,622,4.814,623,5.27,625,4.814,626,4.266,652,3.864,683,4.902,729,3.822,730,5.158,731,4.814,732,3.856,733,5.646,734,5.646,735,4.814,736,5.646,737,5.646,738,5.646]],["title/injectables/LocalStrategy.html",[170,2.221,208,0.823]],["body/injectables/LocalStrategy.html",[12,0.022,19,0.227,20,0.227,21,0.203,23,0.512,26,1.971,31,3.395,38,2.407,40,1.26,53,3.395,56,0.492,57,0.696,62,0.227,63,0.055,64,0.014,65,0.014,75,0.387,76,1.844,82,1.353,86,2.895,87,0.722,90,1.552,91,1.236,92,0.546,93,1.236,97,1.385,111,2.48,123,3.298,147,2.176,148,0.782,149,2.601,152,2.021,170,3.535,208,1.041,209,1.313,213,3.831,214,3.194,235,3.536,255,2.592,256,3.069,273,3.069,274,2.809,284,2.245,312,2.809,313,2.407,323,3.262,361,3.831,367,2.592,368,3.069,371,2.592,476,2.825,489,2.809,539,3.029,550,3.069,598,3.395,608,2.809,624,4.343,644,3.069,650,2.809,652,1.991,655,3.934,683,4.505,686,3.831,701,3.395,704,5.084,705,2.716,725,3.831,730,3.934,732,3.069,739,2.716,740,4.494,741,4.494,742,3.186,743,3.186,744,5.655,745,3.395,746,4.494,747,3.186,748,4.494,749,4.494,750,4.494,751,3.186,752,3.186]],["title/classes/LoginUserDto.html",[63,0.033,753,2.427]],["body/classes/LoginUserDto.html",[12,0.022,19,0.339,20,0.339,21,0.303,56,0.51,62,0.339,63,0.054,64,0.018,65,0.018,75,0.579,82,1.449,84,2.276,86,2.786,87,0.942,92,0.713,148,1.701,235,3.403,349,1.964,352,1.524,353,3.665,356,3.254,357,3.254,408,2.978,450,2.227,614,4.43,753,4.005,754,5.416,755,4.764,756,4.062,757,4.062,758,5.864]],["title/injectables/LoginValidationMiddleware.html",[195,2.427,208,0.823]],["body/injectables/LoginValidationMiddleware.html",[12,0.022,19,0.235,20,0.235,21,0.21,23,0.739,40,0.893,46,1.897,56,0.525,57,0.72,62,0.235,63,0.057,64,0.014,65,0.014,75,0.4,76,1.5,79,3.475,87,0.852,90,1.138,91,0.906,92,0.4,93,0.906,97,1.417,116,1.444,117,2.488,136,1.9,149,2.648,195,3.142,206,2.059,208,1.066,209,1.358,211,2.839,249,2.298,250,1.764,255,3.058,256,3.919,279,3.142,290,3.621,303,4.892,308,1.645,352,1.196,360,2.15,363,3.909,367,2.654,368,2.25,450,2.15,469,3.563,470,4.012,482,4.005,537,2.866,539,2.464,607,3.142,608,2.876,617,2.808,646,2.488,648,2.488,662,2.808,697,3.922,698,3.475,701,4.005,753,3.142,759,3.922,760,2.808,761,6.037,762,4.6,763,5.332,764,5.745,765,5.738,766,3.294,767,3.142,768,3.922,769,5.738,770,5.738,771,4.6,772,3.294,773,3.294,774,2.808,775,3.294,776,4.6,777,3.294,778,3.294,779,3.922,780,3.922,781,3.294,782,3.294,783,3.294,784,3.294]],["title/classes/RegisterUserDto.html",[63,0.033,113,2.221]],["body/classes/RegisterUserDto.html",[12,0.022,19,0.321,20,0.321,21,0.287,56,0.539,62,0.321,63,0.052,64,0.017,65,0.017,75,0.548,82,1.495,84,2.405,86,2.717,87,0.996,92,0.753,113,3.541,148,1.738,235,3.318,284,3.095,349,1.858,352,1.472,353,3.574,356,3.869,357,3.078,408,2.817,412,3.842,446,5.282,450,2.106,451,4.232,452,3.842,756,3.842,757,3.842,785,5.542]],["title/classes/RegistryDates.html",[63,0.033,786,2.427]],["body/classes/RegistryDates.html",[12,0.022,19,0.246,20,0.246,21,0.219,23,0.554,56,0.3,62,0.246,63,0.056,64,0.014,65,0.014,75,0.419,84,2.383,87,0.873,92,0.66,109,3.313,239,2.851,299,3.589,314,3.589,349,1.422,352,1.235,388,3.589,401,4.05,402,3.377,479,2.544,574,4.104,576,4.104,577,4.104,588,3.244,628,4.05,674,4.05,721,3.589,745,4.793,786,3.244,787,4.991,788,2.941,789,4.05,790,5.302,791,4.05,792,5.646,793,5.853,794,4.991,795,4.05,796,5.433,797,3.449,798,5.409,799,3.589,800,5.853,801,4.75,802,5.433,803,3.449,804,3.659,805,4.991,806,4.05,807,4.75,808,5.433,809,3.449,810,4.75,811,4.991,812,4.75]],["title/classes/RemoveDto.html",[63,0.033,813,2.427]],["body/classes/RemoveDto.html",[12,0.022,19,0.299,20,0.299,21,0.267,23,0.87,33,4.088,46,2.231,56,0.521,62,0.299,63,0.058,64,0.016,65,0.016,75,0.51,84,1.628,87,0.674,92,0.796,93,1.803,111,2.373,143,2.246,148,1.471,326,3.871,340,2.419,349,1.729,352,1.406,360,2.958,413,3.575,445,4.613,448,4.613,450,1.96,469,2.246,474,3.656,489,2.621,539,2.246,606,4.088,607,3.695,618,3.575,619,3.168,804,4.369,806,4.613,813,3.695,814,3.575,815,4.193,816,4.193,817,4.088,818,4.193,819,4.193,820,3.575]],["title/entities/Session.html",[41,1.227,109,1.661]],["body/entities/Session.html",[12,0.022,19,0.232,20,0.232,21,0.207,23,0.522,26,1.999,40,1.35,41,2.429,56,0.458,62,0.232,63,0.03,64,0.014,65,0.014,75,0.395,82,1.362,84,2.418,87,1.001,92,0.777,95,2.63,104,3.001,105,2.691,109,2.667,110,2.63,111,1.999,122,1.741,144,2.22,223,2.044,239,1.426,258,3.886,260,2.63,261,2.808,352,1.185,360,2.13,402,2.63,481,2.849,510,2.849,537,2.277,559,3.897,560,3.977,565,3.756,616,3.113,651,2.849,672,3.886,790,4.311,798,3.886,821,2.456,822,2.772,823,4.488,824,2.772,825,3.251,826,4.558,827,5.453,828,3.251,829,4.558,830,3.886,831,3.251,832,3.886,833,4.311,834,3.251,835,4.558,836,3.251,837,3.886,838,3.251,839,4.558,840,2.772,841,3.251,842,4.558,843,2.772]],["title/controllers/SessionController.html",[66,1.775,844,2.427]],["body/controllers/SessionController.html",[12,0.021,19,0.387,20,0.387,21,0.345,41,1.875,56,0.473,57,1.187,62,0.387,63,0.05,64,0.019,65,0.019,66,2.712,68,2.712,70,3.708,844,4.332,845,4.628,846,5.429]],["title/modules/SessionModule.html",[0,0.977,14,2.221]],["body/modules/SessionModule.html",[0,1.725,2,1.907,3,2.162,4,2.668,5,2.668,6,2.31,7,3.358,8,2.668,12,0.022,14,4.301,16,3.322,17,2.668,18,2.668,19,0.329,20,0.329,21,0.294,27,2.477,40,0.898,41,1.989,56,0.599,57,1.011,62,0.329,63,0.042,64,0.017,65,0.017,68,2.876,122,2.477,171,3.686,186,3.159,187,2.31,201,3.494,844,4.282,847,4.625,848,4.625,849,4.625,850,4.625,851,4.625,852,4.625]],["title/injectables/SessionService.html",[171,1.903,208,0.823]],["body/injectables/SessionService.html",[12,0.022,19,0.228,20,0.228,21,0.204,40,0.622,41,2.064,47,3.945,56,0.554,57,0.7,62,0.228,63,0.029,64,0.014,65,0.014,75,0.389,76,1.471,82,1.526,87,0.911,90,1.958,91,1.559,92,0.689,93,1.559,94,4.283,97,1.609,104,2.831,105,2.681,116,1.405,122,1.716,144,2.188,148,1.282,152,1.751,171,2.416,187,1.6,188,1.848,208,1.045,209,1.321,211,3.541,214,2.416,216,4.812,219,3.945,223,2.201,226,2.002,238,2.42,239,1.405,242,3.27,243,2.731,244,2.731,245,2.42,246,3.264,248,1.978,249,2.253,250,2.797,261,3.039,271,2.731,539,2.416,550,3.081,560,3.408,575,2.731,599,2.731,823,3.846,853,2.731,854,2.731,855,5.285,856,5.222,857,3.203,858,4.511,859,3.203,860,3.203,861,3.203,862,4.511,863,3.203,864,3.203,865,3.203,866,3.203,867,3.203,868,3.203,869,4.511,870,3.203,871,3.203,872,3.203,873,3.203,874,3.203,875,3.203]],["title/classes/UpdateUserDto.html",[63,0.033,876,2.221]],["body/classes/UpdateUserDto.html",[12,0.022,19,0.334,20,0.334,21,0.298,23,0.753,40,1.127,56,0.549,62,0.334,63,0.053,64,0.018,65,0.018,75,0.57,82,1.269,84,1.82,87,0.753,92,0.57,136,2.704,143,2.51,148,1.548,223,2.63,248,2.055,349,1.932,352,1.509,406,2.704,408,2.93,409,3.541,444,4.386,450,2.191,476,2.9,614,4.386,615,4.95,811,3.996,876,3.629,877,4.95,878,5.805,879,5.805,880,5.805,881,4.687,882,4.687,883,4.687]],["title/entities/User.html",[40,0.689,109,1.661]],["body/entities/User.html",[12,0.022,19,0.176,20,0.176,21,0.158,23,0.398,40,1.31,41,2.091,47,3.791,56,0.469,62,0.176,63,0.041,64,0.011,65,0.011,70,2.554,75,0.301,82,1.38,84,2.405,86,2.362,87,0.996,91,1.482,92,0.779,93,1.029,97,0.763,109,2.647,152,0.962,188,1.429,221,3.077,223,1.749,235,2.885,239,1.087,266,1.692,272,3.841,284,2.691,285,4.07,286,3.108,312,1.549,327,1.692,338,3.784,352,0.972,360,1.748,416,3.791,429,4.07,434,2.554,449,4.07,453,3.189,454,2.112,458,4.134,537,2.937,565,3.784,574,2.826,576,2.826,577,1.872,605,2.554,610,2.554,644,1.692,651,3.54,675,1.872,786,4.016,789,3.189,790,1.872,794,2.112,795,3.189,804,1.549,805,3.189,821,1.872,824,3.189,827,5.161,830,3.189,832,3.189,833,2.826,837,3.189,840,3.189,843,2.112,884,2.112,885,2.826,886,2.478,887,5.018,888,2.478,889,2.478,890,3.74,891,2.478,892,5.018,893,2.478,894,2.478,895,3.74,896,2.478,897,2.478,898,3.74,899,3.74,900,3.74,901,4.593,902,2.478,903,4.279,904,2.478,905,3.74,906,3.74,907,2.478,908,3.189,909,3.74,910,3.74,911,2.478,912,2.478,913,3.74,914,2.478,915,2.478,916,2.478,917,3.74,918,2.478,919,2.478,920,2.478,921,2.112,922,2.478,923,2.478,924,2.478,925,2.112,926,2.478,927,2.478,928,2.478]],["title/controllers/UsersController.html",[66,1.775,929,2.427]],["body/controllers/UsersController.html",[12,0.022,19,0.17,20,0.17,21,0.152,23,1.119,26,1.597,40,1.291,46,2.395,56,0.506,57,0.523,62,0.17,63,0.022,64,0.011,65,0.011,66,1.195,68,1.195,70,1.634,75,0.291,76,1.188,80,2.752,82,1.222,84,2.06,87,0.853,90,1.703,91,1.647,92,0.784,93,1.356,95,2.544,96,3.493,97,1.635,116,1.597,117,2.752,120,3.106,136,2.101,142,2.04,143,1.282,147,1.634,148,0.587,149,2.902,152,2.06,221,1.634,223,2.534,248,1.597,266,2.488,268,3.968,286,3.06,326,2.101,406,3.224,537,2.791,588,3.817,603,4.273,651,2.277,670,4.524,732,3.623,763,3.106,799,2.752,804,3.493,813,3.367,876,3.743,929,2.488,930,2.04,931,4.203,932,3.106,933,2.04,934,2.393,935,3.643,936,2.393,937,4.93,938,6.257,939,2.393,940,2.393,941,3.643,942,3.643,943,5.988,944,4.93,945,2.393,946,2.393,947,2.393,948,3.643,949,5.106,950,3.643,951,2.393,952,2.393,953,2.393,954,2.393,955,4.93,956,2.393,957,2.393,958,2.393,959,3.643,960,2.393,961,2.393,962,2.393,963,2.04,964,2.04,965,2.544,966,2.04,967,5.588,968,4.93,969,3.643,970,5.588,971,2.393,972,2.393,973,2.393,974,2.393,975,2.393,976,2.393,977,2.393,978,2.393,979,2.393,980,2.393,981,2.393,982,2.393,983,2.393,984,2.393,985,2.393,986,2.393]],["title/modules/UsersModule.html",[0,0.977,15,2.221]],["body/modules/UsersModule.html",[0,1.683,2,1.807,3,2.048,4,2.528,5,2.528,6,2.189,7,3.276,8,2.528,11,3.916,12,0.022,15,4.363,16,3.211,17,2.528,18,2.528,19,0.312,20,0.312,21,0.279,27,2.981,40,0.85,41,1.922,56,0.607,57,0.958,58,3.736,62,0.312,63,0.04,64,0.017,65,0.017,68,2.78,186,2.993,187,2.189,188,2.528,201,3.311,929,4.177,965,3.916,966,3.736,987,3.736,988,3.736,989,4.382,990,4.382,991,3.736,992,3.801,993,4.382,994,4.382]],["title/injectables/UsersService.html",[208,0.823,965,2.05]],["body/injectables/UsersService.html",[12,0.022,19,0.181,20,0.181,21,0.161,23,0.407,40,1.377,45,2.875,46,1.045,56,0.497,57,0.554,62,0.181,63,0.042,64,0.011,65,0.011,75,0.308,76,1.241,82,1.363,87,0.918,90,1.879,91,1.497,92,0.661,93,1.497,97,1.676,116,2.226,136,2.195,148,0.622,152,2.366,187,1.266,208,0.882,209,1.045,211,3.602,214,2.038,215,2.161,216,3.835,219,2.875,223,2.564,226,3.401,236,2.161,238,1.915,239,1.112,245,1.915,246,1.585,247,3.244,248,2.386,249,2.536,250,3.339,251,2.161,252,3.244,253,3.244,254,3.244,255,3.296,256,3.902,264,5.197,265,2.161,266,2.599,268,2.599,287,3.244,288,3.244,289,3.244,290,2.599,308,2.854,323,2.929,326,2.635,402,2.929,406,3.296,554,2.875,588,3.716,650,2.379,670,4.316,732,3.467,804,3.173,876,3.81,931,4.328,932,3.244,933,3.244,963,2.161,964,2.161,965,2.195,991,2.161,995,2.161,996,3.244,997,3.805,998,3.805,999,2.535,1000,2.535,1001,2.535,1002,3.805,1003,2.535,1004,3.805,1005,2.535,1006,3.805,1007,2.535,1008,2.535,1009,2.535,1010,2.535,1011,2.535,1012,2.535]],["title/classes/UsersSubscriber.html",[63,0.033,992,2.427]],["body/classes/UsersSubscriber.html",[12,0.022,19,0.27,20,0.27,21,0.241,40,1.23,56,0.496,62,0.27,63,0.035,64,0.015,65,0.015,75,0.46,76,1.65,87,0.978,90,1.968,91,1.568,92,0.693,93,1.568,97,1.756,109,2.663,122,2.027,148,1.242,152,1.469,168,3.326,206,3.162,211,3.493,214,2.71,239,1.66,246,3.162,249,2.846,250,2.71,277,4.313,349,1.56,764,3.227,854,3.227,855,5.561,992,3.455,1013,3.227,1014,5.698,1015,5.059,1016,5.059,1017,6.082,1018,3.785,1019,5.059,1020,6.082,1021,3.785,1022,6.082,1023,5.059,1024,6.082,1025,3.785,1026,3.785,1027,3.785,1028,5.059,1029,3.785,1030,3.785,1031,3.785,1032,3.785,1033,3.785,1034,3.785,1035,3.785,1036,3.785,1037,5.059]],["title/coverage.html",[1038,3.662]],["body/coverage.html",[6,1.38,12,0.022,21,0.176,40,0.787,41,0.954,63,0.059,64,0.012,65,0.012,66,2.401,67,1.887,69,2.356,83,1.727,92,0.336,105,1.139,109,1.896,113,1.727,116,1.212,123,1.38,125,2.088,127,1.727,129,2.088,137,1.727,140,1.887,168,1.38,169,1.727,170,1.727,171,1.48,192,1.887,195,1.887,208,1.503,210,2.356,230,1.727,242,1.594,259,1.887,304,2.356,350,2.356,351,2.356,353,2.34,372,2.088,405,1.594,406,1.594,407,2.356,408,3.31,415,4.966,451,2.771,462,2.183,463,1.887,465,3.065,466,3.065,509,2.356,525,2.088,541,2.088,542,2.356,543,2.356,554,2.088,590,2.356,603,1.887,604,2.356,610,1.887,620,2.356,621,3.065,653,2.088,666,2.356,667,2.356,680,2.356,729,2.356,739,2.356,753,1.887,754,2.356,759,2.356,760,2.356,767,1.887,785,2.356,786,1.887,787,2.356,788,2.356,813,1.887,814,2.356,817,2.088,822,2.356,844,1.887,845,2.356,853,2.356,876,1.727,877,2.356,884,2.356,929,1.887,930,2.356,965,1.594,992,1.887,995,2.356,1013,2.356,1038,2.088,1039,2.356,1040,2.763,1041,2.356,1042,6.978,1043,7.279,1044,7.083,1045,2.763,1046,2.763,1047,2.356,1048,3.458,1049,2.356,1050,2.356,1051,2.356,1052,4.056,1053,4.056,1054,6.093,1055,5.64,1056,3.458,1057,4.098,1058,3.458,1059,5.438,1060,4.515,1061,2.356,1062,2.356,1063,4.515,1064,2.356,1065,2.356,1066,2.763,1067,2.356,1068,2.356,1069,2.356,1070,2.763,1071,4.056,1072,4.056,1073,2.763,1074,2.763,1075,2.763,1076,2.763]],["title/dependencies.html",[3,1.997,1077,2.53]],["body/dependencies.html",[3,2.123,12,0.022,57,0.993,63,0.052,64,0.017,65,0.017,143,2.432,181,3.102,183,3.102,185,3.431,187,2.268,239,1.991,260,3.284,309,3.872,450,2.123,470,2.839,624,4.247,647,3.431,652,2.839,730,3.431,774,3.872,1078,4.541,1079,4.541,1080,6.217,1081,4.541,1082,4.541,1083,4.541,1084,3.872,1085,4.541,1086,4.541,1087,4.541,1088,4.541,1089,4.541,1090,4.541,1091,5.692,1092,4.541,1093,5.692,1094,4.541,1095,4.541,1096,4.541,1097,3.872,1098,4.541,1099,4.541,1100,4.541,1101,4.541,1102,4.541,1103,4.541,1104,4.541,1105,4.541,1106,4.541,1107,4.541]],["title/miscellaneous/enumerations.html",[1108,1.712,1109,3.643]],["body/miscellaneous/enumerations.html",[12,0.021,26,2.651,40,1.381,64,0.017,65,0.017,75,0.52,248,1.875,281,2.92,286,2.466,314,3.23,340,3.891,360,1.998,403,4.12,429,4.139,433,5.155,434,4.129,435,4.568,458,2.92,479,2.29,510,4.216,605,2.92,726,3.645,885,4.568,901,4.671,1108,2.466,1109,3.645,1110,4.671,1111,5.478,1112,5.478,1113,5.478,1114,4.275,1115,6.376,1116,4.275,1117,4.275,1118,4.275,1119,4.568,1120,5.478,1121,4.275,1122,4.275,1123,4.275,1124,3.645,1125,4.275,1126,4.275,1127,4.275,1128,4.275,1129,4.275,1130,4.275,1131,4.275,1132,4.275,1133,4.275,1134,4.275,1135,4.275,1136,4.275,1137,4.275,1138,4.275,1139,4.275]],["title/miscellaneous/functions.html",[1108,1.712,1140,3.643]],["body/miscellaneous/functions.html",[6,3.469,12,0.019,26,2.403,64,0.019,65,0.019,75,0.666,767,4.355,1069,4.672,1108,3.161,1140,4.672,1141,5.479,1142,5.479,1143,5.479,1144,5.479]],["title/index.html",[75,0.361,1145,2.968,1146,2.968]],["body/index.html",[12,0.022,36,4.129,64,0.018,65,0.018,410,4.835,460,4.475,504,3.659,506,3.659,1038,3.659,1119,3.659,1147,4.843,1148,7.046,1149,4.843,1150,5.933,1151,4.129,1152,4.843,1153,5.923,1154,4.843,1155,4.843,1156,4.843,1157,5.05,1158,4.843,1159,4.843,1160,4.843,1161,4.843,1162,4.843,1163,4.129,1164,4.129,1165,4.843,1166,4.843,1167,4.129]],["title/modules.html",[2,1.998]],["body/modules.html",[1,3.491,2,2.107,11,2.949,12,0.018,13,3.195,14,3.195,15,3.195,64,0.018,65,0.018,296,5.919,358,3.195,379,3.195,380,3.195,1168,6.942,1169,6.942,1170,7.183,1171,6.551,1172,6.551]],["title/overview.html",[1173,4.133]],["body/overview.html",[0,1.132,1,4.798,2,1.696,3,1.923,4,2.373,5,2.373,6,2.055,7,2.204,8,2.373,9,3.508,10,3.508,11,4.128,12,0.022,13,4.353,14,4.071,15,4.248,16,3.083,17,2.373,18,2.373,64,0.016,65,0.016,68,2.055,123,2.965,165,3.508,166,3.508,167,3.508,168,3.139,169,3.711,170,3.711,171,3.366,209,1.696,339,4.557,349,1.696,358,3.711,377,3.508,378,3.508,379,3.711,380,3.711,425,3.108,441,3.508,464,2.572,821,3.108,965,3.425,987,3.508,988,3.508,1173,3.508,1174,3.508,1175,3.508]],["title/properties.html",[352,1.111,1077,2.53]],["body/properties.html",[12,0.022,23,0.886,64,0.019,65,0.019,352,1.433,484,3.447,1119,4.166,1163,4.701,1164,4.701,1167,4.701,1176,5.514,1177,5.514]],["title/miscellaneous/variables.html",[534,3.228,1108,1.712]],["body/miscellaneous/variables.html",[3,0.474,12,0.022,26,1.054,29,2.472,35,2.284,38,0.543,39,1.641,40,1.141,44,0.692,45,0.766,46,1.823,53,0.766,54,0.864,63,0.027,64,0.005,65,0.007,66,1.2,68,0.506,74,0.585,75,0.123,76,0.784,82,1.311,86,1.602,87,0.466,91,1.359,92,0.561,93,0.492,96,1.119,97,0.551,104,2.208,105,2.272,108,0.864,110,2.423,111,2.33,116,0.445,125,1.815,127,2.284,129,2.19,152,2.103,226,1.812,248,1.054,249,1.825,255,1.672,261,0.474,273,2.496,274,1.812,279,0.692,281,0.692,282,0.634,284,1.653,290,0.692,307,0.864,308,1.972,311,4.093,312,1.502,313,1.553,326,2.663,327,0.692,329,1.352,332,3.935,334,1.526,335,2.472,338,3.748,340,3.769,352,0.95,353,2.108,360,0.474,363,3.637,364,1.526,366,1.352,367,0.585,370,3.732,371,1.032,372,1.352,385,2.496,394,1.526,402,2.108,403,1.502,404,2.19,405,2.108,410,1.352,414,1.526,415,2.19,416,0.766,425,0.766,426,0.864,432,2.048,438,0.864,449,1.352,450,1.708,451,2.26,458,1.222,460,1.815,469,2.952,473,1.352,474,1.772,476,0.506,477,0.766,479,0.543,481,1.119,484,2.885,488,1.526,489,0.634,492,0.864,495,1.526,498,0.766,503,1.222,504,0.766,506,1.815,511,1.352,514,1.526,515,0.864,517,0.864,518,2.472,520,0.766,525,1.352,529,0.864,530,0.864,534,1.352,537,2.468,538,1.526,539,1.287,555,1.526,557,2.048,559,0.692,565,0.634,582,0.864,598,0.766,600,0.864,605,0.692,606,0.766,607,2.496,608,1.502,610,0.692,616,0.692,619,0.766,626,0.766,639,2.472,642,0.864,644,0.692,645,0.864,646,1.815,647,0.766,648,0.766,650,0.634,651,2.069,653,1.815,656,0.864,664,1.526,669,0.864,675,1.815,691,0.864,692,0.864,698,2.5,699,0.864,702,0.864,703,0.864,710,1.526,715,2.472,717,2.821,721,1.352,731,0.864,735,0.864,745,1.815,767,3.269,768,0.864,779,1.526,780,1.526,791,0.864,792,2.048,799,0.766,817,2.19,820,0.864,833,0.766,885,1.352,903,0.864,908,2.472,921,0.864,925,0.864,949,3.77,996,0.864,1039,1.526,1041,1.526,1047,0.864,1048,0.864,1049,0.864,1050,1.526,1051,0.864,1056,0.864,1057,2.821,1058,3.582,1059,2.048,1060,2.821,1061,2.048,1062,2.048,1063,2.821,1064,2.048,1065,2.048,1067,0.864,1068,0.864,1084,2.472,1097,0.864,1108,0.585,1110,0.864,1124,1.526,1150,0.864,1151,1.526,1157,2.048,1174,1.526,1175,0.864,1178,1.014,1179,1.014,1180,4.421,1181,1.79,1182,1.79,1183,1.014,1184,1.014,1185,1.014,1186,1.014,1187,1.79,1188,1.014,1189,1.014,1190,1.014,1191,1.014,1192,1.014,1193,1.014,1194,1.79,1195,1.014,1196,2.403,1197,2.899,1198,1.79,1199,4.421,1200,1.79,1201,1.79,1202,1.79,1203,2.899,1204,1.014,1205,1.014,1206,1.014,1207,1.014,1208,1.79,1209,1.014,1210,1.014,1211,1.014,1212,1.014,1213,1.014,1214,1.014,1215,2.899,1216,1.014,1217,1.014,1218,1.014,1219,2.403,1220,2.403,1221,1.79,1222,1.014,1223,1.014,1224,1.014,1225,1.014,1226,1.014,1227,1.014,1228,1.014,1229,1.79,1230,1.014,1231,1.014,1232,1.014,1233,1.014,1234,1.014,1235,1.014,1236,1.014,1237,1.014,1238,1.014,1239,1.014,1240,1.79,1241,1.79,1242,1.014,1243,1.014,1244,3.947,1245,1.014,1246,1.014,1247,1.014,1248,1.014,1249,1.014,1250,1.014,1251,1.014,1252,1.014,1253,1.014,1254,1.014,1255,1.014,1256,1.014,1257,1.014,1258,1.014,1259,3.309,1260,2.403,1261,2.403,1262,1.014,1263,2.403,1264,1.014,1265,1.014,1266,1.79,1267,2.899,1268,1.79,1269,1.014,1270,1.014,1271,2.403,1272,1.014,1273,2.899,1274,1.014,1275,1.014,1276,1.014,1277,1.014,1278,1.014,1279,1.014,1280,2.403,1281,1.014,1282,2.403,1283,1.014,1284,1.014,1285,1.014,1286,1.014,1287,1.014,1288,1.014,1289,1.014,1290,1.014,1291,1.79,1292,1.79,1293,2.403,1294,4.421,1295,1.79,1296,1.79,1297,2.899,1298,1.014,1299,1.014,1300,2.403,1301,1.014,1302,1.79,1303,1.79,1304,1.79,1305,2.899,1306,1.014,1307,1.014,1308,1.014,1309,1.014,1310,1.014,1311,1.014,1312,1.014,1313,1.014,1314,1.79,1315,1.79,1316,1.014,1317,1.79,1318,1.79,1319,1.014,1320,1.014,1321,1.014,1322,1.014,1323,1.014,1324,1.014,1325,1.014,1326,1.014,1327,1.014,1328,1.014,1329,1.014,1330,1.014,1331,1.014,1332,1.014,1333,2.403,1334,1.014,1335,1.014,1336,1.014,1337,1.014,1338,1.014,1339,3.309,1340,1.014,1341,2.403,1342,1.79,1343,3.947,1344,1.014,1345,1.014,1346,1.79,1347,1.014,1348,2.403,1349,2.403,1350,1.014,1351,1.014,1352,1.014,1353,1.014,1354,3.309,1355,1.014,1356,1.014,1357,1.014,1358,1.014,1359,1.014,1360,1.79,1361,1.79,1362,1.014,1363,1.014,1364,1.014,1365,1.014,1366,1.014,1367,1.014,1368,1.014,1369,1.014,1370,1.014,1371,1.014,1372,1.014,1373,1.014,1374,4.94,1375,1.014,1376,1.79,1377,3.309,1378,1.79,1379,2.899,1380,3.309,1381,1.79,1382,2.899,1383,1.014,1384,1.79,1385,1.014,1386,1.79,1387,1.79,1388,1.79,1389,1.014,1390,1.014,1391,2.403,1392,1.79,1393,1.014,1394,3.309,1395,1.014,1396,1.014,1397,1.014,1398,1.79,1399,1.014,1400,1.014,1401,1.014,1402,1.014,1403,1.014,1404,1.79,1405,1.014,1406,1.014,1407,1.014,1408,1.014,1409,1.014,1410,1.014,1411,2.403,1412,1.014,1413,1.014,1414,1.014,1415,1.014,1416,1.014,1417,1.014,1418,1.014,1419,1.014,1420,1.014,1421,1.014,1422,1.014,1423,1.014,1424,1.79,1425,1.79,1426,1.79,1427,1.014,1428,1.014,1429,1.014,1430,1.014]],["title/routes.html",[74,2.796]],["body/routes.html",[12,0.02,64,0.02,65,0.02,74,3.306]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["0",{"_index":415,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1176,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1096,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1104,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1107,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1095,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1099,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1070,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1073,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1052,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1053,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1071,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1072,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1046,"title":{},"body":{"coverage.html":{}}}],["1.0",{"_index":522,"title":{},"body":{"interfaces/Device.html":{}}}],["1.0.0",{"_index":1100,"title":{},"body":{"dependencies.html":{}}}],["1.0.16",{"_index":1092,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1079,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1044,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":339,"title":{},"body":{"injectables/BcryptService.html":{},"overview.html":{}}}],["10.0.0",{"_index":1080,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1088,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1085,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1082,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1043,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":870,"title":{},"body":{"injectables/SessionService.html":{}}}],["127.0.0.1",{"_index":1266,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.13.3",{"_index":1098,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1174,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.5",{"_index":523,"title":{},"body":{"interfaces/Device.html":{}}}],["2/2",{"_index":1055,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":426,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":943,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{}}}],["24",{"_index":868,"title":{},"body":{"injectables/SessionService.html":{}}}],["3",{"_index":441,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.2.2",{"_index":1081,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1054,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":416,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":1175,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1093,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1066,"title":{},"body":{"coverage.html":{}}}],["5.0.2",{"_index":1090,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1094,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1045,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":890,"title":{},"body":{"entities/User.html":{}}}],["6/7",{"_index":1075,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":869,"title":{},"body":{"injectables/SessionService.html":{}}}],["7.4.0",{"_index":1087,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1106,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":425,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":1102,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":1074,"title":{},"body":{"coverage.html":{}}}],["9\\.]+)[\\);]/.exec(useragent)?.[1",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._]+)[\\);]/.exec(useragent)?.[1",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":424,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":591,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":403,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":630,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["accessing",{"_index":736,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["account",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":587,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["activate",{"_index":433,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["activate'})@isoptional()@isenum(userstatus",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["active",{"_index":1131,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["adapt",{"_index":501,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["add",{"_index":582,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["adding",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":473,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["adheres",{"_index":611,"title":{},"body":{"classes/IdDto.html":{}}}],["admin",{"_index":1115,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["administrative",{"_index":1116,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["affect",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.decorator",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["agent.decorator.ts",{"_index":1050,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aggregating",{"_index":384,"title":{},"body":{"modules/CoreModule.html":{}}}],["algorithm",{"_index":310,"title":{},"body":{"injectables/BcryptService.html":{}}}],["alias",{"_index":874,"title":{},"body":{"injectables/SessionService.html":{}}}],["allow",{"_index":661,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["allowed",{"_index":642,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["allowing",{"_index":479,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":312,"title":{},"body":{"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["alter",{"_index":581,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["always",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["android",{"_index":518,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["android/.test(useragent",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apioperation",{"_index":967,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":968,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":409,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({description",{"_index":413,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({enum",{"_index":430,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":969,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":970,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":974,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_pipe",{"_index":373,"title":{},"body":{"modules/CommonModule.html":{}}}],["applicable",{"_index":521,"title":{},"body":{"interfaces/Device.html":{}}}],["application",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"injectables/LocalStrategy.html":{},"entities/Session.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["application's",{"_index":387,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtStrategy.html":{}}}],["application'})@apiresponse({status",{"_index":942,"title":{},"body":{"controllers/UsersController.html":{}}}],["applies",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["applydecorators(defaultisboolean(validationoptions",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":393,"title":{},"body":{"modules/CoreModule.html":{}}}],["associated",{"_index":672,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Session.html":{}}}],["async",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["asynchronous",{"_index":1142,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":490,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["atom",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":1272,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":621,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":635,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:33",{"_index":640,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":705,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/config/jwt.config",{"_index":706,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":654,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/dto/login",{"_index":772,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["auth/hashing/hashing.service",{"_index":1027,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["authcontroller",{"_index":67,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticated",{"_index":733,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authenticating",{"_index":740,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authentication",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":623,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":631,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":738,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1119,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["authorization",{"_index":716,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":123,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice's",{"_index":750,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["automatic",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":792,"title":{},"body":{"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1172,"title":{},"body":{"modules.html":{}}}],["await",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["badrequestexception",{"_index":770,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["badrequestexception(errors",{"_index":784,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["balancer",{"_index":1278,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":644,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":1125,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":309,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":348,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.gensalt(roundssalt",{"_index":344,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.hash(data",{"_index":347,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcryptservice",{"_index":192,"title":{"injectables/BcryptService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"coverage.html":{}}}],["bearer",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":735,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["beforeinsert",{"_index":1015,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeinsert(event",{"_index":1019,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1016,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate(event",{"_index":1023,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["behind",{"_index":1276,"title":{},"body":{"miscellaneous/variables.html":{}}}],["being",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":496,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["between",{"_index":414,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":326,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["boolean'})@isoptional()@isboolean",{"_index":815,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator",{"_index":819,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator.ts",{"_index":1057,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["booleans",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1170,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1168,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":320,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["bug",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buildmessage",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["built",{"_index":468,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["business",{"_index":998,"title":{},"body":{"injectables/UsersService.html":{}}}],["call",{"_index":636,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["callback",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["called",{"_index":361,"title":{},"body":{"modules/CommonModule.html":{},"injectables/LocalStrategy.html":{}}}],["calling",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calls",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["canactivate",{"_index":632,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":638,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":906,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cases",{"_index":515,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["central",{"_index":382,"title":{},"body":{"modules/CoreModule.html":{}}}],["certain",{"_index":627,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["change",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["changelog",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changepassword",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":83,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["changes",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["character",{"_index":557,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["charter",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["charters",{"_index":417,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["checking",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":645,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":1222,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":63,"title":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":349,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{},"overview.html":{}}}],["client's",{"_index":1268,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":377,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":378,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":847,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":848,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_usersmodule",{"_index":987,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":989,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":988,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":827,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column(undefined",{"_index":896,"title":{},"body":{"entities/User.html":{}}}],["column({length",{"_index":889,"title":{},"body":{"entities/User.html":{}}}],["column({select",{"_index":893,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":824,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column({unique",{"_index":840,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["combines",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commas",{"_index":1289,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commit",{"_index":1229,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint.config.ts",{"_index":1041,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commitlint/config",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint/format",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":401,"title":{},"body":{"modules/CoreModule.html":{},"classes/RegistryDates.html":{}}}],["common/common.module",{"_index":397,"title":{},"body":{"modules/CoreModule.html":{}}}],["commonmodule",{"_index":358,"title":{"modules/CommonModule.html":{}},"body":{"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":317,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compare(data",{"_index":319,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compared",{"_index":1123,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["comparing",{"_index":306,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compodoc/compodoc",{"_index":1078,"title":{},"body":{"dependencies.html":{}}}],["concrete",{"_index":594,"title":{},"body":{"injectables/HashingService.html":{}}}],["config",{"_index":1232,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/database.config",{"_index":507,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/jwt.config",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":531,"title":{},"body":{"modules/EnvModule.html":{}}}],["configtype",{"_index":688,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":405,"title":{},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["conforms",{"_index":475,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["connect",{"_index":996,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":488,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["consecutive",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considered",{"_index":926,"title":{},"body":{"entities/User.html":{}}}],["console.log('user",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":563,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["constructor",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(authservice",{"_index":742,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(datasource",{"_index":854,"title":{},"body":{"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(jwtconfiguration",{"_index":687,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":633,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["consumer",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(loginvalidationmiddleware).forroutes('auth/login",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{}}}],["contain",{"_index":1282,"title":{},"body":{"miscellaneous/variables.html":{}}}],["containing",{"_index":691,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{}}}],["content",{"_index":1120,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["context",{"_index":366,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":660,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":658,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["continuous",{"_index":1239,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":66,"title":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('session",{"_index":846,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller('users",{"_index":973,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["conventional",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convert",{"_index":775,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["converted",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core/common/decorators/validators/is",{"_index":356,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["core/common/dto/id.dto",{"_index":971,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/remove.dto",{"_index":972,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/embedded/registry",{"_index":914,"title":{},"body":{"entities/User.html":{}}}],["core/common/enums/user",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["core/common/interfaces/custom",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["core/common/interfaces/device.interface",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["core/common/interfaces/jwt",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["core/core.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["correcting",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corresponding",{"_index":737,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["coverage",{"_index":1038,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cpu",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":975,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(userid",{"_index":858,"title":{},"body":{"injectables/SessionService.html":{}}}],["created",{"_index":799,"title":{},"body":{"classes/RegistryDates.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":574,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":796,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createparamdecorator",{"_index":1259,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":406,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creation",{"_index":793,"title":{},"body":{"classes/RegistryDates.html":{}}}],["credentials",{"_index":744,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["cryptographic",{"_index":596,"title":{},"body":{"injectables/HashingService.html":{}}}],["ctx",{"_index":1260,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1261,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1130,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currentpassword",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{}}}],["custom",{"_index":370,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["customizing",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customrequest",{"_index":463,"title":{"interfaces/CustomRequest.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["customuser",{"_index":242,"title":{"interfaces/CustomUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiparam({name",{"_index":960,"title":{},"body":{"controllers/UsersController.html":{}}}],["data_source_database",{"_index":1250,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_host",{"_index":1246,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_password",{"_index":1245,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_port",{"_index":1248,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_url",{"_index":1252,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_username",{"_index":1243,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":402,"title":{},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":398,"title":{},"body":{"modules/CoreModule.html":{}}}],["databaseconfig",{"_index":494,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":379,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":855,"title":{},"body":{"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["datasource.subscribers.push(this",{"_index":1029,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["date",{"_index":790,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["date().setmilliseconds(31",{"_index":867,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(new",{"_index":866,"title":{},"body":{"injectables/SessionService.html":{}}}],["dates",{"_index":795,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dates.embedded",{"_index":915,"title":{},"body":{"entities/User.html":{}}}],["dates.embedded.ts",{"_index":788,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["dates.embedded.ts:14",{"_index":797,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:21",{"_index":809,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:29",{"_index":803,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deactivate",{"_index":434,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":1132,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["debugging",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":618,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{}}}],["decoded",{"_index":700,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorator",{"_index":311,"title":{},"body":{"injectables/BcryptService.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/ipaddress.decorator",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/validators/is",{"_index":818,"title":{},"body":{"classes/RemoveDto.html":{}}}],["default",{"_index":338,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaults",{"_index":903,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":360,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["defines",{"_index":605,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":477,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"miscellaneous/variables.html":{}}}],["delegate",{"_index":693,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["delete",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":984,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({description",{"_index":953,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteat",{"_index":577,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deleted",{"_index":805,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deletedat",{"_index":900,"title":{},"body":{"entities/User.html":{}}}],["deletedatecolumn",{"_index":802,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deletion",{"_index":794,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dependency",{"_index":1234,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deps",{"_index":1233,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describing",{"_index":609,"title":{},"body":{"classes/IdDto.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"properties.html":{}}}],["details",{"_index":482,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["detection",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["determine",{"_index":925,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":641,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["development",{"_index":504,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device",{"_index":105,"title":{"interfaces/Device.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["disable",{"_index":1031,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["docs",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1039,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["doesn't",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["don't",{"_index":1223,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dots",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":545,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["down(queryrunner",{"_index":547,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["drop",{"_index":589,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["dto",{"_index":607,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["dto/change",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":963,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":964,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["due",{"_index":1137,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["during",{"_index":835,"title":{},"body":{"entities/Session.html":{}}}],["e.g",{"_index":503,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1158,"title":{},"body":{"index.html":{}}}],["each",{"_index":833,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["eachprefix",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easier",{"_index":500,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["easily",{"_index":394,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["embedded",{"_index":898,"title":{},"body":{"entities/User.html":{}}}],["enable",{"_index":532,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{}}}],["enableimplicitconversion",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encapsulating",{"_index":389,"title":{},"body":{"modules/CoreModule.html":{}}}],["encrypted",{"_index":321,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["encryption",{"_index":1253,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enforces",{"_index":617,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["enforcing",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":616,"title":{},"body":{"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["ensuring",{"_index":731,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":821,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/session.entity",{"_index":850,"title":{},"body":{"modules/SessionModule.html":{}}}],["entities/user.entity",{"_index":991,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":109,"title":{"entities/Session.html":{},"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["entitysubscriberinterface",{"_index":1014,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["entry",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["enum('activate",{"_index":569,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enum('admin",{"_index":571,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enumeration",{"_index":1129,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1109,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.constants",{"_index":526,"title":{},"body":{"modules/EnvModule.html":{}}}],["env/env.module",{"_index":399,"title":{},"body":{"modules/CoreModule.html":{}}}],["env_validation_schema",{"_index":525,"title":{},"body":{"modules/EnvModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":404,"title":{},"body":{"modules/CoreModule.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":502,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["envmodule",{"_index":380,"title":{"modules/EnvModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/EnvModule.html":{},"modules.html":{},"overview.html":{}}}],["error",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":769,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["errors.length",{"_index":783,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["eslint",{"_index":1030,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["eslint/no",{"_index":1034,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["essential",{"_index":400,"title":{},"body":{"modules/CoreModule.html":{}}}],["etc",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1022,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["eventsubscriber",{"_index":1028,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["example",{"_index":410,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exec(useragent)?.[2",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execution",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":639,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["expandvariables",{"_index":536,"title":{},"body":{"modules/EnvModule.html":{}}}],["expansion",{"_index":533,"title":{},"body":{"modules/EnvModule.html":{}}}],["expirationdate",{"_index":483,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["expire",{"_index":829,"title":{},"body":{"entities/Session.html":{}}}],["expired",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirydate",{"_index":560,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["export",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":470,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["expression",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extending",{"_index":467,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["extends",{"_index":476,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["external",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1287,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extracting",{"_index":712,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraction",{"_index":708,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":707,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":714,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":715,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failure",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":651,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["feat",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feature",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["fetch",{"_index":944,"title":{},"body":{"controllers/UsersController.html":{}}}],["field",{"_index":745,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":791,"title":{},"body":{"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["files",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":979,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":1002,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(undefined",{"_index":946,"title":{},"body":{"controllers/UsersController.html":{}}}],["first",{"_index":1286,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fix",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixes",{"_index":1236,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fk_e1dde0bd0402cc9b1967c40a1b3",{"_index":583,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["flexibility",{"_index":497,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{}}}],["following",{"_index":530,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":780,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":584,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["form",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["format",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["format'})@isstring()@isuuid",{"_index":612,"title":{},"body":{"classes/IdDto.html":{}}}],["formatter",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatting",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["forwarded",{"_index":1263,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":386,"title":{},"body":{"modules/CoreModule.html":{}}}],["full",{"_index":1118,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["function",{"_index":767,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functionalities",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["functionality",{"_index":388,"title":{},"body":{"modules/CoreModule.html":{},"injectables/HashingService.html":{},"classes/RegistryDates.html":{}}}],["functions",{"_index":1140,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generated",{"_index":346,"title":{},"body":{"injectables/BcryptService.html":{}}}],["generates",{"_index":832,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["generatetables1725986093329",{"_index":541,"title":{"classes/GenerateTables1725986093329.html":{}},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["get(':id",{"_index":978,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({description",{"_index":947,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({description",{"_index":940,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@user('id",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile(userid",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsalt",{"_index":343,"title":{},"body":{"injectables/BcryptService.html":{}}}],["getter",{"_index":924,"title":{},"body":{"entities/User.html":{}}}],["getting",{"_index":1145,"title":{"index.html":{}},"body":{}}],["given",{"_index":334,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":362,"title":{},"body":{"modules/CommonModule.html":{}}}],["graph",{"_index":1171,"title":{},"body":{"modules.html":{}}}],["guard",{"_index":622,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["guards/jwt",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/local",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":648,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["handling",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{}}}],["hash",{"_index":318,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hash(data",{"_index":330,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashed",{"_index":345,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashing",{"_index":305,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashing.service",{"_index":342,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt.service",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["hashing/hashing.service",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["hashingservice",{"_index":168,"title":{"injectables/HashingService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["header",{"_index":717,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":699,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":1292,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helping",{"_index":677,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["here",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":492,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":1271,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpcode",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@useguards(jwtauthguard)@post('change",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://minidocs.com",{"_index":1166,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":629,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":948,"title":{},"body":{"controllers/UsersController.html":{}}}],["iddto",{"_index":603,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["identification",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":610,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifies",{"_index":671,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["identify",{"_index":514,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["identifying",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immutability",{"_index":676,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["implementation",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implemented",{"_index":593,"title":{},"body":{"injectables/HashingService.html":{}}}],["implements",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["import",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["imported",{"_index":528,"title":{},"body":{"modules/EnvModule.html":{}}}],["importing",{"_index":383,"title":{},"body":{"modules/CoreModule.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["improvement",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["include",{"_index":421,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["includes",{"_index":471,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["including",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{}}}],["incoming",{"_index":698,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":75,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":820,"title":{},"body":{"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicating",{"_index":327,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["information",{"_index":481,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["initialize",{"_index":529,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1143,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":703,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["inject(jwtconfig.key",{"_index":709,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":208,"title":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":365,"title":{},"body":{"modules/CommonModule.html":{}}}],["injecting",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectrepository",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(session",{"_index":864,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(user",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["input",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["insertevent",{"_index":1020,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["installation",{"_index":1147,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1149,"title":{},"body":{"index.html":{}}}],["instance",{"_index":368,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["integrate",{"_index":685,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["integration",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["integrity",{"_index":679,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["intel|ppc",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":462,"title":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["interfaces",{"_index":464,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["invalid",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["invokes",{"_index":749,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["ios",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ip",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["ip.split(',')[0].replace",{"_index":1265,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipaddress",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iphone",{"_index":517,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["ips",{"_index":1284,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_password_key",{"_index":1061,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":653,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_username_key",{"_index":1064,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":817,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":927,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":758,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isstring",{"_index":755,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["ispassword",{"_index":353,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispassword(value",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispublic",{"_index":656,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":614,"title":{},"body":{"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isusername",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isusername(value",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuuid",{"_index":615,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["joi",{"_index":1097,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["joi.number().required",{"_index":1249,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1242,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1244,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":559,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt_secret_key",{"_index":1254,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":137,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconfiguration",{"_index":690,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.secret",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":713,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":230,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwts",{"_index":681,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":169,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["keeps",{"_index":1285,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":385,"title":{},"body":{"modules/CoreModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["last",{"_index":810,"title":{},"body":{"classes/RegistryDates.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["length(0",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":659,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["leverages",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1167,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":315,"title":{},"body":{"injectables/BcryptService.html":{}}}],["limited",{"_index":1121,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["line",{"_index":1032,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["linux",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linux/i.test(useragent",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":941,"title":{},"body":{"controllers/UsersController.html":{}}}],["listento",{"_index":1017,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["load",{"_index":1277,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":730,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":140,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":1290,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":170,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["login(user",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":776,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["loginuserdto",{"_index":753,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["loginvalidationmiddleware",{"_index":195,"title":{"injectables/LoginValidationMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["longer",{"_index":1133,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercase",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macos",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["mainly",{"_index":1126,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maintain",{"_index":678,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["maintained",{"_index":396,"title":{},"body":{"modules/CoreModule.html":{}}}],["making",{"_index":499,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["manage",{"_index":314,"title":{},"body":{"injectables/BcryptService.html":{},"classes/RegistryDates.html":{},"miscellaneous/enumerations.html":{}}}],["managed",{"_index":395,"title":{},"body":{"modules/CoreModule.html":{}}}],["management",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{}}}],["manages",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["mandatory",{"_index":512,"title":{},"body":{"interfaces/Device.html":{}}}],["many",{"_index":909,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":842,"title":{},"body":{"entities/Session.html":{}}}],["manytoone(undefined",{"_index":836,"title":{},"body":{"entities/Session.html":{}}}],["map",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mark",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":628,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{}}}],["matches",{"_index":329,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"miscellaneous/variables.html":{}}}],["matches(value",{"_index":1291,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["maximum",{"_index":913,"title":{},"body":{"entities/User.html":{}}}],["meaning",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1257,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":1241,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":647,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":323,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["methods",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":761,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["middlewareconsumer",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/login",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["migrationinterface",{"_index":544,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["miscellaneous",{"_index":1108,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1153,"title":{},"body":{"index.html":{}}}],["modified",{"_index":674,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{}}}],["modifier",{"_index":673,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["modify",{"_index":1224,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modular",{"_index":392,"title":{},"body":{"modules/CoreModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohamadreza",{"_index":1163,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mohmadreza",{"_index":418,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mosalli",{"_index":1164,"title":{},"body":{"index.html":{},"properties.html":{}}}],["multiple",{"_index":1283,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":880,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["needed",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs",{"_index":313,"title":{},"body":{"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["nestjs's",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1083,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":652,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1086,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":771,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nestmodule",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newpassword",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{}}}],["next",{"_index":764,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["nextfunction",{"_index":765,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["node_env",{"_index":1255,"title":{},"body":{"miscellaneous/variables.html":{}}}],["non",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":663,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["notfoundexception",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["now",{"_index":575,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionService.html":{}}}],["npm",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt/.test(useragent",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":555,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":837,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["number",{"_index":332,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["numbers,charters",{"_index":422,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["obj",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtain",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurs",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["one",{"_index":908,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":917,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":904,"title":{},"body":{"entities/User.html":{}}}],["operating",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":371,"title":{},"body":{"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["orchestrates",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["organizing",{"_index":390,"title":{},"body":{"modules/CoreModule.html":{}}}],["original",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["os",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["others",{"_index":493,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["otherwise",{"_index":650,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overrides",{"_index":684,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["overview",{"_index":1173,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":823,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{}}}],["ownerid",{"_index":562,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["owns",{"_index":839,"title":{},"body":{"entities/Session.html":{}}}],["package",{"_index":1077,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["parameter",{"_index":1267,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["parent",{"_index":637,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["parsed",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parserpreset",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parses",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partialtype",{"_index":883,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":878,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participating",{"_index":1128,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["passes",{"_index":649,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passing",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passport",{"_index":624,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":682,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy",{"_index":704,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":686,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["password.decorator",{"_index":357,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["password.decorator.ts",{"_index":1060,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":351,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:5",{"_index":354,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":355,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["passwordregex",{"_index":1062,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":307,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":962,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":981,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({description",{"_index":958,"title":{},"body":{"controllers/UsersController.html":{}}}],["pattern",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":667,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["perf",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performance",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performs",{"_index":1270,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1122,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1101,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":364,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":580,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["pk_f55da76ac1c3ac420f444d2ff11",{"_index":566,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["plain",{"_index":324,"title":{},"body":{"injectables/BcryptService.html":{}}}],["plaintoinstance",{"_index":773,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["plaintoinstance(loginuserdto",{"_index":777,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["point",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["populated",{"_index":800,"title":{},"body":{"classes/RegistryDates.html":{}}}],["port",{"_index":1247,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":431,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["possibly",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["post",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({description",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["preform",{"_index":997,"title":{},"body":{"injectables/UsersService.html":{}}}],["present",{"_index":1280,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1228,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarily",{"_index":1269,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":567,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["primarygeneratedcolumn",{"_index":843,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":830,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["private",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["privileges",{"_index":1117,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["proceed",{"_index":662,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["process",{"_index":664,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1264,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":506,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["project",{"_index":1231,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":550,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionService.html":{}}}],["promoting",{"_index":391,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/JwtPayload.html":{}}}],["properly",{"_index":1256,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":352,"title":{"properties.html":{}},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":474,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["propertydecorator",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protect",{"_index":625,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["provide",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{}}}],["provided",{"_index":489,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":592,"title":{},"body":{"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{}}}],["proxied",{"_index":1275,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public\".\"user_role_enum",{"_index":570,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public\".\"user_status_enum",{"_index":568,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public()@httpcode(httpstatus.ok)@useguards(localauthguard)@post('login",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":955,"title":{},"body":{"controllers/UsersController.html":{}}}],["queryrunner",{"_index":548,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["queryrunner.query",{"_index":553,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["raw",{"_index":599,"title":{},"body":{"injectables/HashingService.html":{},"injectables/SessionService.html":{}}}],["raw((alias",{"_index":873,"title":{},"body":{"injectables/SessionService.html":{}}}],["read",{"_index":619,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["reasons",{"_index":1139,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["record",{"_index":807,"title":{},"body":{"classes/RegistryDates.html":{}}}],["recover",{"_index":923,"title":{},"body":{"entities/User.html":{}}}],["recovered",{"_index":922,"title":{},"body":{"entities/User.html":{}}}],["refactor",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1238,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":585,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["reflect",{"_index":1103,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":634,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["regex",{"_index":1293,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":113,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registry",{"_index":899,"title":{},"body":{"entities/User.html":{}}}],["registrydates",{"_index":786,"title":{"classes/RegistryDates.html":{}},"body":{"classes/RegistryDates.html":{},"entities/User.html":{},"coverage.html":{}}}],["regular",{"_index":1124,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rejects",{"_index":781,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["related",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["relation",{"_index":910,"title":{},"body":{"entities/User.html":{}}}],["relations",{"_index":875,"title":{},"body":{"injectables/SessionService.html":{}}}],["release",{"_index":1240,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relevant",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["remove",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":985,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":1004,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":952,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":921,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["removedto",{"_index":813,"title":{"classes/RemoveDto.html":{}},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["removing",{"_index":806,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{}}}],["replace",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/_/g",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["report",{"_index":516,"title":{},"body":{"interfaces/Device.html":{}}}],["repository",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":478,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["representation",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["representing",{"_index":789,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["represents",{"_index":510,"title":{},"body":{"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["req",{"_index":697,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["req.body",{"_index":778,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["req.headers?.authorization.replace('bearer",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":469,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['x",{"_index":1262,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.interface",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["request.interface.ts",{"_index":466,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["request.user",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requested",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":768,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":626,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":949,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["requirements",{"_index":1258,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requires",{"_index":595,"title":{},"body":{"injectables/HashingService.html":{}}}],["res",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":601,"title":{},"body":{"injectables/HashingService.html":{}}}],["resources",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalAuthGuard.html":{},"classes/RemoveDto.html":{}}}],["respective",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":763,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["responsible",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/BcryptService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{}}}],["results",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["retrieve",{"_index":710,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returning",{"_index":600,"title":{},"body":{"injectables/HashingService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["revert",{"_index":1226,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reverts",{"_index":1227,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reviewing",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["role",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{}}}],["role.enum",{"_index":916,"title":{},"body":{"entities/User.html":{}}}],["role.enum.ts",{"_index":1111,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1114,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":337,"title":{},"body":{"injectables/BcryptService.html":{}}}],["roundssalt",{"_index":331,"title":{},"body":{"injectables/BcryptService.html":{}}}],["route",{"_index":646,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":74,"title":{"routes.html":{}},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{},"routes.html":{}}}],["rule",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rules",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1150,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1279,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1105,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":336,"title":{},"body":{"injectables/BcryptService.html":{}}}],["save",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["schema",{"_index":538,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":1230,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scopes",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scripts",{"_index":1221,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":692,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":895,"title":{},"body":{"entities/User.html":{}}}],["see",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["selected",{"_index":892,"title":{},"body":{"entities/User.html":{}}}],["send",{"_index":959,"title":{},"body":{"controllers/UsersController.html":{}}}],["serves",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["service",{"_index":316,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtStrategy.html":{}}}],["services",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["session",{"_index":41,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["session.controller",{"_index":851,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.owner",{"_index":905,"title":{},"body":{"entities/User.html":{}}}],["session.service",{"_index":852,"title":{},"body":{"modules/SessionModule.html":{}}}],["session/entities/session.entity",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["session/session.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["session/session.service",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessioncontroller",{"_index":844,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionmodule",{"_index":14,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":856,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionService.html":{},"entities/User.html":{}}}],["sessions(undefined",{"_index":860,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":171,"title":{"injectables/SessionService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":675,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setting",{"_index":486,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["settings",{"_index":498,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":495,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["several",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["shared",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":670,"title":{},"body":{"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["soft",{"_index":804,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["softly",{"_index":920,"title":{},"body":{"entities/User.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["space",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1288,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spacial",{"_index":423,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["special",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["specific",{"_index":511,"title":{},"body":{"interfaces/Device.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":335,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["specifies",{"_index":520,"title":{},"body":{"interfaces/Device.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["specify",{"_index":527,"title":{},"body":{"modules/EnvModule.html":{}}}],["splits",{"_index":1281,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src",{"_index":1225,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.constants.ts",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.constants.ts",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipaddress.decorator.ts",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1141,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../to",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1110,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:53",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:43",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:115",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/ipaddress.decorator.ts",{"_index":1047,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1048,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user",{"_index":1049,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":1051,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/change",{"_index":350,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":754,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":785,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":620,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":729,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/hashing/bcrypt.service.ts",{"_index":304,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/auth/hashing/bcrypt.service.ts:17",{"_index":333,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/auth/hashing/bcrypt.service.ts:32",{"_index":322,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/auth/hashing/hashing.service.ts",{"_index":590,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/auth/hashing/hashing.service.ts:16",{"_index":602,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/auth/hashing/hashing.service.ts:26",{"_index":597,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/auth/middlewares/login",{"_index":759,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":680,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":689,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":695,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":739,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":743,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:30",{"_index":747,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/common/common.module.ts",{"_index":359,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/decorators/transforms/to",{"_index":1056,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/decorators/validators/is",{"_index":1059,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/dto/id.dto.ts",{"_index":604,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/core/common/dto/id.dto.ts:23",{"_index":613,"title":{},"body":{"classes/IdDto.html":{}}}],["src/core/common/dto/remove.dto.ts",{"_index":814,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{}}}],["src/core/common/dto/remove.dto.ts:23",{"_index":816,"title":{},"body":{"classes/RemoveDto.html":{}}}],["src/core/common/embedded/registry",{"_index":787,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["src/core/common/enums/user",{"_index":1113,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/common/interfaces/custom",{"_index":465,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/core/common/interfaces/device.interface.ts",{"_index":509,"title":{},"body":{"interfaces/Device.html":{},"coverage.html":{}}}],["src/core/common/interfaces/jwt",{"_index":666,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/core/common/util/common.constants.ts",{"_index":1067,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":381,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/database/database.module.ts",{"_index":485,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/migrations/1725986093329",{"_index":542,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["src/core/env/env.constants.ts",{"_index":1068,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/env/env.module.ts",{"_index":524,"title":{},"body":{"modules/EnvModule.html":{}}}],["src/main.ts",{"_index":1069,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/entities/session.entity.ts",{"_index":822,"title":{},"body":{"entities/Session.html":{},"coverage.html":{}}}],["src/session/entities/session.entity.ts:14",{"_index":831,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:20",{"_index":841,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:26",{"_index":825,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:32",{"_index":834,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:38",{"_index":828,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:47",{"_index":838,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":845,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.module.ts",{"_index":849,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":853,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:10",{"_index":857,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":859,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:33",{"_index":863,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:47",{"_index":861,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/users/dto/create",{"_index":407,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":877,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":884,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":888,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":891,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":886,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":912,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":894,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":911,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":902,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":897,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:69",{"_index":907,"title":{},"body":{"entities/User.html":{}}}],["src/users/subscribers/users.subscriber.ts",{"_index":1013,"title":{},"body":{"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["src/users/subscribers/users.subscriber.ts:12",{"_index":1018,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:20",{"_index":1026,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:26",{"_index":1021,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:31",{"_index":1025,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/users.controller.ts",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":956,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:37",{"_index":939,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":945,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":951,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:85",{"_index":961,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":990,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":995,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":999,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":1000,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":1001,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1003,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":1007,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:82",{"_index":1005,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":472,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["start",{"_index":1151,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1154,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1155,"title":{},"body":{"index.html":{}}}],["started",{"_index":1146,"title":{"index.html":{}},"body":{}}],["starts",{"_index":1144,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statement",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1040,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["status.enum",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["status.enum.ts",{"_index":1112,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1161,"title":{},"body":{"index.html":{}}}],["stored",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["stores",{"_index":826,"title":{},"body":{"entities/Session.html":{}}}],["strategies/jwt.strategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":683,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["strength",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stringhash",{"_index":341,"title":{},"body":{"injectables/BcryptService.html":{}}}],["stripped",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":668,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["structured",{"_index":480,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["style",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style/formatting",{"_index":1237,"title":{},"body":{"miscellaneous/variables.html":{}}}],["submits",{"_index":748,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["subscribers/users.subscriber",{"_index":993,"title":{},"body":{"modules/UsersModule.html":{}}}],["successful",{"_index":701,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["successfully",{"_index":938,"title":{},"body":{"controllers/UsersController.html":{}}}],["such",{"_index":491,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["super",{"_index":655,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":665,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["suspend",{"_index":435,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"miscellaneous/enumerations.html":{}}}],["suspended",{"_index":1136,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["svg",{"_index":1169,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":885,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":554,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tables.ts",{"_index":543,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["tables.ts:4",{"_index":546,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:48",{"_index":549,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:6",{"_index":552,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1076,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":519,"title":{},"body":{"interfaces/Device.html":{}}}],["takes",{"_index":598,"title":{},"body":{"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["temporarily",{"_index":1135,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["test",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test'})@isoptional()@length(0",{"_index":419,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test:covsupport",{"_index":1160,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1159,"title":{},"body":{"index.html":{}}}],["test@1234",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@1234'})@ispassword",{"_index":427,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com'})@isemail",{"_index":411,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122'})@isusername",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["testing",{"_index":505,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tests",{"_index":1157,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":325,"title":{},"body":{"injectables/BcryptService.html":{}}}],["thats",{"_index":879,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["this.authservice.changepassword(userid",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getprofile(userid",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwt",{"_index":727,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatelocal(email",{"_index":752,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.datasource.getrepository(session).findone",{"_index":872,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.findone(id",{"_index":1010,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.compare(password",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.hash(user.password",{"_index":1037,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.jwtservice.sign(payload",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":657,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registrydates.deleteat",{"_index":928,"title":{},"body":{"entities/User.html":{}}}],["this.sessionrepository.create",{"_index":865,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":871,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.create(user.id",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.validate(user.id",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1008,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["this.userrepository.findoneby",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.preload",{"_index":1009,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":1012,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.softremove(user",{"_index":1011,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":976,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":977,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":980,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":986,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":983,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":643,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["throw",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":702,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":798,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{}}}],["timestamp",{"_index":561,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["toboolean",{"_index":1058,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(obj[key",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["touch",{"_index":1162,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":606,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":774,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":537,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["two",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(databaseconfig.asprovider",{"_index":508,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1084,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1089,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1091,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1033,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["typically",{"_index":1274,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["unchanged",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Device.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["underscores",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unexpected",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":565,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["uniquely",{"_index":513,"title":{},"body":{"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}}}],["unit",{"_index":1156,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1177,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":1035,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["up",{"_index":487,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{}}}],["up(queryrunner",{"_index":551,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["update",{"_index":588,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":982,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":1006,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(undefined",{"_index":957,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":811,"title":{},"body":{"classes/RegistryDates.html":{},"classes/UpdateUserDto.html":{}}}],["updated'})@isstring()@isuuid",{"_index":881,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updatedat",{"_index":576,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":808,"title":{},"body":{"classes/RegistryDates.html":{}}}],["updateevent",{"_index":1024,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["updates",{"_index":1235,"title":{},"body":{"miscellaneous/variables.html":{}}}],["updateuserdto",{"_index":876,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upon",{"_index":801,"title":{},"body":{"classes/RegistryDates.html":{}}}],["uppercase",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uq_232f8e85d7633bd6ddfad421696",{"_index":564,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":579,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":578,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["url",{"_index":1251,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":367,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["use(req",{"_index":762,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["useclass",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{}}}],["used",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":586,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["user's",{"_index":887,"title":{},"body":{"entities/User.html":{}}}],["user'})@apiresponse({status",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{}}}],["user('id",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":408,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":757,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:11",{"_index":882,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:13",{"_index":412,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:21",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":428,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":420,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":756,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["user.password",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersSubscriber.html":{}}}],["user.status",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.status.tolowercase",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useragent",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userconfig",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["username",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["username.decorator",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["username.decorator.ts",{"_index":1063,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":751,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernameregex",{"_index":1065,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernames",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":901,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":919,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":732,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":994,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":966,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["users/users.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":929,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":965,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":992,"title":{"classes/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["userstatus",{"_index":429,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.activate",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstatus.deactivate",{"_index":918,"title":{},"body":{"entities/User.html":{}}}],["uses",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":375,"title":{},"body":{"modules/CommonModule.html":{}}}],["using",{"_index":308,"title":{},"body":{"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["util/common.constants",{"_index":374,"title":{},"body":{"modules/CommonModule.html":{}}}],["utility",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizes",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uuid",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"controllers/UsersController.html":{}}}],["uuid'})@apiquery({name",{"_index":954,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid'})@apiresponse({status",{"_index":950,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid_generate_v4",{"_index":556,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["valid",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":539,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["validate(email",{"_index":746,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(logindto",{"_index":782,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validate(req",{"_index":694,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userid",{"_index":862,"title":{},"body":{"injectables/SessionService.html":{}}}],["validateby",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatejwt",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(undefined",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validatelocal(email",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["validating",{"_index":608,"title":{},"body":{"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":363,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validation.middleware",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["validation.middleware.ts",{"_index":760,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["validation.middleware.ts:23",{"_index":766,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validation_pipe_options",{"_index":372,"title":{},"body":{"modules/CommonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":369,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipe(validation_pipe_options",{"_index":376,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipeoptions",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":540,"title":{},"body":{"modules/EnvModule.html":{}}}],["validator",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":340,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":432,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["var_name",{"_index":535,"title":{},"body":{"modules/EnvModule.html":{}}}],["variable",{"_index":1042,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":534,"title":{"miscellaneous/variables.html":{}},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["vars",{"_index":1036,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["varying",{"_index":558,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(30",{"_index":573,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(50",{"_index":572,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["verification",{"_index":696,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":484,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":734,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["viewing",{"_index":1127,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violations",{"_index":1138,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["w][\\w.]{3,30",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1152,"title":{},"body":{"index.html":{}}}],["way",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":669,"title":{},"body":{"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":1165,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":812,"title":{},"body":{"classes/RegistryDates.html":{}}}],["whether",{"_index":328,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["white",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitelist",{"_index":779,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["whitelisted",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whose",{"_index":1134,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["windows",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":741,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["without",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{}}}],["word",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1273,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x/.test(useragent",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x11/i.test(useragent",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":1148,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[@$!%*?&])[a",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AppModule serves as the root module for the application.\nIt imports several feature modules, including:\n\nCoreModule: Contains shared resources and services used across the app.\nAuthModule: Manages authentication logic and user session management.\nUsersModule: Handles user-related operations and data management.\nSessionModule: Manages user sessions and related functionalities.\n\nThis module is the main entry point for the application and orchestrates\nthe integration of various features.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { SessionModule } from './session/session.module';\nimport { CoreModule } from './core/core.module';\n\n/**\n * AppModule serves as the root module for the application.\n * It imports several feature modules, including:\n * - CoreModule: Contains shared resources and services used across the app.\n * - AuthModule: Manages authentication logic and user session management.\n * - UsersModule: Handles user-related operations and data management.\n * - SessionModule: Manages user sessions and related functionalities.\n *\n * This module is the main entry point for the application and orchestrates\n * the integration of various features.\n */\n@Module({\n  imports: [CoreModule, AuthModule, UsersModule, SessionModule]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController is responsible for handling authentication-related routes in the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@UseGuards(JwtAuthGuard)@Post('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Change user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Get the user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserEntity, ip: string, device: Device)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Login an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User entity\n\n                                            \n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IP address\n\n                                            \n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Device is object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards\n} from '@nestjs/common';\nimport { User as UserEntity } from 'users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { IpAddress } from './decorators/ipAddress.decorator';\nimport { Public } from './decorators/public.decorator';\nimport { UserAgent } from './decorators/user-agent.decorator';\nimport { User } from './decorators/user.decorator';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Device } from 'core/common/interfaces/device.interface';\n\n/**\n * AuthController is responsible for handling authentication-related routes in the application\n */\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Register a new user\n   * @param registerUserDto\n   * @returns User entity\n   */\n  @Public()\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  /**\n   * Login an existing user\n   * @param user User entity\n   * @param ip IP address\n   * @param device Device is object\n   * @returns\n   */\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  login(\n    @User() user: UserEntity,\n    @IpAddress() ip: string,\n    @UserAgent() device: Device\n  ) {\n    return this.authService.login(user, ip, device);\n  }\n\n  /**\n   * Get the user profile\n   * @param userId UserID is string and UUID format\n   * @returns\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@User('id') userId: string) {\n    return this.authService.getProfile(userId);\n  }\n\n  /**\n   * Change user password\n   * @param userId UserID is string and UUID format\n   * @param changePasswordDto\n   * @returns\n   */\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  changePassword(\n    @User('id') userId: string,\n    @Body() changePasswordDto: ChangePasswordDto\n  ) {\n    return this.authService.changePassword(userId, changePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nHashingService \n\nHashingService \n\n\n\nAuthModule\n\nAuthModule\n\nHashingService  -->\n\nAuthModule->HashingService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nAuthModule -->\n\nSessionService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from '../session/entities/session.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './config/jwt.config';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { BcryptService } from './hashing/bcrypt.service';\nimport { HashingService } from './hashing/hashing.service';\nimport { LoginValidationMiddleware } from './middlewares/login-validation.middleware';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { SessionService } from 'session/session.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Session]),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig)\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingService,\n      useClass: BcryptService\n    },\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard\n    },\n    SessionService\n  ],\n  exports: [HashingService]\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoginValidationMiddleware).forRoutes('auth/login');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                            \n                                    Async\n                                validateLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingService: HashingService, sessionService: SessionService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, undefined: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(undefined: JwtPayload, jwtToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwtToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocal(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { SessionService } from 'session/session.service';\nimport { Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { HashingService } from './hashing/hashing.service';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly hashingService: HashingService,\n    private readonly sessionService: SessionService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  async register(registerUserDto: RegisterUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...registerUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async login(user: User, ip: string, device: Device) {\n    const payload = { id: user.id };\n    // generate jwt token\n    const token = this.jwtService.sign(payload);\n\n    // create new session\n    await this.sessionService.create(user.id, token, ip, device);\n\n    // return user data and jwt token\n    return {\n      ...user,\n      token: this.jwtService.sign(payload)\n    };\n  }\n\n  async getProfile(id: string) {\n    // Find user\n    const user = await this.userRepository.findOneBy({ id });\n\n    // Remove id form user object and return it\n    delete user.id;\n    return user;\n  }\n\n  async changePassword(\n    id: string,\n    { currentPassword, newPassword }: ChangePasswordDto\n  ) {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['password']\n    });\n\n    // Check valid password\n    const isMatch = await this.hashingService.compare(\n      currentPassword,\n      user.password\n    );\n\n    // If invalid password, handle it\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // If the new password is different from the current password\n    if (currentPassword !== newPassword)\n      await this.userRepository.update({ id }, { password: newPassword });\n  }\n\n  async validateLocal(email: string, password: string) {\n    // Find user with email or username\n    const user = await this.userRepository.findOne({\n      where: [{ email }, { username: email }],\n      select: ['id', 'role', 'status', 'password']\n    });\n\n    // If doesn't exists, handle it\n    if (!user) throw new NotFoundException('User not found');\n\n    // Check user status\n    // if (user.status !== UserStatus.ACTIVATE)\n    //   throw new UnauthorizedException(\n    //     `Your account is ${user.status.toLowerCase()} see support for reviewing your account`\n    //   );\n\n    // Check valid password\n    const isMatch = await this.hashingService.compare(password, user.password);\n\n    // If invalid password, handle it\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // Return user without password\n    delete user.password;\n    return user;\n  }\n\n  async validateJwt({ id }: JwtPayload, jwtToken: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, handle it\n    if (!user) throw new UnauthorizedException();\n\n    // Checking that the session has not expired\n    const session = await this.sessionService.validate(user.id, jwtToken);\n\n    // If it had expired, handle it\n    if (!session) throw new UnauthorizedException();\n\n    // return userId and session\n    const res: CustomUser = { id, session };\n\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/hashing/bcrypt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\nThe Injectable decorator allows NestJS to manage the lifecycle of the service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/bcrypt.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Method to compare a plain text data with an encrypted hash.\nReturns a boolean indicating whether the data matches the encrypted hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer, roundsSalt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/bcrypt.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                roundsSalt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                stringHash\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingService } from './hashing.service';\n\n/**\n * BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\n * The Injectable decorator allows NestJS to manage the lifecycle of the service.\n */\n@Injectable()\nexport class BcryptService implements HashingService {\n  /**\n   * Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n   * @param data\n   * @param roundsSalt\n   * @returns stringHash\n   */\n  async hash(data: string | Buffer, roundsSalt: number = 10) {\n    // Generate a salt with the specified number of rounds.\n    const getSalt = await bcrypt.genSalt(roundsSalt);\n\n    // Return the hashed data using the generated salt.\n    return bcrypt.hash(data, getSalt);\n  }\n\n  /**\n   * Method to compare a plain text data with an encrypted hash.\n   * Returns a boolean indicating whether the data matches the encrypted hash.\n   * @param data\n   * @param encrypted\n   * @returns boolean\n   */\n  compare(data: string | Buffer, encrypted: string) {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPassword\n                            \n                            \n                                    \n                                    Readonly\n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class ChangePasswordDto {\n  @IsPassword()\n  readonly currentPassword: string;\n\n  @IsPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a module called CommonModule\nProvide a global validation pipe for the application, which is injected into the NestJS application context\nUse a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { VALIDATION_PIPE_OPTIONS } from './util/common.constants';\n\n/**\n * Define a module called CommonModule\n * Provide a global validation pipe for the application, which is injected into the NestJS application context\n * Use a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n */\n@Module({\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe(VALIDATION_PIPE_OPTIONS)\n    }\n  ]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The CoreModule is a central module for the application,\nresponsible for importing and aggregating other key modules.\nIt serves as a foundation for the application's functionality\nby encapsulating and organizing related modules, promoting\na modular architecture where features can be easily managed and maintained.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EnvModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModule } from './common/common.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EnvModule } from './env/env.module';\n\n/**\n * The CoreModule is a central module for the application,\n * responsible for importing and aggregating other key modules.\n * It serves as a foundation for the application's functionality\n * by encapsulating and organizing related modules, promoting\n * a modular architecture where features can be easily managed and maintained.\n */\n@Module({\n  // Importing essential modules that provide common functionalities,\n  // database access, and environment configuration.\n  imports: [CommonModule, DatabaseModule, EnvModule]\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get valid email address', example: 'test@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name between 0 and 30 charters', example: 'mohmadreza test'})@IsOptional()@Length(0, 30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password include numbers,charters, spacial charters like: @#$%^!&*(_+)= & between 8 and 20 charters', example: 'test@1234'})@IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserStatus, description: 'Possible values is: 'ACTIVATE', 'DEACTIVATE' & 'SUSPEND'', example: 'ACTIVATE'})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username lowercase charters, numbers & spacial charter just _ & between 3 and 30 charters', example: 'test_122'})@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsOptional, Length } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'Get valid email address',\n    example: 'test@gmail.com'\n  })\n  @IsEmail()\n  readonly email: string;\n\n  @ApiProperty({\n    description:\n      'Username lowercase charters, numbers & spacial charter just _ & between 3 and 30 charters',\n    example: 'test_122'\n  })\n  @IsUsername()\n  readonly username: string;\n\n  @ApiProperty({\n    description:\n      'Password include numbers,charters, spacial charters like: @#$%^!&*(_+)= & between 8 and 20 charters',\n    example: 'test@1234'\n  })\n  @IsPassword()\n  readonly password: string;\n\n  @ApiPropertyOptional({\n    enum: UserStatus,\n    description: \"Possible values is: 'ACTIVATE', 'DEACTIVATE' & 'SUSPEND'\",\n    example: 'ACTIVATE'\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  readonly status: UserStatus;\n\n  @ApiPropertyOptional({\n    description: 'Name between 0 and 30 charters',\n    example: 'mohmadreza test'\n  })\n  @IsOptional()\n  @Length(0, 30)\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extending the built-in Request type from Express to create a CustomRequest interface.\nThis interface includes all properties of the standard Request object,\nwith an additional 'user' property that conforms to the CustomUser interface.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         CustomUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomUser\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The User object is id and session of current user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining a CustomUser interface to represent a user object.\nThis interface includes a user ID and a session object,\nallowing for structured user information with session details.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            session\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of current user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Session object of current user like token, expirationDate, device and IP address\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            DatabaseModule is a NestJS module responsible for setting up\nthe database connection using TypeORM.\nIt imports the TypeOrmModule with a configuration provided\nasynchronously. The configuration options, such as the database\ntype, host, username, password, and others, are defined in\nthe databaseConfig module.\nThis setup allows for better flexibility and management of\ndatabase connection settings, making it easier to adapt to\ndifferent environments (e.g., development, testing, production).\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database.config';\n\n/**\n * DatabaseModule is a NestJS module responsible for setting up\n * the database connection using TypeORM.\n *\n * It imports the TypeOrmModule with a configuration provided\n * asynchronously. The configuration options, such as the database\n * type, host, username, password, and others, are defined in\n * the databaseConfig module.\n *\n * This setup allows for better flexibility and management of\n * database connection settings, making it easier to adapt to\n * different environments (e.g., development, testing, production).\n */\n@Module({\n  imports: [TypeOrmModule.forRootAsync(databaseConfig.asProvider())]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Device.html":{"url":"interfaces/Device.html","title":"interface - Device","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Device\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/device.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a device with a specific name and an optional version.\nThe name property is mandatory and should uniquely identify the device,\nwhile the version property is optional, allowing for flexibility in cases\nwhere the device may not have a specific version to report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the device (e.g., \"iPhone\", \"Android Tablet\")\na string that specifies the name of the device\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Device {\n  /**\n   * The name of the device (e.g., \"iPhone\", \"Android Tablet\")\n   * a string that specifies the name of the device\n   */\n  readonly name: string;\n\n  /**\n   * The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n   */\n  readonly version?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnvModule.html":{"url":"modules/EnvModule.html","title":"module - EnvModule","body":"\n                   \n\n\n\n\n    Modules\n    EnvModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/env/env.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a new module using the Module decorator\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ENV_VALIDATION_SCHEMA } from './env.constants';\n\n/**\n * Define a new module using the Module decorator\n */\n@Module({\n  imports: [\n    /**\n     * Specify the modules to be imported into this module\n     * Initialize the ConfigModule with the following configuration options\n     */\n    ConfigModule.forRoot({\n      // Enable the expansion of environment variables (e.g., using ${VAR_NAME})\n      expandVariables: true,\n\n      // Use a validation schema to validate environment variables\n      validationSchema: ENV_VALIDATION_SCHEMA\n    })\n  ]\n})\nexport class EnvModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTables1725986093329.html":{"url":"classes/GenerateTables1725986093329.html","title":"class - GenerateTables1725986093329","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTables1725986093329\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1725986093329-generate-tables.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GenerateTables1725986093329'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1725986093329-generate-tables.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class GenerateTables1725986093329 implements MigrationInterface {\n    name = 'GenerateTables1725986093329'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TABLE \"session\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"token\" character varying NOT NULL,\n                \"device\" json NOT NULL,\n                \"ip\" character varying NOT NULL,\n                \"expiryDate\" TIMESTAMP NOT NULL,\n                \"ownerId\" uuid NOT NULL,\n                CONSTRAINT \"UQ_232f8e85d7633bd6ddfad421696\" UNIQUE (\"token\"),\n                CONSTRAINT \"PK_f55da76ac1c3ac420f444d2ff11\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_status_enum\" AS ENUM('ACTIVATE', 'DEACTIVATE', 'SUSPEND')\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'USER')\n        `);\n        await queryRunner.query(`\n            CREATE TABLE \"user\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"name\" character varying(50),\n                \"email\" character varying NOT NULL,\n                \"username\" character varying(30) NOT NULL,\n                \"password\" character varying NOT NULL,\n                \"status\" \"public\".\"user_status_enum\" NOT NULL DEFAULT 'DEACTIVATE',\n                \"role\" \"public\".\"user_role_enum\" NOT NULL DEFAULT 'USER',\n                \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"deleteAt\" TIMESTAMP,\n                CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"),\n                CONSTRAINT \"UQ_78a916df40e02a9deb1c4b75edb\" UNIQUE (\"username\"),\n                CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\" FOREIGN KEY (\"ownerId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"user\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_status_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"session\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/hashing/hashing.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The HashingService class is defined as an abstract service in NestJS.\nIt provides an interface for hashing and comparing hashed data,\nwhich can be implemented by any concrete class that requires\ncryptographic hashing functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/hashing.service.ts:26\n                        \n                    \n\n\n            \n                \n                        The compare method is an abstract method that takes raw data\nand an encrypted string, returning a Promise that resolves to a\nboolean indicating whether the raw data matches the hashed data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/hashing.service.ts:16\n                        \n                    \n\n\n            \n                \n                        The hash method is an abstract method that takes data as a string or Buffer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a hashed string\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * The HashingService class is defined as an abstract service in NestJS.\n * It provides an interface for hashing and comparing hashed data,\n * which can be implemented by any concrete class that requires\n * cryptographic hashing functionality.\n */\n@Injectable()\nexport abstract class HashingService {\n  /**\n   * The hash method is an abstract method that takes data as a string or Buffer\n   * @param data\n   * @returns returns a Promise that resolves to a hashed string\n   */\n  abstract hash(data: string | Buffer): Promise;\n\n  /**\n   * The compare method is an abstract method that takes raw data\n   * and an encrypted string, returning a Promise that resolves to a\n   * boolean indicating whether the raw data matches the hashed data.\n   * @param data\n   * @param encrypted\n   * @returns returns a Promise that resolves to a boolean\n   */\n  abstract compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This class defines a Data Transfer Object (DTO) for validating and describing\nan identifier that adheres to the UUID standard.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID must be string and conforms to the UUID format'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/id.dto.ts:23\n                        \n                    \n\n            \n                \n                    The 'id' property represents a unique identifier and must be a string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * This class defines a Data Transfer Object (DTO) for validating and describing\n * an identifier that adheres to the UUID standard.\n */\nexport class IdDto {\n  /**\n   * The 'id' property represents a unique identifier and must be a string\n   */\n  @ApiProperty({\n    description: 'The ID must be string and conforms to the UUID format'\n  })\n\n  // Ensures the value is of type string\n  @IsString()\n\n  // Enforces that the string is a valid UUID\n  @IsUUID()\n\n  // Declare the property as read-only\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard is a custom authentication guard that extends the default\nAuthGuard provided by the NestJS Passport module. This guard is used\nto protect routes that require JWT authentication, while also allowing\nfor certain routes to be marked as public (i.e., accessible without\nauthentication).\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Call the constructor of the parent AuthGuard class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines if the current request should be allowed through based\non the authentication logic. It checks if the route is marked as\npublic using the Reflector to access metadata.\nrequest, including the handler and the class where the route is\ndefined.\nlogic passes; otherwise, it returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ExecutionContext provides the context of the\nrequest, including the handler and the class where the route is\ndefined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                true if the route is public or if the default authentication\nlogic passes; otherwise, it returns false.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'auth/decorators/public.decorator';\n\n/**\n * JwtAuthGuard is a custom authentication guard that extends the default\n * AuthGuard provided by the NestJS Passport module. This guard is used\n * to protect routes that require JWT authentication, while also allowing\n * for certain routes to be marked as public (i.e., accessible without\n * authentication).\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * Call the constructor of the parent AuthGuard class.\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Determines if the current request should be allowed through based\n   * on the authentication logic. It checks if the route is marked as\n   * public using the Reflector to access metadata.\n   * @param context - The ExecutionContext provides the context of the\n   * request, including the handler and the class where the route is\n   * defined.\n   * @returns true if the route is public or if the default authentication\n   * logic passes; otherwise, it returns false.\n   */\n  canActivate(context: ExecutionContext) {\n    // Use the Reflector to check if the current route is marked as public.\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(), // Get the method (handler) level metadata.\n      context.getClass() // Get the class level metadata.\n    ]);\n\n    // If the route is public, allow the request without authentication.\n    if (isPublic) return true;\n\n    // Otherwise, proceed with the normal authentication process.\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface represents the structure of a JWT (JSON Web Token) payload.\nIt contains a single property 'id', which is a string that uniquely identifies\nthe user or entity associated with the token. The 'readonly' modifier ensures\nthat the 'id' cannot be modified after it has been set, promoting immutability\nand helping to maintain the integrity of the JWT payload.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of user is string and UUID format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * The ID of user is string and UUID format\n   */\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class is responsible for validating JWTs using Passport.\nIt extends Passport's Strategy class for JWTs and overrides the\nvalidation method to integrate with the application's authentication service.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT containing secret and other settings.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of AuthService to delegate JWT validation logic.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validate method to handle the verification of the JWT.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIncoming request object, used to access headers and other request-specific data.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe decoded payload of the JWT, containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user object if validation is successful; otherwise, it throws an error.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport jwtConfig from 'auth/config/jwt.config'; // Import the JWT configuration\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface'; // Define the interface for JWT payload\nimport { Request } from 'express'; // Import Request type from Express\nimport { ExtractJwt, Strategy } from 'passport-jwt'; // Import JWT extraction and strategy from passport-jwt\n\n/**\n * JwtStrategy class is responsible for validating JWTs using Passport.\n * It extends Passport's Strategy class for JWTs and overrides the\n * validation method to integrate with the application's authentication service.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor for JwtStrategy.\n   * @param jwtConfiguration - Configuration object for JWT containing secret and other settings.\n   * @param authService - Instance of AuthService to delegate JWT validation logic.\n   */\n  constructor(\n    @Inject(jwtConfig.KEY) // Inject the JWT configuration using the key defined in jwtConfig\n    private readonly jwtConfiguration: ConfigType, // Retrieve configuration type for jwtConfig\n    private readonly authService: AuthService // Injecting the AuthService for validation\n  ) {\n    // Call the parent constructor with options for extracting JWT and using the secret\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extracts JWT from Authorization header as Bearer token\n      secretOrKey: jwtConfiguration.secret, // Uses the secret defined in JWT configuration for verification\n      passReqToCallback: true // Enable passing the request object to the validation callback\n    });\n  }\n\n  /**\n   * Validate method to handle the verification of the JWT.\n   * @param req - Incoming request object, used to access headers and other request-specific data.\n   * @param payload - The decoded payload of the JWT, containing user information.\n   * @returns The user object if validation is successful; otherwise, it throws an error.\n   */\n  validate(req: Request, payload: JwtPayload) {\n    // Calls the AuthService to validate the token payload and possibly retrieve user info\n    return this.authService.validateJwt(\n      payload,\n      req.headers?.authorization.replace('bearer ', '')\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\nand specifies the 'local' strategy for authentication.\nThis guard will be used to protect routes that require local authentication,\nensuring that users are authenticated via the local strategy before accessing\nthe corresponding resources.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\n * and specifies the 'local' strategy for authentication.\n * This guard will be used to protect routes that require local authentication,\n * ensuring that users are authenticated via the local strategy before accessing\n * the corresponding resources.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\nIt extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor takes in an AuthService instance, which contains methods for validating user credentials.\nIt also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:30\n                        \n                    \n\n\n            \n                \n                        The validate method is called by Passport after the user submits their credentials.\nIt invokes the AuthService's validateLocal method to check if the provided email and password are valid.\nIf authentication is successful, it should return the user object; otherwise, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                promise user object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport { Strategy } from 'passport-local';\n\n/**\n * The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\n * It extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor takes in an AuthService instance, which contains methods for validating user credentials.\n   * It also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n   * @param authService\n   */\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * The validate method is called by Passport after the user submits their credentials.\n   * It invokes the AuthService's validateLocal method to check if the provided email and password are valid.\n   * If authentication is successful, it should return the user object; otherwise, it will throw an error.\n   * @param email\n   * @param password\n   * @returns promise user object\n   */\n  validate(email: string, password: string) {\n    return this.authService.validateLocal(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly email: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginValidationMiddleware.html":{"url":"injectables/LoginValidationMiddleware.html","title":"injectable - LoginValidationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginValidationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middlewares/login-validation.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a middleware class for validating login user data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/middlewares/login-validation.middleware.ts:23\n                        \n                    \n\n\n            \n                \n                        Middleware function to handle incoming requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express request\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express response\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express next\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware\n} from '@nestjs/common';\nimport { LoginUserDto } from 'auth/dto/login-user.dto';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * Define a middleware class for validating login user data\n */\n@Injectable()\nexport class LoginValidationMiddleware implements NestMiddleware {\n  /**\n   * Middleware function to handle incoming requests\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next\n   * @returns If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n   */\n  async use(req: Request, res: Response, next: NextFunction) {\n    // Convert the request body to a LoginUserDto instance\n    const loginDto = plainToInstance(LoginUserDto, req.body);\n\n    // Validate the loginDto using class-validator\n    // - whitelist: true enforces only the properties defined in the DTO\n    // - forbidNonWhitelisted: true rejects any properties not defined in the DTO\n    const errors = await validate(loginDto, {\n      whitelist: true,\n      forbidNonWhitelisted: true\n    });\n\n    // If validation errors are found, throw a BadRequestException with the error details\n    if (errors.length) {\n      throw new BadRequestException(errors);\n    }\n\n    // If validation is successful, proceed to the next middleware or route handler\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  readonly email: string;\n\n  @IsUsername()\n  readonly username: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistryDates.html":{"url":"classes/RegistryDates.html","title":"class - RegistryDates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistryDates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/embedded/registry-dates.embedded.ts\n        \n\n\n            \n                Description\n            \n            \n                A class representing common date fields for an entity in the database.\nThis class uses TypeORM decorators to automatically manage\nthe creation, update, and deletion dates of the entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:14\n                        \n                    \n\n            \n                \n                    The date and time when the entity was created.\nThis field is automatically populated by TypeORM upon entity creation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:29\n                        \n                    \n\n            \n                \n                    The date and time when the entity was soft deleted.\nThis field is automatically populated when the entity is marked as deleted,\nallowing for soft deletion functionality without removing the record from the database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:21\n                        \n                    \n\n            \n                \n                    The date and time when the entity was last updated.\nThis field is automatically updated by TypeORM whenever the entity is modified.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * A class representing common date fields for an entity in the database.\n * This class uses TypeORM decorators to automatically manage\n * the creation, update, and deletion dates of the entity.\n */\nexport class RegistryDates {\n  /**\n   * The date and time when the entity was created.\n   * This field is automatically populated by TypeORM upon entity creation.\n   */\n  @CreateDateColumn()\n  createdAt: Date;\n\n  /**\n   * The date and time when the entity was last updated.\n   * This field is automatically updated by TypeORM whenever the entity is modified.\n   */\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * The date and time when the entity was soft deleted.\n   * This field is automatically populated when the entity is marked as deleted,\n   * allowing for soft deletion functionality without removing the record from the database.\n   */\n  @DeleteDateColumn()\n  deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveDto.html":{"url":"classes/RemoveDto.html","title":"class - RemoveDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/remove.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a Data Transfer Object (DTO) class for removing resources\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                soft\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        soft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The \"soft\" property is optional and has type boolean'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/remove.dto.ts:23\n                        \n                    \n\n            \n                \n                    Define a property 'soft' that is optional and of type boolean\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { IsBoolean } from '../decorators/validators/is-boolean.decorator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Define a Data Transfer Object (DTO) class for removing resources\n */\nexport class RemoveDto {\n  /**\n   * Define a property 'soft' that is optional and of type boolean\n   */\n  @ApiPropertyOptional({\n    description: 'The \"soft\" property is optional and has type boolean'\n  })\n\n  // Indicate that the 'soft' property is optional in the request\n  @IsOptional()\n\n  // Validate that the 'soft' property, if provided, must be a boolean value\n  @IsBoolean()\n\n  // Declare the property as read-only\n  readonly soft: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the Session entity that represents a user session in the application\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                device\n                            \n                            \n                                    \n                                expiryDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ip\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Device\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:26\n                        \n                    \n\n            \n                \n                    Stores device information as a JSON object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:38\n                        \n                    \n\n            \n                \n                    The date and time when the session will expire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:14\n                        \n                    \n\n            \n                \n                    Generates a unique UUID for each session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:32\n                        \n                    \n\n            \n                \n                    IP address of the user during this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:47\n                        \n                    \n\n            \n                \n                    This session must be associated with a user\nThe user who owns this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:20\n                        \n                    \n\n            \n                \n                    Ensures each token is JWT and unique in the database\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Device } from 'core/common/interfaces/device.interface';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Define the Session entity that represents a user session in the application\n */\n@Entity()\nexport class Session {\n  /**\n   * Generates a unique UUID for each session\n   */\n  @PrimaryGeneratedColumn('uuid') //\n  id: string;\n\n  /**\n   * Ensures each token is JWT and unique in the database\n   */\n  @Column({ unique: true })\n  token: string;\n\n  /**\n   * Stores device information as a JSON object\n   */\n  @Column({ type: 'json' })\n  device: Device;\n\n  /**\n   * IP address of the user during this session\n   */\n  @Column()\n  ip: string;\n\n  /**\n   * The date and time when the session will expire\n   */\n  @Column()\n  expiryDate: Date; //\n\n  /**\n   * This session must be associated with a user\n   * The user who owns this session\n   */\n  @ManyToOne(() => User, (user) => user.id, {\n    nullable: false\n  })\n  owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('session')\nexport class SessionController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nSessionService\n\nSessionService\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport { SessionService } from './session.service';\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session])],\n  providers: [SessionService],\n  controllers: [SessionController]\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                sessions\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, sessionRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string, token: string, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    sessions(undefined: CustomUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CustomUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { Session } from 'session/entities/session.entity';\nimport { DataSource, Raw, Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    private readonly dataSource: DataSource,\n    @InjectRepository(Session)\n    private readonly sessionRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  async create(userId: string, token: string, ip: string, device: Device) {\n    const session = this.sessionRepository.create({\n      owner: {\n        id: userId\n      },\n      ip,\n      token,\n      device,\n      expiryDate: new Date(new Date().setMilliseconds(31 * 24 * 60 * 60 * 1000))\n    });\n\n    return await this.sessionRepository.save(session);\n  }\n\n  async validate(userId: string, token: string): Promise {\n    const session = await this.dataSource.getRepository(Session).findOne({\n      where: {\n        token,\n        owner: {\n          id: userId\n        },\n        expiryDate: Raw((alias) => `${alias} > NOW()`)\n      }\n    });\n\n    return session;\n  }\n\n  async sessions({ id }: CustomUser) {\n    await this.userRepository.findOne({\n      where: { id },\n      relations: ['session']\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user thats need to be Updated'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    description: 'The ID of the user thats need to be Updated'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the User entity representing a user in the system\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                registryDates\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                sessions\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n            \n                \n                    User's email must be unique\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n            \n                \n                    Generates a unique identifier for each user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    User's name, optional and not selected by default\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    Password is not selected by default (for security)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registryDates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistryDates\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column(undefined, {prefix: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n            \n                \n                    Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n            \n                \n                    User role defaults to USER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Session[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, session => session.owner, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Defines a one-to-many relation with the Session entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    User status, defaults to DEACTIVATE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    Username has a maximum length of 30 and must be unique\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { RegistryDates } from 'core/common/embedded/registry-dates.embedded';\nimport { UserRole } from 'core/common/enums/user-role.enum';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\nimport { Session } from 'session/entities/session.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Define the User entity representing a user in the system\n */\n@Entity()\nexport class User {\n  /**\n   * Generates a unique identifier for each user\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * User's name, optional and not selected by default\n   */\n  @Column({ length: 50, nullable: true, select: false })\n  name: string;\n\n  /**\n   * User's email must be unique\n   */\n  @Column({ unique: true })\n  email: string;\n\n  /**\n   * Username has a maximum length of 30 and must be unique\n   */\n  @Column({ unique: true, length: 30 })\n  username: string;\n\n  /**\n   * Password is not selected by default (for security)\n   */\n  @Column({ select: false })\n  password: string;\n\n  /**\n   * User status, defaults to DEACTIVATE\n   */\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.DEACTIVATE })\n  status: UserStatus;\n\n  /**\n   * User role defaults to USER\n   */\n  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n   */\n  @Column(() => RegistryDates, { prefix: false })\n  registryDates: RegistryDates;\n\n  /**\n   * Defines a one-to-many relation with the Session entity\n   */\n  @OneToMany(() => Session, (session) => session.owner, {\n    /**\n     * Allows sessions to be softly removed or recovered\n     */\n    cascade: ['soft-remove', 'recover']\n  })\n  sessions: Session[];\n\n  /**\n   * Getter to determine if the user is considered deleted based on the deletion date\n   */\n  get isDeleted() {\n    /**\n     * Returns true if deleteAt is set (indicating the user is deleted)\n     */\n    return !!this.registryDates.deleteAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({description: 'Creates a new user'})@ApiResponse({status: 201, description: 'You get a 201 response if your data is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'Get list of users register in application'})@ApiResponse({status: 200, description: 'Fetch users successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({description: 'Get single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Fetch single user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: IdDto, undefined: RemoveDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({description: 'Delete single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiQuery({name: 'soft', type: Boolean, required: false, description: 'This query for soft delete data of user in application'})@ApiResponse({status: 200, description: 'Delete user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            RemoveDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({description: 'Update single user with id and send data'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Update data of user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags\n} from '@nestjs/swagger';\nimport { IdDto } from 'core/common/dto/id.dto';\nimport { RemoveDto } from 'core/common/dto/remove.dto';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({\n    description: 'Creates a new user'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your data is created successfully'\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({\n    description: 'Get list of users register in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch users successfully'\n  })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({\n    description: 'Get single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch single user successfully'\n  })\n  findOne(@Param('id') { id }: IdDto) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({\n    description: 'Update single user with id and send data'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Update data of user successfully'\n  })\n  update(@Param('id') { id }: IdDto, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({\n    description: 'Delete single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiQuery({\n    name: 'soft',\n    type: Boolean,\n    required: false,\n    description: 'This query for soft delete data of user in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete user successfully'\n  })\n  remove(@Param('id') { id }: IdDto, @Query() { soft }: RemoveDto) {\n    return this.usersService.remove(id, soft);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'auth/auth.module';\nimport { Session } from 'session/entities/session.entity';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/users.subscriber';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session]), AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and preform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:21\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, soft: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Find and Delete a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Find and Update a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Class to connect to Users table and preform business operations\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...createUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  async findOne(id: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find and Update a single user using the ID of user\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      // Find user with id and update data\n      const user = await this.userRepository.preload({\n        id,\n        ...updateUserDto\n      });\n\n      // If doesn't exists, throw error\n      if (!user) {\n        throw new NotFoundException('user not found');\n      }\n\n      // Otherwise save and return user\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find and Delete a single user using the ID of user\n   */\n  async remove(id: string, soft: boolean) {\n    const user = await this.findOne(id);\n    return soft\n      ? await this.userRepository.softRemove(user)\n      : await this.userRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersSubscriber.html":{"url":"classes/UsersSubscriber.html","title":"class - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/subscribers/users.subscriber.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeInsert\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/subscribers/users.subscriber.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeInsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeInsert(event: InsertEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            InsertEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(event: UpdateEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UpdateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashingService } from 'auth/hashing/hashing.service';\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  UpdateEvent\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n@EventSubscriber()\nexport class UsersSubscriber implements EntitySubscriberInterface {\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly hashingService: HashingService\n  ) {\n    dataSource.subscribers.push(this);\n  }\n\n  listenTo() {\n    return User;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async beforeInsert(event: InsertEvent) {\n    const { entity: user } = event;\n    user.password = await this.hashingService.hash(user.password);\n  }\n\n  async beforeUpdate(event: UpdateEvent) {\n    const { entity } = event;\n    const user = entity as User;\n\n    user.password = await this.hashingService.hash(user.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                commitlint.config.ts\n            \n            variable\n            Configuration\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/ipAddress.decorator.ts\n            \n            variable\n            IpAddress\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user-agent.decorator.ts\n            \n            variable\n            UserAgent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/hashing/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/middlewares/login-validation.middleware.ts\n            \n            injectable\n            LoginValidationMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            toBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            ToBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-boolean.decorator.ts\n            \n            variable\n            IsBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IS_PASSWORD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            isPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IsPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IS_USERNAME_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            isUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IsUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            usernameRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/remove.dto.ts\n            \n            class\n            RemoveDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/embedded/registry-dates.embedded.ts\n            \n            class\n            RegistryDates\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomUser\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/device.interface.ts\n            \n            interface\n            Device\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/util/common.constants.ts\n            \n            variable\n            VALIDATION_PIPE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1725986093329-generate-tables.ts\n            \n            class\n            GenerateTables1725986093329\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/env/env.constants.ts\n            \n            variable\n            ENV_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/subscribers/users.subscriber.ts\n            \n            class\n            UsersSubscriber\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                85 %\n                (6/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport : ^1.0.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            This enum defines the different roles a user can have in the application.\n\nADMIN: Represents a user with administrative privileges, allowing full access to the system.\nAUTHOR: Represents a user who can create and manage content, but with limited permissions compared to an admin.\nUSER: Represents a regular user with basic access, mainly for viewing content and participating in the application.\n\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 AUTHOR\n                            \n                        \n                        \n                            \n                                Value : AUTHOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/core/common/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                    \n                        \n                            Define an enumeration for user status in the application\n\nACTIVATE: Represents a user who is currently active and has access to the system\nDEACTIVATE: Represents a user who has been deactivated and no longer has access to the system\nSUSPEND: Represents a user whose access is temporarily suspended, possibly due to violations or other reasons\n\n\n                        \n                    \n                        \n                            \n                                 ACTIVATE\n                            \n                        \n                        \n                            \n                                Value : ACTIVATE\n                            \n                        \n                        \n                            \n                                 DEACTIVATE\n                            \n                        \n                        \n                            \n                                Value : DEACTIVATE\n                            \n                        \n                        \n                            \n                                 SUSPEND\n                            \n                        \n                        \n                            \n                                Value : SUSPEND\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function is an asynchronous function that initializes and starts the application.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nStay in touch\n\nAuthor - Mohamadreza Mosalli\nWebsite - https://minidocs.com\n\nLicense\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnvModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingService \n\nHashingService \n\nHashingService  -->\n\nAuthModule->HashingService \n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nAuthModule -->\n\nSessionService->AuthModule\n\n\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Mohamadreza Mosalli\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Configuration   (commitlint.config.ts)\n                        \n                        \n                            ENV_VALIDATION_SCHEMA   (src/.../env.constants.ts)\n                        \n                        \n                            IpAddress   (src/.../ipAddress.decorator.ts)\n                        \n                        \n                            IS_PASSWORD_KEY   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            IS_USERNAME_KEY   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsBoolean   (src/.../is-boolean.decorator.ts)\n                        \n                        \n                            isPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            isUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            passwordRegex   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            ToBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserAgent   (src/.../user-agent.decorator.ts)\n                        \n                        \n                            usernameRegex   (src/.../is-username.decorator.ts)\n                        \n                        \n                            VALIDATION_PIPE_OPTIONS   (src/.../common.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    commitlint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  extends: ['@commitlint/config-conventional'],\n  parserPreset: 'conventional-changelog-atom',\n  formatter: '@commitlint/format',\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // New feature\n        'fix', // Bug fix\n        'docs', // Documentation changes\n        'style', // Changes that do not affect the meaning of the code (white-space, formatting, etc.)\n        'refactor', // Code changes that neither fix a bug nor add a feature\n        'perf', // Performance improvement\n        'test', // Adding missing tests or correcting existing tests\n        'build', // Changes that affect the build system or external dependencies (example scopes: npm)\n        'ci', // Changes to CI configuration files and scripts\n        'chore', // Other changes that don't modify src or test files\n        'revert' // Reverts a previous commit\n      ]\n    ],\n    'scope-enum': [\n      2,\n      'always',\n      [\n        'setup', // Project setup\n        'config', // Configuration files\n        'deps', // Dependency updates\n        'feature', // Feature-specific changes\n        'bug', // Bug fixes\n        'docs', // Documentation\n        'style', // Code style/formatting\n        'refactor', // Code refactoring\n        'test', // Tests\n        'build', // Build scripts or configuration\n        'ci', // Continuous integration\n        'release', // Release related changes\n        'other' // Other changes\n      ]\n    ]\n  }\n}\n                    \n                \n\n            \n                \n                    Check messages of commit with this format\n\n                \n            \n\n        \n    \n\n    src/core/env/env.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  // Database username, must be a string and is required.\n  DATA_SOURCE_USERNAME: Joi.string().required(),\n\n  // Database password, must be a string and is required.\n  DATA_SOURCE_PASSWORD: Joi.string().required(),\n\n  // Host address for the database, must be a string and is required.\n  DATA_SOURCE_HOST: Joi.string().required(),\n\n  // Port number for the database connection, must be a number and is required.\n  DATA_SOURCE_PORT: Joi.number().required(),\n\n  // Name of the database to connect to, must be a string and is required.\n  DATA_SOURCE_DATABASE: Joi.string().required(),\n\n  // Connection URL for the database, must be a string and is required.\n  DATA_SOURCE_URL: Joi.string().required(),\n\n  // Secret key for JSON Web Token encryption, must be a string and is required.\n  JWT_SECRET_KEY: Joi.string().required(),\n\n  // Current environment (e.g., development, production), must be a string and is required.\n  NODE_ENV: Joi.string().required()\n})\n                    \n                \n\n            \n                \n                    Defines a validation schema for environment variables using Joi.\nThis schema specifies the required fields for the application to run properly.\nEach field must meet the specified type requirements:\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/ipAddress.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IpAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get ip address\n    const ip = request.headers['x-forwarded-for'] as string;\n\n    if (ip && process.env.NODE_ENV === 'production') {\n      ip.split(',')[0].replace(',', '');\n    }\n\n    // Set ip address\n    return ip ?? '127.0.0.1';\n  }\n)\n                    \n                \n\n            \n                \n                    IpAddress is a custom parameter decorator for use in NestJS controllers.\nIt extracts the client's IP address from the request object. The decorator will primarily\nbe used to inject the IP address into controller methods as a parameter.\nThe decorator performs the following operations:\n\nIt uses the ExecutionContext to access the HTTP request object.\nIt attempts to read the IP address from the 'x-forwarded-for' header, which is typically\nused in a proxied environment (like behind a load balancer).\nIf the application is running in a production environment and the 'x-forwarded-for' header\nis present, it splits the header value (which may contain multiple IPs) and keeps the first one,\nensuring that any extra spaces or commas are removed.\nIf no valid IP address is found, it defaults to returning '127.0.0.1', which is the localhost address.\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PASSWORD_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPassword'\n                    \n                \n\n            \n                \n                    A unique key identifier for the custom password validator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, passwordRegex)\n                    \n                \n\n            \n                \n                    A helper function that checks if the given value matches the password regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_PASSWORD_KEY, // Name of the custom validation rule\n    validator: {\n      // Implementation of the validation logic, using the isPassword helper\n      validate: (value): boolean => isPassword(value),\n      // Custom default error message returned when validation fails\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom decorator function for validating passwords on class properties.\nIt utilizes the 'class-validator' library to create a validation rule for password strength.\nIt takes an optional validationOptions parameter for customizing error messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n            \n                \n                    Regular expression for validating a password.\nThe password must contain:\n\nAt least one lowercase letter\nAt least one uppercase letter\nAt least one special character from the specified set (@$!%*?&)\nLength between 8 to 20 characters\n\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Defining a constant key for identifying public routes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    The Public decorator function sets metadata on a route handler to indicate\nthat the route should be treated as public, meaning it does not require authentication.\nBy calling SetMetadata with the IS_PUBLIC_KEY and a value of true,\nthis decorator can be used to easily mark controller methods for public access.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_USERNAME_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isUsername'\n                    \n                \n\n            \n                \n                    Key to identify the custom validation rule\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, usernameRegex)\n                    \n                \n\n            \n                \n                    Function to determine if a value matches the username regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions // Optional object for additional validation options\n): PropertyDecorator => {\n  return ValidateBy({\n    // Name of the validation rule\n    name: IS_USERNAME_KEY,\n\n    // Validator object containing the validation logic\n    validator: {\n      // Validation function that returns true if value is a valid username\n      validate: (value): boolean => isUsername(value),\n\n      // Default error message if validation fails\n      defaultMessage: buildMessage(\n        // Custom message format, indicating which property failed validation\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom validation decorator for username validation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{3,30}$/\n                    \n                \n\n            \n                \n                    Define a regular expression for validating usernames\nUsername must:\n\nNot contain two consecutive dots\nNot end with a dot\nStart with a word character (not a special character)\nHave a length between 4 to 30 characters\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) =>\n  applyDecorators(DefaultIsBoolean(validationOptions), ToBoolean())\n                    \n                \n\n            \n                \n                    Create a custom decorator 'IsBoolean' that combines the default class-validator\n'IsBoolean' validation with a custom transformation decorator 'ToBoolean'.\nThis allows for both validation of boolean values and automatic conversion\nof input values into booleans before validation occurs.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/transforms/to-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown) => {\n  // Using switch statement to handle different input cases.\n  switch (value) {\n    // If the input value is null, return 'failure'.\n    case null:\n      return 'failure';\n\n    // When the input value is the string 'true', return a boolean true.\n    case 'true':\n      return true;\n\n    // When the input value is the string 'false', return a boolean false.\n    case 'false':\n      return false;\n\n    // For any other value, return the value unchanged.\n    default:\n      return value;\n  }\n}\n                    \n                \n\n            \n                \n                    A utility function that converts various input values to a boolean type.\nThe function returns either a boolean (true or false), a string 'failure', or the original value based on the input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ToBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Transform(({ obj, key }) => toBoolean(obj[key]))\n                    \n                \n\n            \n                \n                    A decorator function ToBoolean that applies the custom transformation logic to class properties.\nThis decorator uses the Transform decorator to map the relevant property value to its boolean representation\nusing the toBoolean function. It extracts the value from the object using the given key.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    // Retrieve the request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get the user object from the request\n    const user = request.user;\n\n    // Log the user object for debugging purposes\n    console.log('user', user);\n\n    // If a specific field is requested, return that field; otherwise, return the whole user object\n    return data ? user?.[data] : user;\n  }\n)\n                    \n                \n\n            \n                \n                    User decorator that extracts user information from the request object.\nThis custom decorator can be used in NestJS route handlers to easily access\nuser data stored in the request object. It leverages the createParamDecorator\nfunction provided by NestJS to create a parameter decorator that can be used in\ncontroller methods.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user-agent.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Device => {\n    // Retrieve the HTTP request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Obtain the 'User-Agent' header from the request headers\n    const userAgent = request.headers['user-agent'];\n\n    // Initialize the device object with a default name of 'unknown'\n    let device: Device = {\n      name: 'unknown'\n    };\n\n    // If a User-Agent string is present, start pattern matching to identify the device\n    if (userAgent) {\n      // Check if the User-Agent indicates an iOS device\n      if (/like Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'iOS',\n          // Extract the version number using a regex pattern and replace underscores with dots\n          version: /CPU( iPhone)? OS ([0-9\\._]+) like Mac OS X/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates an Android device\n      } else if (/Android/.test(userAgent)) {\n        device = {\n          name: 'Android',\n          // Extract the version number of Android from the User-Agent string\n          version: /Android ([0-9\\.]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a macOS device\n      } else if (/(Intel|PPC) Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'macOS',\n          // Extract the version number of macOS from the User-Agent string, replacing underscores with dots\n          version: /(Intel|PPC) Mac OS X ?([0-9\\._]*)[\\)\\;]/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates a Windows device\n      } else if (/Windows NT/.test(userAgent)) {\n        device = {\n          name: 'Windows',\n          // Extract the version number of Windows from the User-Agent string\n          version: /Windows NT ([0-9\\._]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a Linux operating system\n      } else if (/Linux/i.test(userAgent) && /X11/i.test(userAgent)) {\n        device = {\n          name: 'Linux'\n          // Version detection can be added here if needed\n        };\n      }\n    }\n\n    // Return the parsed device information\n    return device;\n  }\n)\n                    \n                \n\n            \n                \n                    This decorator extracts and parses the 'User-Agent' header from the HTTP request,\nallowing the identification of the client's device type and version.\nIt is created using NestJS's createParamDecorator function.\n\n                \n            \n\n        \n    \n\n    src/core/common/util/common.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_PIPE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * 'whitelist' option ensures that only properties that are defined in the DTO\n   * are allowed in the incoming request. Any properties that are not in the\n   * DTO will be stripped from the request object.\n   */\n  whitelist: true,\n\n  /**\n   * 'forbidNonWhitelisted' option throws an error if any non-whitelisted\n   * properties are present in the incoming request. This is useful for\n   * enforcing strict validation and preventing unexpected data from being processed.\n   */\n  forbidNonWhitelisted: true,\n\n  /**\n   * 'transform' option enables automatic transformation of incoming request\n   * data into the specified DTO types. This way, data will be automatically\n   * converted to the types defined in the DTO (e.g., string to number).\n   */\n  transform: true,\n\n  // 'transformOptions' allows for additional settings for the transformation process.\n  transformOptions: {\n    /**\n     * 'enableImplicitConversion' allows for automatic type conversion of properties\n     * to their respective types as defined in the DTO. For example, if a property\n     * is defined as a number in the DTO, a string representation of that number\n     * in the incoming request will be converted to a number automatically.\n     */\n    enableImplicitConversion: true\n  }\n}\n                    \n                \n\n            \n                \n                    Configuration object for the validation pipe in a NestJS application.\nThe validation pipe is used to automatically validate incoming requests and\ntransform DTOs (Data Transfer Objects) to the specified types.\nThe options set here enhance the validation and transformation process.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
