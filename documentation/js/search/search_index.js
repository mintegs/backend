var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddRelationshipToSessionAndUser1719672459617.html",[0,0.03,1,2.704]],["body/classes/AddRelationshipToSessionAndUser1719672459617.html",[0,0.027,1,4.336,2,1.137,3,0.201,4,0.178,5,0.178,6,4.889,7,4.285,8,4.889,9,2.291,10,2.464,11,2.297,12,3.618,13,0.328,14,1.143,15,1.426,16,1.35,17,3.368,18,2.764,19,3.131,20,3.131,21,0.576,22,0.021,23,0.61,24,1.753,25,1.753,26,0.875,27,2.779,28,3.131,29,4.565,30,3.256,31,1.35,32,1.277,33,1.35,34,3.319,35,3.131,36,2.779,37,0.25,38,1.276,39,0.201,40,2.531,41,3.923,42,4.336,43,3.319,44,5.282,45,2.464,46,2.042,47,3.901,48,4.571,49,3.256,50,2.464,51,3.256,52,3.256,53,2.23,54,4.571,55,2.464,56,3.131,57,2.042,58,0.013,59,0.013]],["title/classes/AddRoleToUser1719388025258.html",[0,0.03,60,2.704]],["body/classes/AddRoleToUser1719388025258.html",[0,0.029,2,1.186,3,0.21,4,0.186,5,0.186,7,4.197,10,2.571,11,2.366,12,3.701,13,0.342,14,1.177,15,1.448,16,1.39,17,3.413,18,2.802,19,3.225,20,3.225,21,0.668,22,0.021,23,0.636,24,2.535,25,1.829,26,0.895,27,2.899,28,3.225,29,4.609,31,1.39,32,1.315,33,1.39,34,3.381,35,3.225,36,2.899,37,0.261,38,1.331,39,0.21,40,2.578,41,3.996,42,3.564,43,2.728,46,2.131,56,3.225,57,2.131,58,0.014,59,0.014,60,4.417,61,4.98,62,4.342,63,3.397,64,1.707,65,5.404,66,3.397,67,1.458]],["title/classes/AddSessionEntity1719672378417.html",[0,0.03,68,2.704]],["body/classes/AddSessionEntity1719672378417.html",[0,0.028,2,1.173,3,0.208,4,0.183,5,0.183,7,4.327,9,2.308,11,2.347,12,3.678,13,0.338,14,1.167,15,1.442,16,1.379,17,3.401,18,2.792,19,3.199,20,3.199,21,0.586,22,0.021,23,0.629,24,1.808,25,1.808,26,0.89,28,3.199,29,4.597,31,1.379,32,1.305,33,1.379,34,3.364,35,3.199,37,0.258,38,1.316,39,0.208,40,2.565,41,3.976,42,4.395,43,3.364,46,2.93,56,3.199,57,2.93,58,0.014,59,0.014,68,4.395,69,4.955,70,2.542,71,2.866,72,3.358,73,2.866,74,2.732,75,2.866,76,2.866,77,2.866]],["title/modules/AppModule.html",[78,1.179,79,2.447]],["body/modules/AppModule.html",[0,0.031,3,0.228,4,0.201,5,0.201,22,0.022,37,0.51,39,0.228,58,0.015,59,0.015,78,1.861,79,4.92,80,1.628,81,1.983,82,2.311,83,2.311,84,1.983,85,2.134,86,2.311,87,3.144,88,3.144,89,3.765,90,4.076,91,4.076,92,4.076,93,4.076,94,4.076,95,3.122,96,2.311,97,2.311,98,3.684,99,2.884,100,0.87,101,3.684,102,3.684,103,3.684,104,3.144,105,3.684,106,3.684]],["title/controllers/AuthController.html",[107,1.923,108,2.447]],["body/controllers/AuthController.html",[0,0.022,3,0.163,4,0.144,5,0.144,13,0.266,15,1.228,16,1.161,17,2.526,21,0.567,22,0.022,23,1.186,26,0.861,31,1.535,32,1.452,33,1.535,37,0.513,39,0.163,58,0.012,59,0.012,67,1.389,74,2.915,100,0.624,107,1.422,108,2.692,109,1.422,110,2.255,111,1.809,112,2.642,113,4.005,114,3.354,115,4.005,116,2.975,117,2.642,118,3.887,119,2.036,120,2.642,121,1.975,122,2.642,123,3.934,124,2.642,125,2.642,126,2.642,127,2.255,128,5.197,129,3.26,130,2.642,131,2.642,132,2.255,133,3.653,134,2.642,135,2.642,136,3.354,137,2.642,138,2.642,139,2.255,140,2.642,141,1.809,142,1.422,143,2.358,144,2.255,145,2.975,146,2.642,147,2.642,148,2.975,149,2.642,150,2.642,151,2.642,152,2.255,153,2.255,154,2.255,155,1.531,156,1.657,157,2.255,158,3.354,159,1.809,160,2.642,161,2.255,162,1.531,163,2.642,164,2.642,165,1.809,166,0.66,167,2.642,168,2.642,169,2.036,170,2.642,171,3.93,172,2.642,173,2.642,174,2.642,175,3.93,176,2.642,177,2.642,178,2.642,179,2.642,180,2.642,181,2.642]],["title/modules/AuthModule.html",[78,1.179,89,2.07]],["body/modules/AuthModule.html",[0,0.024,3,0.176,4,0.156,5,0.156,9,1.45,11,1.43,15,0.673,16,0.841,21,0.31,22,0.022,26,0.472,31,0.841,32,0.795,33,0.841,37,0.535,39,0.176,58,0.012,59,0.012,67,0.711,78,1.618,80,1.258,81,1.532,82,1.785,83,1.785,84,1.532,85,2.84,86,3.075,89,3.931,95,2.604,96,1.785,97,1.785,99,1.649,100,0.673,108,3.357,109,2.235,142,1.532,143,3.005,144,2.429,156,2.604,157,2.429,158,2.429,182,2.429,183,2.429,184,2.429,185,3.18,186,3.752,187,3.752,188,3.22,189,2.846,190,2.846,191,4.152,192,5.387,193,2.846,194,2.846,195,2.846,196,4.152,197,2.429,198,1.949,199,4.152,200,1.949,201,2.846,202,2.154,203,1.949,204,1.43,205,1.649,206,2.846,207,2.429,208,2.846,209,2.843,210,2.846,211,2.429,212,1.949,213,2.846,214,2.846,215,2.846,216,2.846,217,2.429,218,2.154,219,2.846,220,2.846,221,3.543,222,4.152,223,2.846]],["title/injectables/AuthService.html",[143,1.795,224,0.844]],["body/injectables/AuthService.html",[0,0.013,3,0.095,4,0.084,5,0.084,9,1.61,13,0.155,15,1.155,16,0.757,18,2.775,21,0.533,22,0.022,23,1.177,26,0.81,31,1.444,32,1.366,33,1.361,37,0.442,38,0.603,39,0.095,40,2.488,53,1.756,58,0.008,59,0.008,62,1.054,64,1.288,67,1.634,74,2.41,100,0.364,113,2.813,114,2.188,115,2.188,116,1.941,118,2.411,121,3.045,123,1.165,127,2.188,129,2.411,132,2.188,133,2.892,141,1.054,142,0.829,143,1.288,152,1.314,153,1.314,154,1.314,155,0.892,166,0.961,169,2.149,185,2.456,188,2.632,202,1.165,204,0.773,211,1.314,217,1.314,224,0.606,225,0.64,226,1.314,227,3.295,228,2.564,229,1.38,230,1.314,231,2.632,232,4.889,233,1.539,234,1.941,235,1.539,236,1.054,237,1.539,238,2.301,239,2.564,240,1.539,241,2.678,242,1.539,243,1.539,244,1.539,245,2.411,246,3.843,247,1.539,248,2.564,249,1.539,250,2.069,251,1.314,252,3.843,253,1.165,254,1.486,255,1.314,256,1.314,257,1.314,258,1.314,259,1.165,260,2.411,261,1.314,262,2.829,263,1.314,264,1.314,265,1.314,266,1.314,267,2.188,268,3.701,269,1.314,270,2.188,271,1.539,272,1.941,273,3.232,274,2.564,275,2.757,276,1.539,277,0.829,278,2.813,279,2.188,280,1.054,281,1.539,282,1.539,283,2.813,284,2.813,285,2.188,286,2.188,287,3.295,288,1.941,289,3.843,290,1.539,291,2.813,292,2.564,293,4.269,294,2.564,295,1.539,296,1.539,297,1.539,298,1.609,299,1.609,300,2.188,301,2.188,302,1.314,303,1.314,304,1.539,305,1.539,306,2.564,307,1.539,308,1.539,309,1.165,310,1.539,311,1.539,312,1.539,313,1.539,314,2.564,315,1.539,316,2.188]],["title/injectables/BcryptService.html",[209,2.447,224,0.844]],["body/injectables/BcryptService.html",[0,0.031,3,0.228,4,0.202,5,0.202,11,1.857,13,0.372,15,1.178,16,1.473,18,2.495,21,0.544,22,0.022,23,1.284,24,1.989,25,1.989,26,0.826,31,1.473,32,1.393,33,1.473,37,0.433,39,0.228,40,1.633,58,0.015,59,0.015,100,0.873,169,1.954,185,2.506,209,3.416,224,1.178,225,1.536,241,2.318,262,1.857,277,2.685,317,3.154,318,4.257,319,4.257,320,4.257,321,5.551,322,5.159,323,3.695,324,4.257,325,5.646,326,5.646,327,3.695,328,4.257,329,4.257,330,3.695,331,4.988,332,3.695,333,3.695,334,3.695]],["title/classes/ChangePasswordDto.html",[0,0.03,118,2.241]],["body/classes/ChangePasswordDto.html",[0,0.038,2,1.578,3,0.279,4,0.247,5,0.247,13,0.455,14,1.421,21,0.62,22,0.021,23,1.224,26,0.942,37,0.347,39,0.279,58,0.017,59,0.017,118,3.567,119,2.228,166,1.717,283,5.311,284,5.311,335,5.311,336,3.856,337,3.9,338,4.518,339,4.518,340,2.834,341,3.094]],["title/modules/CommonModule.html",[78,1.179,90,2.241]],["body/modules/CommonModule.html",[0,0.041,3,0.299,4,0.264,5,0.264,22,0.022,37,0.492,39,0.299,58,0.017,59,0.017,78,1.958,80,2.136,85,2.801,90,3.72,100,1.142,200,3.31,221,4.125,275,2.602,342,4.834,343,4.834,344,5.93,345,3.659,346,4.834,347,4.834,348,4.834]],["title/classes/CreateUserDto.html",[0,0.03,349,2.07]],["body/classes/CreateUserDto.html",[0,0.032,2,0.895,3,0.158,4,0.14,5,0.14,13,0.258,14,0.96,15,1.295,21,0.598,22,0.021,23,1.15,26,0.908,37,0.421,39,0.158,58,0.011,59,0.011,119,2.148,121,2.755,162,1.484,166,1.692,250,2.952,288,2.907,298,3.439,299,2.89,337,2.225,340,2.409,341,1.754,349,2.225,350,4.913,351,1.607,352,3.487,353,3.277,354,5.458,355,2.561,356,2.186,357,2.561,358,5.756,359,2.907,360,4.913,361,6.395,362,3.84,363,2.561,364,2.561,365,3.84,366,3.84,367,5.118,368,5.118,369,3.84,370,3.84,371,2.561,372,2.561,373,4.15,374,2.561,375,3.099,376,3.84,377,3.84,378,3.932,379,2.907,380,3.277,381,2.561,382,2.561,383,3.84,384,3.84,385,3.84,386,3.277,387,2.561,388,2.561,389,3.874,390,4.607,391,3.277,392,2.561,393,3.932,394,2.186,395,1.205,396,2.63,397,2.186,398,2.186,399,2.186,400,2.561,401,2.561,402,2.561,403,2.186,404,2.561,405,2.186,406,2.561]],["title/classes/CreateUserEntity1719238220284.html",[0,0.03,407,2.704]],["body/classes/CreateUserEntity1719238220284.html",[0,0.026,2,1.095,3,0.194,4,0.171,5,0.171,11,2.236,12,3.544,13,0.315,14,1.112,15,1.46,16,1.314,17,3.327,18,2.73,19,3.048,20,3.048,21,0.564,22,0.021,23,0.587,24,3.202,25,1.687,26,0.857,28,3.048,29,4.525,31,1.314,32,1.243,33,1.314,34,3.263,35,3.048,37,0.24,38,1.228,39,0.194,40,1.966,41,3.048,43,2.578,45,2.373,46,3.987,47,4.416,50,2.373,56,2.147,58,0.013,59,0.013,64,2.989,67,1.545,70,2.373,71,2.675,73,2.675,76,4.807,77,3.798,121,1.575,238,1.744,250,2.396,298,2.792,299,1.966,379,2.373,407,4.263,408,4.807,409,3.134,410,3.134,411,3.134,412,3.134,413,3.134,414,2.675,415,5.174,416,3.798,417,2.675,418,2.675,419,3.134,420,3.369,421,3.134,422,3.134,423,3.134]],["title/interfaces/CustomRequest.html",[424,1.681,425,2.447]],["body/interfaces/CustomRequest.html",[3,0.285,4,0.252,5,0.252,9,2.193,13,0.464,14,1.439,21,0.502,22,0.021,23,0.863,37,0.442,39,0.356,58,0.017,59,0.017,67,1.644,166,1.569,205,2.669,238,1.805,254,3.811,424,2.709,425,3.942,426,2.89,427,3.487,428,3.487,429,3.099,430,3.939,431,2.89]],["title/interfaces/CustomUser.html",[254,2.07,424,1.681]],["body/interfaces/CustomUser.html",[3,0.279,4,0.247,5,0.247,9,2.464,13,0.455,14,1.421,21,0.62,22,0.021,23,1.166,37,0.436,39,0.352,58,0.017,59,0.017,67,1.129,166,1.555,205,2.618,238,2.559,254,3.606,424,2.676,425,3.094,426,2.834,427,3.42,428,3.42,429,2.432,430,3.567,431,2.834]],["title/modules/DatabaseModule.html",[78,1.179,91,2.241]],["body/modules/DatabaseModule.html",[0,0.043,3,0.313,4,0.277,5,0.277,22,0.021,37,0.502,39,0.313,58,0.018,59,0.018,78,2.014,80,2.237,91,3.826,99,2.933,100,1.196,203,3.467,204,2.544,432,5.062,433,5.062,434,5.062,435,5.062]],["title/interfaces/Device.html",[74,1.681,424,1.681]],["body/interfaces/Device.html",[3,0.294,4,0.26,5,0.26,13,0.479,14,1.467,15,1.572,21,0.64,22,0.021,23,1.304,32,1.64,39,0.294,58,0.017,59,0.017,74,2.763,166,1.467,236,4.362,424,2.238,426,2.983,436,4.059,437,5.035]],["title/modules/EnvModule.html",[78,1.179,92,2.241]],["body/modules/EnvModule.html",[0,0.041,3,0.301,4,0.266,5,0.266,22,0.022,37,0.494,39,0.301,58,0.018,59,0.018,78,1.968,80,2.153,92,3.739,99,2.824,100,1.152,197,4.16,198,3.338,438,4.874,439,4.512,440,4.874,441,4.874,442,4.874,443,2.449,444,4.874]],["title/injectables/HashingService.html",[185,1.795,224,0.844]],["body/injectables/HashingService.html",[0,0.034,3,0.252,4,0.223,5,0.223,13,0.411,15,1.258,16,1.573,21,0.581,22,0.021,23,1.309,26,0.882,31,1.573,32,1.488,33,1.573,34,3.643,37,0.313,39,0.252,58,0.016,59,0.016,100,0.964,185,2.676,224,1.258,225,1.696,277,2.867,318,4.546,319,4.546,320,4.546,321,5.709,322,5.061,324,4.546,445,3.482,446,6.813,447,4.08,448,4.08]],["title/classes/IdDto.html",[0,0.03,449,2.447]],["body/classes/IdDto.html",[0,0.048,2,1.572,3,0.278,4,0.246,5,0.246,13,0.453,14,1.418,21,0.491,22,0.021,23,1.063,26,0.746,37,0.435,39,0.278,58,0.017,59,0.017,119,1.764,162,2.608,166,1.553,238,2.634,277,3.054,352,3.407,375,2.423,389,4.294,395,2.118,449,3.885,450,3.841,451,4.842,452,4.842,453,4.501,454,4.501,455,4.294,456,4.842,457,4.501]],["title/injectables/JwtAuthGuard.html",[156,2.241,224,0.844]],["body/injectables/JwtAuthGuard.html",[0,0.033,3,0.243,4,0.215,5,0.215,13,0.395,15,1.228,16,1.535,21,0.567,22,0.022,26,0.861,31,1.535,32,1.452,33,1.161,37,0.475,39,0.243,58,0.015,59,0.015,100,0.929,156,3.26,165,2.691,166,0.982,169,2.036,200,2.691,224,1.228,225,1.634,229,2.116,262,1.975,429,2.798,443,1.975,458,4.97,459,2.975,460,5.197,461,5.197,462,3.93,463,6.62,464,3.93,465,5.197,466,5.288,467,3.93,468,3.93,469,3.354,470,2.465,471,2.975,472,3.93,473,2.975,474,4.435,475,3.93,476,3.93,477,3.93,478,3.93]],["title/interfaces/JwtPayload.html",[245,2.241,424,1.681]],["body/interfaces/JwtPayload.html",[3,0.316,4,0.279,5,0.279,13,0.514,14,1.532,21,0.557,22,0.021,23,1.231,39,0.316,58,0.018,59,0.018,166,1.276,238,2.67,245,3.846,424,2.403,426,3.203,479,4.358,480,4.358]],["title/injectables/JwtStrategy.html",[186,2.241,224,0.844]],["body/injectables/JwtStrategy.html",[0,0.029,3,0.217,4,0.192,5,0.192,13,0.353,15,1.138,16,1.422,21,0.525,22,0.022,26,0.798,31,1.422,32,1.345,33,1.036,37,0.512,39,0.217,58,0.014,59,0.014,100,0.829,143,3.295,166,1.203,169,1.375,186,3.02,198,2.403,207,2.994,224,1.138,225,1.458,229,2.592,245,3.711,257,2.994,258,2.994,260,3.02,269,5.049,272,2.655,429,2.592,430,3.711,431,2.201,443,1.763,470,2.201,473,2.655,481,2.994,482,4.109,483,3.02,484,3.508,485,5.915,486,3.508,487,4.814,488,4.814,489,3.508,490,2.994,491,3.508,492,2.994,493,2.994,494,3.508,495,3.508,496,2.994,497,2.655,498,3.508,499,3.508,500,3.508,501,3.508,502,3.508,503,3.508,504,3.508,505,3.508]],["title/injectables/LocalAuthGuard.html",[159,2.447,224,0.844]],["body/injectables/LocalAuthGuard.html",[0,0.043,3,0.314,4,0.278,5,0.278,22,0.021,37,0.469,39,0.314,58,0.018,59,0.018,100,1.201,159,4.188,224,1.445,225,2.114,429,3.292,459,3.849,469,4.339,470,3.189,506,4.339,507,6.115]],["title/injectables/LocalStrategy.html",[187,2.241,224,0.844]],["body/injectables/LocalStrategy.html",[0,0.033,3,0.246,4,0.218,5,0.218,13,0.401,15,1.239,16,1.548,21,0.572,22,0.022,23,1.245,26,0.869,31,1.548,32,1.465,33,1.176,37,0.478,39,0.246,58,0.015,59,0.015,100,0.941,121,3.13,143,3.339,165,2.728,166,0.996,169,1.561,187,3.289,224,1.239,225,1.656,229,2.144,250,2.823,429,2.823,470,2.499,473,3.015,482,4.475,483,3.289,492,3.399,493,3.399,496,3.399,497,3.015,508,3.399,509,3.983,510,3.983,511,5.243,512,3.983,513,3.399,514,3.983,515,3.983]],["title/classes/LoginUserDto.html",[0,0.03,516,2.447]],["body/classes/LoginUserDto.html",[0,0.047,2,1.531,3,0.271,4,0.24,5,0.24,13,0.441,14,1.394,21,0.608,22,0.021,23,1.21,26,0.924,37,0.428,39,0.271,58,0.016,59,0.016,119,2.186,121,3.083,166,1.704,250,3.304,337,3.555,340,2.75,341,3.002,351,2.75,395,2.063,455,4.223,516,3.821,517,5.237,518,4.384,519,3.741,520,3.741,521,5.579]],["title/injectables/LoginValidationMiddleware.html",[212,2.447,224,0.844]],["body/injectables/LoginValidationMiddleware.html",[0,0.048,3,0.232,4,0.205,5,0.205,11,1.886,13,0.378,15,0.887,16,1.489,18,2.515,21,0.409,22,0.022,26,0.622,31,1.109,32,1.049,33,1.109,37,0.487,39,0.232,40,1.659,58,0.015,59,0.015,100,0.887,155,2.175,212,3.453,224,1.191,225,1.561,262,2.533,268,2.842,275,2.021,316,4.857,395,1.767,430,3.816,431,2.355,443,2.533,483,2.355,490,3.204,516,2.571,522,4.302,523,3.204,524,5.041,525,5.041,526,5.192,527,5.192,528,6.084,529,3.754,530,3.754,531,5.041,532,3.754,533,3.754,534,3.204,535,3.754,536,3.754,537,3.754,538,3.754,539,3.754,540,3.204,541,3.204,542,3.754,543,3.754]],["title/classes/RegisterUserDto.html",[0,0.03,133,2.241]],["body/classes/RegisterUserDto.html",[0,0.045,2,1.42,3,0.251,4,0.222,5,0.222,13,0.409,14,1.328,21,0.646,22,0.021,23,1.252,26,0.981,37,0.454,39,0.251,58,0.016,59,0.016,119,2.32,121,2.975,133,3.334,166,1.745,250,3.187,298,3.714,337,3.43,340,3.334,341,2.784,351,2.55,356,3.47,391,5.053,395,1.913,396,4.055,397,3.47,519,3.47,520,3.47,544,5.358]],["title/classes/RegistryDates.html",[0,0.03,545,2.447]],["body/classes/RegistryDates.html",[0,0.037,2,1.525,3,0.27,4,0.239,5,0.239,13,0.44,14,1.391,21,0.668,22,0.021,26,1.015,37,0.335,38,1.711,39,0.27,58,0.016,59,0.016,119,2.4,414,5.228,417,5.228,418,5.228,545,3.812,546,5.505,547,3.727,548,5.813,549,6.126,550,4.367,551,6.126,552,4.367,553,6.126,554,4.367]],["title/classes/RemoveDto.html",[0,0.03,555,2.447]],["body/classes/RemoveDto.html",[0,0.049,2,1.654,3,0.293,4,0.259,5,0.259,13,0.477,14,1.464,21,0.517,22,0.021,26,0.785,37,0.449,39,0.293,58,0.017,59,0.017,119,1.856,166,1.589,340,2.971,393,4.998,395,2.229,555,4.011,556,4.042,557,4.354,558,4.011,559,4.736,560,4.736,561,4.433,562,4.736]],["title/entities/Session.html",[9,1.248,563,2.07]],["body/entities/Session.html",[0,0.029,3,0.215,4,0.19,5,0.19,9,1.671,13,0.35,14,1.196,21,0.714,22,0.022,23,1.196,26,1.058,37,0.42,38,1.362,39,0.215,57,4.104,58,0.014,59,0.014,67,1.596,74,3.005,75,4.084,119,2.502,129,3.432,141,2.381,142,1.872,238,2.144,270,4.084,273,4.141,420,2.632,443,2.404,548,4.084,563,2.772,564,2.632,565,2.967,566,4.669,567,4.669,568,2.967,569,3.477,570,3.477,571,4.084,572,3.477,573,3.477,574,3.477,575,4.084,576,3.277,577,3.477,578,2.967,579,3.477,580,4.785,581,2.967]],["title/controllers/SessionController.html",[107,1.923,582,2.447]],["body/controllers/SessionController.html",[0,0.044,3,0.326,4,0.288,5,0.288,9,1.839,22,0.021,37,0.404,39,0.326,58,0.018,59,0.018,100,1.244,107,2.835,109,2.835,111,3.607,582,4.277,583,4.495,584,5.266]],["title/modules/SessionModule.html",[78,1.179,93,2.241]],["body/modules/SessionModule.html",[0,0.035,3,0.26,4,0.23,5,0.23,9,1.899,22,0.022,37,0.518,39,0.26,58,0.016,59,0.016,67,1.053,78,1.988,80,1.861,81,2.267,82,2.642,83,2.642,84,2.267,85,3.489,86,2.642,93,4.232,95,3.411,96,2.642,97,2.642,99,2.44,100,0.995,109,2.927,142,2.267,188,3.632,203,2.884,204,2.116,218,3.188,582,4.124,585,4.211,586,4.211,587,4.211,588,4.211,589,4.211,590,4.211]],["title/injectables/SessionService.html",[188,1.923,224,0.844]],["body/injectables/SessionService.html",[0,0.022,3,0.161,4,0.143,5,0.143,9,1.931,13,0.263,15,1.221,16,1.151,18,2.789,21,0.564,22,0.022,23,1.273,26,0.856,31,1.526,32,1.444,33,1.377,34,2.258,37,0.461,38,1.024,39,0.161,40,2.06,58,0.011,59,0.011,64,1.958,67,0.974,74,2.906,100,0.617,123,3.912,129,3.242,141,1.789,142,1.406,166,1.165,169,1.527,188,2.098,204,1.313,205,1.514,224,0.921,225,1.086,229,2.098,231,4.115,234,3.529,238,2.025,241,1.639,253,1.978,254,2.995,255,2.23,256,2.23,259,1.978,260,2.924,262,2.342,273,4.675,275,1.406,285,2.23,416,2.23,483,2.445,566,3.326,567,3.326,591,2.23,592,3.979,593,2.23,594,4.949,595,4.662,596,2.612,597,3.897,598,2.612,599,2.612,600,2.612,601,3.897,602,2.612,603,2.612,604,2.612,605,2.612,606,2.612,607,2.612,608,2.612,609,3.897,610,2.612,611,2.612,612,2.612,613,2.612,614,2.612,615,2.612]],["title/classes/UpdateUserDto.html",[0,0.03,616,2.241]],["body/classes/UpdateUserDto.html",[0,0.046,2,1.498,3,0.265,4,0.234,5,0.234,13,0.432,14,1.375,21,0.468,22,0.021,23,1.03,26,0.71,37,0.466,39,0.265,58,0.016,59,0.016,64,2.154,67,1.375,119,1.68,155,2.484,162,2.484,166,1.518,238,2.596,349,2.484,351,2.69,352,3.246,375,2.308,389,4.164,395,2.018,429,2.961,451,4.695,452,4.695,455,4.164,456,4.695,616,3.451,617,4.695,618,5.5,619,4.288,620,4.288,621,4.288,622,4.288]],["title/entities/User.html",[67,0.893,563,2.07]],["body/entities/User.html",[0,0.022,3,0.162,4,0.143,5,0.143,9,2.027,13,0.263,14,0.976,15,1.103,21,0.712,22,0.022,23,1.205,24,2.786,26,1.046,37,0.425,38,1.026,39,0.162,57,3.877,58,0.011,59,0.011,62,3.197,67,0.976,111,2.674,119,2.475,121,2.345,169,1.026,205,1.517,236,3.197,238,1.829,250,2.513,280,1.793,286,3.984,298,2.928,299,2.928,360,3.332,373,4.189,394,3.984,398,3.332,399,2.235,403,5.274,420,2.955,443,2.916,545,4.118,557,1.793,563,2.262,564,1.982,568,3.332,571,3.332,575,3.332,576,3.975,578,3.332,581,2.235,592,3.984,623,2.235,624,2.618,625,2.618,626,2.618,627,3.904,628,2.618,629,2.618,630,2.618,631,2.618,632,2.618,633,4.723,634,2.618,635,2.618,636,3.904,637,3.904,638,2.618,639,2.618,640,2.618,641,2.618,642,2.618,643,2.618,644,3.904,645,2.618,646,2.618,647,2.618,648,2.618,649,2.618]],["title/controllers/UsersController.html",[107,1.923,650,2.447]],["body/controllers/UsersController.html",[0,0.016,3,0.115,4,0.102,5,0.102,13,0.187,15,1.304,16,0.884,21,0.664,22,0.022,23,0.945,26,0.782,31,1.272,32,1.204,33,1.394,37,0.407,39,0.115,45,2.845,53,3.633,55,3.819,58,0.009,59,0.009,64,1.505,67,1.587,100,0.44,107,1.002,109,1.002,111,1.274,116,2.267,119,1.85,136,2.556,139,2.556,155,1.735,161,1.588,162,1.078,165,1.274,166,0.465,169,1.85,236,1.274,238,2.423,275,1.612,277,2.856,280,2.051,299,2.962,349,2.923,375,3.636,443,2.535,449,4.003,526,2.556,555,2.95,557,3.455,558,2.051,576,2.051,616,3.461,650,2.051,651,1.588,652,4.03,653,3.676,654,2.556,655,1.588,656,1.861,657,2.995,658,1.861,659,4.308,660,2.995,661,5.845,662,1.861,663,1.861,664,2.995,665,2.995,666,5.517,667,4.308,668,1.861,669,1.861,670,1.861,671,4.709,672,2.995,673,5.517,674,5.045,675,5.304,676,2.995,677,1.861,678,1.861,679,1.861,680,1.861,681,3.676,682,1.861,683,1.861,684,1.861,685,2.995,686,1.861,687,1.861,688,1.861,689,1.861,690,1.861,691,1.588,692,1.588,693,2.178,694,1.588,695,5.045,696,4.308,697,2.995,698,5.045,699,1.861,700,1.861,701,1.861,702,1.861,703,2.995,704,1.861,705,1.861,706,1.861,707,1.861,708,1.861,709,1.861,710,1.861,711,1.861,712,1.861,713,1.861]],["title/modules/UsersModule.html",[78,1.179,94,2.241]],["body/modules/UsersModule.html",[0,0.033,3,0.242,4,0.214,5,0.214,9,1.811,22,0.022,37,0.526,39,0.242,58,0.015,59,0.015,67,0.979,78,1.919,80,1.731,81,2.109,82,2.457,83,2.457,84,2.109,85,3.368,86,2.457,89,3.832,94,4.297,95,3.253,96,2.457,97,2.457,99,3.004,100,0.925,104,3.343,109,2.792,203,2.682,204,1.968,205,2.269,218,2.965,650,3.981,693,3.832,694,3.343,714,3.343,715,3.343,716,3.917,717,3.917,718,3.343,719,3.551,720,3.917,721,3.917]],["title/injectables/UsersService.html",[224,0.844,693,2.07]],["body/injectables/UsersService.html",[0,0.033,3,0.123,4,0.109,5,0.109,13,0.2,15,1.154,16,0.933,18,2.847,21,0.533,22,0.022,23,1.091,26,0.861,31,1.442,32,1.364,33,1.442,37,0.399,38,0.78,39,0.123,40,2.573,43,1.831,53,2.164,55,3.696,58,0.009,59,0.009,64,2.453,67,1.734,100,0.47,155,1.831,166,0.497,169,2.215,204,1,224,0.747,225,0.827,229,1.701,230,1.698,231,3.065,234,2.392,238,2.464,241,3.063,251,1.698,253,1.506,259,1.506,260,1.248,261,2.697,262,2.249,263,1.698,264,2.697,265,2.697,266,2.697,267,4.436,268,3.934,275,2.409,277,1.071,278,4.824,279,1.698,280,2.164,300,2.697,301,2.697,302,2.697,303,2.697,349,3.011,375,1.071,557,3.065,558,2.692,616,3.546,652,3.82,653,3.82,654,2.697,655,2.697,671,4.436,691,1.698,692,1.698,693,1.831,718,1.698,722,1.698,723,3.16,724,3.16,725,3.16,726,3.16,727,1.99,728,1.99,729,4.476,730,4.476,731,1.99,732,3.16,733,1.99,734,5.197,735,3.16,736,1.99,737,3.16,738,1.99,739,1.99,740,3.16,741,1.99,742,1.99,743,1.99,744,1.99]],["title/classes/UsersSubscriber.html",[0,0.03,719,2.447]],["body/classes/UsersSubscriber.html",[0,0.027,2,1.131,3,0.2,4,0.177,5,0.177,11,2.288,13,0.326,15,1.244,16,1.345,18,2.759,21,0.574,22,0.022,26,0.947,31,1.555,32,1.471,33,1.555,37,0.404,38,1.269,39,0.2,40,2.012,58,0.013,59,0.013,67,1.505,142,1.743,166,1.138,169,1.269,185,3.223,229,2.451,260,2.856,262,2.646,291,3.886,527,2.763,563,3.052,593,2.763,594,5.33,719,3.119,745,2.763,746,5.267,747,4.553,748,4.553,749,5.714,750,3.238,751,4.553,752,5.714,753,3.238,754,5.714,755,4.553,756,5.714,757,3.238,758,3.238,759,3.238,760,4.553,761,3.238,762,3.238,763,3.238,764,3.238,765,2.763,766,3.238,767,3.238,768,3.238,769,4.553]],["title/coverage.html",[770,3.69]],["body/coverage.html",[0,0.054,1,1.598,5,0.115,6,1.802,7,2.797,8,1.802,9,1.427,10,2.506,17,1.136,21,0.23,22,0.021,43,1.223,58,0.01,59,0.01,60,1.598,61,1.802,62,1.446,64,1.061,67,1.021,68,1.598,69,1.802,70,2.506,74,0.993,84,1.136,107,2.199,108,1.446,110,1.802,118,1.324,133,1.324,143,1.061,145,1.598,148,1.598,156,1.324,159,1.446,185,1.061,186,1.324,187,1.324,188,1.136,209,1.446,212,1.446,224,1.435,226,1.802,245,1.324,254,1.223,275,1.136,317,1.802,335,1.802,336,1.802,337,1.918,345,1.598,349,1.223,350,1.802,351,2.901,359,5.51,396,2.267,407,1.598,408,1.802,424,2.176,425,1.446,427,2.506,428,2.506,436,1.802,439,1.598,445,1.802,449,1.446,450,1.802,458,1.802,459,2.506,471,1.598,479,1.802,480,1.802,481,1.802,506,1.802,508,1.802,516,1.446,517,1.802,522,1.802,523,1.802,544,1.802,545,1.446,546,1.802,547,1.802,555,1.446,556,1.802,561,1.598,563,1.918,565,1.802,582,1.446,583,1.802,591,1.802,616,1.324,617,1.802,623,1.802,650,1.446,651,1.802,693,1.223,719,1.446,722,1.802,745,1.802,770,1.598,771,2.111,772,2.111,773,2.111,774,4.085,775,2.111,776,1.802,777,6.691,778,6.85,779,2.826,780,1.802,781,1.802,782,1.802,783,5.934,784,5.33,785,5.33,786,2.826,787,3.486,788,2.826,789,5.064,790,2.111,791,2.111,792,3.947,793,1.802,794,1.802,795,3.947,796,1.802,797,1.802,798,1.802,799,1.802,800,1.802,801,2.111,802,3.311,803,2.111,804,2.111,805,2.111]],["title/dependencies.html",[81,2.313,806,2.547]],["body/dependencies.html",[0,0.045,22,0.022,38,1.61,58,0.016,59,0.016,81,2.212,100,0.971,162,2.38,198,2.814,200,2.814,202,3.11,204,2.064,272,4.05,329,3.506,395,1.933,431,2.577,470,2.577,497,4.504,513,3.506,534,3.506,807,4.108,808,4.108,809,5.95,810,4.108,811,4.108,812,4.108,813,4.108,814,4.108,815,4.108,816,4.108,817,4.108,818,4.108,819,4.108,820,5.35,821,4.108,822,5.35,823,4.108,824,4.108,825,4.108,826,4.108,827,4.108,828,4.108,829,4.108,830,4.108,831,4.108,832,4.108,833,4.108,834,4.108,835,4.108,836,4.108,837,4.108]],["title/miscellaneous/enumerations.html",[838,1.729,839,3.667]],["body/miscellaneous/enumerations.html",[13,0.493,22,0.021,25,3.709,58,0.018,59,0.018,67,1.493,373,4.523,378,5.1,379,4.523,380,5.1,633,5.1,838,2.836,839,4.177,840,5.1,841,5.975,842,5.975,843,5.975,844,5.975]],["title/miscellaneous/functions.html",[838,1.729,845,3.667]],["body/miscellaneous/functions.html",[13,0.555,22,0.019,58,0.019,59,0.019,84,3.653,800,4.705,838,3.194,845,4.705,846,5.513]],["title/index.html",[13,0.3,847,2.984,848,2.984]],["body/index.html",[4,0.214,22,0.021,58,0.015,59,0.015,231,2.682,309,2.965,354,4.961,375,2.109,405,4.426,765,3.343,770,2.965,849,3.917,850,3.917,851,5.185,852,3.917,853,3.917,854,3.917,855,3.917,856,3.917,857,3.917,858,5.813,859,3.917,860,3.917,861,6.746,862,3.917,863,3.917,864,3.917,865,6.614,866,3.917,867,3.917,868,5.185,869,3.917,870,3.343,871,3.917,872,3.917,873,5.185,874,3.917,875,3.917,876,3.917,877,5.185,878,5.185,879,3.917,880,3.917,881,3.917,882,3.917,883,3.917,884,3.917,885,3.917,886,3.917,887,3.917,888,3.917,889,3.917,890,3.917,891,3.917,892,3.917,893,3.917,894,3.343,895,3.917,896,3.917,897,3.917,898,3.917,899,3.917,900,3.917,901,3.343]],["title/modules.html",[80,2.154]],["body/modules.html",[22,0.018,58,0.018,59,0.018,79,3.38,80,2.181,89,2.859,90,3.096,91,3.096,92,3.096,93,3.096,94,3.096,309,5.099,902,6.737,903,6.737,904,7.107,905,6.474,906,6.474]],["title/overview.html",[907,4.16]],["body/overview.html",[2,1.291,22,0.021,58,0.015,59,0.015,78,1.22,79,4.878,80,1.633,81,1.989,82,2.318,83,2.318,84,1.989,85,2.141,86,2.318,87,3.154,88,3.154,89,4.104,90,3.542,91,3.542,92,3.542,93,3.96,94,4.171,95,3.129,96,2.318,97,2.318,109,1.989,143,2.837,182,3.154,183,3.154,184,3.154,185,3.037,186,3.542,187,3.542,188,3.254,225,1.536,328,3.154,386,3.154,426,2.318,564,2.797,693,3.271,714,3.154,715,3.154,907,3.154,908,3.695,909,3.695,910,3.695,911,3.695]],["title/properties.html",[14,1.074,806,2.547]],["body/properties.html",[14,1.346,22,0.021,58,0.019,59,0.019,375,2.9,437,4.078,894,4.598,901,4.598,912,5.387,913,5.387,914,5.387,915,5.387]],["title/miscellaneous/variables.html",[838,1.729,916,3.667]],["body/miscellaneous/variables.html",[13,0.17,15,1.256,17,1.489,21,0.443,22,0.022,23,0.996,24,3.507,25,3.634,46,1.058,50,1.277,58,0.008,59,0.008,67,1.122,74,2.589,129,2.815,145,2.094,148,3.078,169,2.156,241,2.205,262,2.422,277,2.189,288,2.094,337,2.6,345,2.094,353,2.361,359,3.078,395,1.302,396,3.073,430,2.205,437,3.078,439,2.094,443,2.558,466,3,471,2.094,474,1.44,483,1.735,540,1.44,541,1.44,558,3.073,561,2.094,576,1.894,681,1.44,776,1.44,779,1.44,780,1.44,781,2.361,782,1.44,786,1.44,787,3.83,788,3.83,789,3,792,3.83,793,3,794,3,795,3.83,796,3,797,3,798,1.44,799,1.44,838,0.978,840,1.44,870,1.44,916,1.44,917,1.687,918,1.687,919,5.502,920,2.766,921,2.766,922,1.687,923,1.687,924,1.687,925,1.687,926,5.091,927,1.687,928,1.687,929,1.687,930,1.687,931,1.687,932,1.687,933,1.687,934,1.687,935,3.515,936,3.515,937,3.515,938,1.687,939,1.687,940,1.687,941,1.687,942,2.766,943,1.687,944,2.766,945,5.314,946,2.766,947,2.766,948,1.687,949,2.766,950,2.766,951,4.066,952,2.766,953,1.687,954,1.687,955,1.687,956,1.687,957,1.687,958,1.687,959,1.687,960,1.687,961,1.687,962,1.687,963,1.687,964,1.687,965,3.515,966,1.687,967,2.766,968,1.687,969,1.687,970,1.687,971,1.687,972,1.687,973,1.687,974,1.687,975,4.066,976,4.488,977,2.766,978,1.687,979,1.687,980,1.687,981,2.766,982,2.766,983,2.766,984,2.766,985,1.687,986,2.766,987,1.687,988,2.766,989,1.687,990,3.515,991,1.687,992,1.687,993,1.687,994,1.687,995,1.687,996,1.687,997,1.687,998,1.687,999,1.687]]],"invertedIndex":[["",{"_index":22,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":359,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":912,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":825,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":834,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":837,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":824,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":828,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":778,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":785,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":783,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":784,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":774,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":802,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":775,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":829,"title":{},"body":{"dependencies.html":{}}}],["1.0.16",{"_index":821,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":808,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":791,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":328,"title":{},"body":{"injectables/BcryptService.html":{},"overview.html":{}}}],["10.0.0",{"_index":809,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":817,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":814,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":811,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":790,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":610,"title":{},"body":{"injectables/SessionService.html":{}}}],["127.0.0.1",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["13",{"_index":910,"title":{},"body":{"overview.html":{}}}],["17.13.3",{"_index":827,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":909,"title":{},"body":{"overview.html":{}}}],["20",{"_index":370,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["200",{"_index":666,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":659,"title":{},"body":{"controllers/UsersController.html":{}}}],["24",{"_index":608,"title":{},"body":{"injectables/SessionService.html":{}}}],["3",{"_index":386,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.2.2",{"_index":810,"title":{},"body":{"dependencies.html":{}}}],["30",{"_index":360,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["4",{"_index":911,"title":{},"body":{"overview.html":{}}}],["4.0.1",{"_index":822,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":819,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":823,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":627,"title":{},"body":{"entities/User.html":{}}}],["6/7",{"_index":804,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":609,"title":{},"body":{"injectables/SessionService.html":{}}}],["7",{"_index":908,"title":{},"body":{"overview.html":{}}}],["7.4.0",{"_index":816,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":836,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":369,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["8.12.0",{"_index":831,"title":{},"body":{"dependencies.html":{}}}],["85",{"_index":803,"title":{},"body":{"coverage.html":{}}}],["9\\.]+)[\\);]/.exec(useragent)?.[1",{"_index":987,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._]+)[\\);]/.exec(useragent)?.[1",{"_index":993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":368,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":446,"title":{},"body":{"injectables/HashingService.html":{}}}],["account",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":54,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["activate",{"_index":378,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["activate'})@isoptional()@isenum(userstatus",{"_index":381,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["add",{"_index":7,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"coverage.html":{}}}],["addrelationshiptosessionanduser1719672459617",{"_index":1,"title":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"coverage.html":{}}}],["address",{"_index":353,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["addroletouser1719388025258",{"_index":60,"title":{"classes/AddRoleToUser1719388025258.html":{}},"body":{"classes/AddRoleToUser1719388025258.html":{},"coverage.html":{}}}],["addsessionentity1719672378417",{"_index":68,"title":{"classes/AddSessionEntity1719672378417.html":{}},"body":{"classes/AddSessionEntity1719672378417.html":{},"coverage.html":{}}}],["admin",{"_index":844,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["agent",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.decorator",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{}}}],["agent.decorator.ts",{"_index":781,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["alias",{"_index":614,"title":{},"body":{"injectables/SessionService.html":{}}}],["alter",{"_index":42,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{}}}],["amazing",{"_index":884,"title":{},"body":{"index.html":{}}}],["android",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["android/.test(useragent",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apioperation",{"_index":695,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":696,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":389,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":352,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional",{"_index":390,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional({description",{"_index":357,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apipropertyoptional({enum",{"_index":374,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":697,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":698,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":700,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":863,"title":{},"body":{"index.html":{}}}],["app_guard",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_pipe",{"_index":344,"title":{},"body":{"modules/CommonModule.html":{}}}],["application",{"_index":703,"title":{},"body":{"controllers/UsersController.html":{}}}],["application'})@apiresponse({status",{"_index":665,"title":{},"body":{"controllers/UsersController.html":{}}}],["applications",{"_index":857,"title":{},"body":{"index.html":{}}}],["applydecorators(defaultisboolean(validationoptions",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":79,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":18,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["auth",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":459,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:11",{"_index":467,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:7",{"_index":464,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["auth/auth.service",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/config/jwt.config",{"_index":494,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":472,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/dto/login",{"_index":532,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["auth/hashing/hashing.service",{"_index":759,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["authcontroller",{"_index":108,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":469,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":460,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":507,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":89,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":894,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":143,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":906,"title":{},"body":{"modules.html":{}}}],["await",{"_index":40,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["backers",{"_index":885,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":530,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["badrequestexception(errors",{"_index":543,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["bcrypt",{"_index":329,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":334,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.gensalt(roundssalt",{"_index":332,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.hash(data",{"_index":333,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcryptservice",{"_index":209,"title":{"injectables/BcryptService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"coverage.html":{}}}],["beforeinsert",{"_index":747,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeinsert(event",{"_index":751,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":748,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate(event",{"_index":755,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["between",{"_index":358,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["body",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":558,"title":{},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["boolean.decorator",{"_index":562,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator.ts",{"_index":787,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":904,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":902,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":321,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["building",{"_index":852,"title":{},"body":{"index.html":{}}}],["buildmessage",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["business",{"_index":725,"title":{},"body":{"injectables/UsersService.html":{}}}],["canactivate",{"_index":461,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":465,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":637,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["changepassword",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":118,"title":{"classes/ChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["character",{"_index":76,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["charter",{"_index":385,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["charters",{"_index":361,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["check",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["checking",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{}}}],["checks",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":0,"title":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{}},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":87,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":88,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_sessionmodule",{"_index":585,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_sessionmodule_providers",{"_index":586,"title":{},"body":{"modules/SessionModule.html":{}}}],["cluster_usersmodule",{"_index":714,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":716,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":715,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":57,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["column(undefined",{"_index":631,"title":{},"body":{"entities/User.html":{}}}],["column({length",{"_index":626,"title":{},"body":{"entities/User.html":{}}}],["column({select",{"_index":629,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":568,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column({unique",{"_index":578,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["common/common.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["common/decorators/validators/is",{"_index":340,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{}}}],["common/dto/id.dto",{"_index":689,"title":{},"body":{"controllers/UsersController.html":{}}}],["common/dto/remove.dto",{"_index":690,"title":{},"body":{"controllers/UsersController.html":{}}}],["common/embedded/registry",{"_index":641,"title":{},"body":{"entities/User.html":{}}}],["common/enums/user",{"_index":398,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["common/interfaces/custom",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["common/interfaces/device.interface",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["common/interfaces/jwt",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["commonmodule",{"_index":90,"title":{"modules/CommonModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CommonModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":318,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compare(data",{"_index":320,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compodoc/compodoc",{"_index":807,"title":{},"body":{"dependencies.html":{}}}],["config/database.config",{"_index":434,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/jwt.config",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":441,"title":{},"body":{"modules/EnvModule.html":{}}}],["configtype",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configure",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{}}}],["connect",{"_index":723,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('user",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constraint",{"_index":47,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["constructor",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(authservice",{"_index":509,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(datasource",{"_index":593,"title":{},"body":{"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(jwtconfiguration",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":462,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["consumer",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(loginvalidationmiddleware).forroutes('auth/login",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["context",{"_index":468,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.getclass",{"_index":477,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":476,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["controller",{"_index":107,"title":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('session",{"_index":584,"title":{},"body":{"controllers/SessionController.html":{}}}],["controller('users",{"_index":699,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["coverage",{"_index":770,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cpu",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":64,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{},"injectables/AuthService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["create(@body",{"_index":701,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":655,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(userid",{"_index":597,"title":{},"body":{"injectables/SessionService.html":{}}}],["created",{"_index":660,"title":{},"body":{"controllers/UsersController.html":{}}}],["createdat",{"_index":414,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"classes/RegistryDates.html":{}}}],["createdatecolumn",{"_index":549,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createparamdecorator",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":657,"title":{},"body":{"controllers/UsersController.html":{}}}],["createuserdto",{"_index":349,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserentity1719238220284",{"_index":407,"title":{"classes/CreateUserEntity1719238220284.html":{}},"body":{"classes/CreateUserEntity1719238220284.html":{},"coverage.html":{}}}],["ctx",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["currentpassword",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{}}}],["customrequest",{"_index":425,"title":{"interfaces/CustomRequest.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["customuser",{"_index":254,"title":{"interfaces/CustomUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionService.html":{},"coverage.html":{}}}],["data",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiparam({name",{"_index":686,"title":{},"body":{"controllers/UsersController.html":{}}}],["data_source_database",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_host",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_password",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_port",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_url",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_username",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":730,"title":{},"body":{"injectables/UsersService.html":{}}}],["database/database.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{}}}],["databaseconfig",{"_index":433,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":91,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":594,"title":{},"body":{"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["datasource.subscribers.push(this",{"_index":761,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["date",{"_index":548,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{}}}],["date().setmilliseconds(31",{"_index":607,"title":{},"body":{"injectables/SessionService.html":{}}}],["date(new",{"_index":606,"title":{},"body":{"injectables/SessionService.html":{}}}],["dates.embedded",{"_index":642,"title":{},"body":{"entities/User.html":{}}}],["dates.embedded.ts",{"_index":547,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["dates.embedded.ts:11",{"_index":552,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:5",{"_index":550,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:8",{"_index":554,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deactivate",{"_index":379,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"miscellaneous/enumerations.html":{}}}],["declarations",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["decorators/ipaddress.decorator",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user.decorator",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["default",{"_index":24,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":26,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["delete",{"_index":53,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":711,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({description",{"_index":679,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteat",{"_index":418,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"classes/RegistryDates.html":{}}}],["deletedatecolumn",{"_index":551,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dependencies",{"_index":81,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":375,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":864,"title":{},"body":{"index.html":{}}}],["device",{"_index":74,"title":{"interfaces/Device.html":{}},"body":{"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/Device.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["disable",{"_index":763,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["documentation",{"_index":771,"title":{},"body":{"coverage.html":{}}}],["doesn't",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["down",{"_index":19,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["down(queryrunner",{"_index":28,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["drop",{"_index":56,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["dto/change",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":691,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":692,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":874,"title":{},"body":{"index.html":{}}}],["eachprefix",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["efficient",{"_index":853,"title":{},"body":{"index.html":{}}}],["email",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["enableimplicitconversion",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["encrypted",{"_index":322,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["entities",{"_index":564,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/session.entity",{"_index":588,"title":{},"body":{"modules/SessionModule.html":{}}}],["entities/user.entity",{"_index":718,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":563,"title":{"entities/Session.html":{},"entities/User.html":{}},"body":{"entities/Session.html":{},"entities/User.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["entity.ts",{"_index":70,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{},"coverage.html":{}}}],["entity.ts:16",{"_index":72,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{}}}],["entity.ts:25",{"_index":409,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["entity.ts:4",{"_index":71,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["entity.ts:6",{"_index":73,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["entitysubscriberinterface",{"_index":746,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["enum",{"_index":403,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["enum('admin",{"_index":66,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{}}}],["enumerations",{"_index":839,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.constants",{"_index":440,"title":{},"body":{"modules/EnvModule.html":{}}}],["env/env.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["env_validation_schema",{"_index":439,"title":{},"body":{"modules/EnvModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["envmodule",{"_index":92,"title":{"modules/EnvModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EnvModule.html":{},"modules.html":{},"overview.html":{}}}],["error",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["errors",{"_index":538,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["errors.length",{"_index":542,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["eslint",{"_index":762,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["eslint/no",{"_index":766,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["event",{"_index":754,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["eventsubscriber",{"_index":760,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["example",{"_index":354,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["exec(useragent)?.[2",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":466,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["expandvariables",{"_index":442,"title":{},"body":{"modules/EnvModule.html":{}}}],["expired",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["expirydate",{"_index":566,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["exports",{"_index":86,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":431,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["extends",{"_index":429,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{}}}],["extractjwt",{"_index":495,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":500,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["failure",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":576,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":667,"title":{},"body":{"controllers/UsersController.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["find",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":653,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":654,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":706,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(id",{"_index":732,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(undefined",{"_index":669,"title":{},"body":{"controllers/UsersController.html":{}}}],["fk_e1dde0bd0402cc9b1967c40a1b3",{"_index":48,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["forbidnonwhitelisted",{"_index":541,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":49,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["form",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["format",{"_index":674,"title":{},"body":{"controllers/UsersController.html":{}}}],["forwarded",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":851,"title":{},"body":{"index.html":{}}}],["function",{"_index":801,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":845,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":705,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({description",{"_index":670,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({description",{"_index":663,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@user('id",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile(userid",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsalt",{"_index":331,"title":{},"body":{"injectables/BcryptService.html":{}}}],["getting",{"_index":847,"title":{"index.html":{}},"body":{}}],["graph",{"_index":905,"title":{},"body":{"modules.html":{}}}],["grow",{"_index":881,"title":{},"body":{"index.html":{}}}],["guards/jwt",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/local",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["hash",{"_index":319,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hash(data",{"_index":324,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashing.service",{"_index":330,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt.service",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["hashing/hashing.service",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["hashingservice",{"_index":185,"title":{"injectables/HashingService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["here",{"_index":891,"title":{},"body":{"index.html":{}}}],["httpcode",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":171,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@useguards(jwtauthguard)@post('change",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":898,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":672,"title":{},"body":{"controllers/UsersController.html":{}}}],["iddto",{"_index":449,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["identifier",{"_index":772,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":11,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["imports",{"_index":99,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":365,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["inject",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["inject(jwtconfig.key",{"_index":498,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":224,"title":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(session",{"_index":604,"title":{},"body":{"injectables/SessionService.html":{}}}],["injectrepository(user",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["insertevent",{"_index":752,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["installation",{"_index":860,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":862,"title":{},"body":{"index.html":{}}}],["intel|ppc",{"_index":988,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interface",{"_index":424,"title":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":426,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["invalid",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["ios",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ip",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["ip.split(',')[0].replace",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipaddress",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iphone",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_password_key",{"_index":793,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":471,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_username_key",{"_index":796,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":561,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":648,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":391,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":392,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":404,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["isnotempty",{"_index":521,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isstring",{"_index":518,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":393,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["isoptional()@isboolean",{"_index":559,"title":{},"body":{"classes/RemoveDto.html":{}}}],["ispassword",{"_index":337,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispassword(value",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispublic",{"_index":474,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":455,"title":{},"body":{"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isusername",{"_index":396,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isusername(value",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuuid",{"_index":456,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["joi",{"_index":826,"title":{},"body":{"dependencies.html":{}}}],["joi.number().required",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["join",{"_index":887,"title":{},"body":{"index.html":{}}}],["json",{"_index":75,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"entities/Session.html":{}}}],["jwt",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_secret_key",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":156,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconfiguration",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.secret",{"_index":502,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":499,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":245,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":186,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["kamil",{"_index":895,"title":{},"body":{"index.html":{}}}],["key",{"_index":50,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/CreateUserEntity1719238220284.html":{},"miscellaneous/variables.html":{}}}],["legend",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":394,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["length(0",{"_index":406,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["license",{"_index":901,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":878,"title":{},"body":{"index.html":{}}}],["line",{"_index":764,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["linux",{"_index":996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linux/i.test(useragent",{"_index":994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":664,"title":{},"body":{"controllers/UsersController.html":{}}}],["listento",{"_index":749,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["local",{"_index":513,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":159,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":187,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(user",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":535,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["loginuserdto",{"_index":516,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["loginvalidationmiddleware",{"_index":212,"title":{"injectables/LoginValidationMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["lowercase",{"_index":383,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mac",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macos",{"_index":989,"title":{},"body":{"miscellaneous/variables.html":{}}}],["manytoone",{"_index":580,"title":{},"body":{"entities/Session.html":{}}}],["manytoone(undefined",{"_index":574,"title":{},"body":{"entities/Session.html":{}}}],["matches(value",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":59,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":833,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":729,"title":{},"body":{"injectables/UsersService.html":{}}}],["methods",{"_index":16,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["middlewareconsumer",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/login",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{}}}],["migrationinterface",{"_index":12,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["miscellaneous",{"_index":838,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":877,"title":{},"body":{"index.html":{}}}],["mode",{"_index":868,"title":{},"body":{"index.html":{}}}],["module",{"_index":78,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":80,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohamadreza",{"_index":914,"title":{},"body":{"properties.html":{}}}],["mohmadreza",{"_index":362,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["more",{"_index":890,"title":{},"body":{"index.html":{}}}],["mosalli",{"_index":915,"title":{},"body":{"properties.html":{}}}],["myśliwiec",{"_index":896,"title":{},"body":{"index.html":{}}}],["name",{"_index":15,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["need",{"_index":452,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["nest",{"_index":858,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":900,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":100,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":812,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":470,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":815,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":531,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nestmodule",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{}}}],["next",{"_index":527,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["nextfunction",{"_index":528,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["node.js",{"_index":850,"title":{},"body":{"index.html":{}}}],["node_env",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["notfoundexception",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["now",{"_index":416,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"injectables/SessionService.html":{}}}],["nt",{"_index":992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt/.test(useragent",{"_index":991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":46,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":575,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["number",{"_index":326,"title":{},"body":{"injectables/BcryptService.html":{}}}],["numbers",{"_index":384,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["numbers,charters",{"_index":366,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["obj",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["onetomany",{"_index":644,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":635,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":879,"title":{},"body":{"index.html":{}}}],["operations",{"_index":726,"title":{},"body":{"injectables/UsersService.html":{}}}],["optional",{"_index":32,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["os",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":740,"title":{},"body":{"injectables/UsersService.html":{}}}],["out",{"_index":97,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":907,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":567,"title":{},"body":{"entities/Session.html":{},"injectables/SessionService.html":{}}}],["ownerid",{"_index":44,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["package",{"_index":806,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":675,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":31,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["params",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partialtype",{"_index":621,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":618,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["passport",{"_index":497,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":503,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["password.decorator",{"_index":341,"title":{},"body":{"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["password.decorator.ts",{"_index":792,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["password.dto.ts",{"_index":336,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:5",{"_index":338,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":339,"title":{},"body":{"classes/ChangePasswordDto.html":{}}}],["passwordregex",{"_index":794,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":688,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":708,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({description",{"_index":684,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":480,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":830,"title":{},"body":{"dependencies.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":422,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["plaintoinstance",{"_index":533,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["plaintoinstance(loginuserdto",{"_index":536,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["please",{"_index":888,"title":{},"body":{"index.html":{}}}],["possible",{"_index":376,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["post",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":179,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({description",{"_index":656,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["preform",{"_index":724,"title":{},"body":{"injectables/UsersService.html":{}}}],["primary",{"_index":423,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["primarygeneratedcolumn",{"_index":581,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":571,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["private",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["process.env.node_env",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":457,"title":{},"body":{"classes/IdDto.html":{}}}],["processed'})@isstring()@isuuid",{"_index":453,"title":{},"body":{"classes/IdDto.html":{}}}],["production",{"_index":870,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":849,"title":{},"body":{"index.html":{}}}],["project",{"_index":880,"title":{},"body":{"index.html":{}}}],["promise",{"_index":34,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/HashingService.html":{},"injectables/SessionService.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"properties.html":{}}}],["property",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["propertydecorator",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["providers",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["public",{"_index":17,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"classes/CreateUserEntity1719238220284.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public\".\"user_role_enum",{"_index":65,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{}}}],["public\".\"user_status_enum",{"_index":413,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["public()@httpcode(httpstatus.ok)@useguards(localauthguard)@post('login",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{}}}],["query",{"_index":681,"title":{},"body":{"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["queryrunner",{"_index":29,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["queryrunner.query",{"_index":41,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["raw",{"_index":603,"title":{},"body":{"injectables/SessionService.html":{}}}],["raw((alias",{"_index":613,"title":{},"body":{"injectables/SessionService.html":{}}}],["read",{"_index":889,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["recover",{"_index":647,"title":{},"body":{"entities/User.html":{}}}],["references",{"_index":51,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["reflect",{"_index":832,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":463,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["register",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{}}}],["register(@body",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":133,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registrydates",{"_index":545,"title":{"classes/RegistryDates.html":{}},"body":{"classes/RegistryDates.html":{},"entities/User.html":{},"coverage.html":{}}}],["relations",{"_index":615,"title":{},"body":{"injectables/SessionService.html":{}}}],["relationship",{"_index":8,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"coverage.html":{}}}],["remove",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":712,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":735,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":678,"title":{},"body":{"controllers/UsersController.html":{}}}],["removedto",{"_index":555,"title":{"classes/RemoveDto.html":{}},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["replace(/_/g",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["repository",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["req",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["req.body",{"_index":537,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["req.headers?.authorization.replace('bearer",{"_index":505,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":430,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['x",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.interface",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["request.interface.ts",{"_index":428,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["request.user",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["required",{"_index":673,"title":{},"body":{"controllers/UsersController.html":{}}}],["res",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["reset",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":526,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["results",{"_index":58,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":33,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["reviewing",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{}}}],["role",{"_index":62,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{},"injectables/AuthService.html":{},"entities/User.html":{},"coverage.html":{}}}],["role.enum",{"_index":643,"title":{},"body":{"entities/User.html":{}}}],["role.enum.ts",{"_index":841,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roundssalt",{"_index":325,"title":{},"body":{"injectables/BcryptService.html":{}}}],["run",{"_index":865,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":835,"title":{},"body":{"dependencies.html":{}}}],["save",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["scalable",{"_index":854,"title":{},"body":{"index.html":{}}}],["secretorkey",{"_index":501,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{}}}],["send",{"_index":685,"title":{},"body":{"controllers/UsersController.html":{}}}],["server",{"_index":855,"title":{},"body":{"index.html":{}}}],["session",{"_index":9,"title":{"entities/Session.html":{}},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["session.controller",{"_index":589,"title":{},"body":{"modules/SessionModule.html":{}}}],["session.owner",{"_index":636,"title":{},"body":{"entities/User.html":{}}}],["session.service",{"_index":590,"title":{},"body":{"modules/SessionModule.html":{}}}],["session/entities/session.entity",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["session/session.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["session/session.service",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessioncontroller",{"_index":582,"title":{"controllers/SessionController.html":{}},"body":{"controllers/SessionController.html":{},"modules/SessionModule.html":{},"coverage.html":{}}}],["sessionmodule",{"_index":93,"title":{"modules/SessionModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionrepository",{"_index":595,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessions",{"_index":592,"title":{},"body":{"injectables/SessionService.html":{},"entities/User.html":{}}}],["sessions(undefined",{"_index":599,"title":{},"body":{"injectables/SessionService.html":{}}}],["sessionservice",{"_index":188,"title":{"injectables/SessionService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["side",{"_index":856,"title":{},"body":{"index.html":{}}}],["single",{"_index":671,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["soft",{"_index":557,"title":{},"body":{"classes/RemoveDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionController.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"index.html":{}}}],["spacial",{"_index":367,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["sponsors",{"_index":883,"title":{},"body":{"index.html":{}}}],["src/.../common.constants.ts",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.constants.ts",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipaddress.decorator.ts",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":846,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../to",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":840,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":98,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:48",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:55",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:43",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:115",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:19",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:41",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:56",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:65",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:88",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/ipaddress.decorator.ts",{"_index":776,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":779,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user",{"_index":780,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":782,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/change",{"_index":335,"title":{},"body":{"classes/ChangePasswordDto.html":{},"coverage.html":{}}}],["src/auth/dto/login",{"_index":517,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":544,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":458,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":506,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/hashing/bcrypt.service.ts",{"_index":317,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/auth/hashing/bcrypt.service.ts:12",{"_index":323,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/auth/hashing/bcrypt.service.ts:7",{"_index":327,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/auth/hashing/hashing.service.ts",{"_index":445,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/auth/hashing/hashing.service.ts:5",{"_index":448,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/auth/hashing/hashing.service.ts:6",{"_index":447,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/auth/middlewares/login",{"_index":522,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":481,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:11",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:24",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":508,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":512,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:7",{"_index":510,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/common/common.module.ts",{"_index":342,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/common/decorators/transforms/to",{"_index":786,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/decorators/validators/is",{"_index":789,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/common/dto/id.dto.ts",{"_index":450,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/common/dto/id.dto.ts:10",{"_index":454,"title":{},"body":{"classes/IdDto.html":{}}}],["src/common/dto/remove.dto.ts",{"_index":556,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{}}}],["src/common/dto/remove.dto.ts:7",{"_index":560,"title":{},"body":{"classes/RemoveDto.html":{}}}],["src/common/embedded/registry",{"_index":546,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["src/common/enums/user",{"_index":843,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/common/interfaces/custom",{"_index":427,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/common/interfaces/device.interface.ts",{"_index":436,"title":{},"body":{"interfaces/Device.html":{},"coverage.html":{}}}],["src/common/interfaces/jwt",{"_index":479,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/common/util/common.constants.ts",{"_index":798,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/database/database.module.ts",{"_index":432,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/database/migrations/1719238220284",{"_index":408,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"coverage.html":{}}}],["src/database/migrations/1719388025258",{"_index":61,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{},"coverage.html":{}}}],["src/database/migrations/1719672378417",{"_index":69,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"coverage.html":{}}}],["src/database/migrations/1719672459617",{"_index":6,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"coverage.html":{}}}],["src/env/env.constants.ts",{"_index":799,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/env/env.module.ts",{"_index":438,"title":{},"body":{"modules/EnvModule.html":{}}}],["src/main.ts",{"_index":800,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/session/entities/session.entity.ts",{"_index":565,"title":{},"body":{"entities/Session.html":{},"coverage.html":{}}}],["src/session/entities/session.entity.ts:11",{"_index":579,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:14",{"_index":569,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:17",{"_index":573,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:20",{"_index":570,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:25",{"_index":577,"title":{},"body":{"entities/Session.html":{}}}],["src/session/entities/session.entity.ts:8",{"_index":572,"title":{},"body":{"entities/Session.html":{}}}],["src/session/session.controller.ts",{"_index":583,"title":{},"body":{"controllers/SessionController.html":{},"coverage.html":{}}}],["src/session/session.module.ts",{"_index":587,"title":{},"body":{"modules/SessionModule.html":{}}}],["src/session/session.service.ts",{"_index":591,"title":{},"body":{"injectables/SessionService.html":{},"coverage.html":{}}}],["src/session/session.service.ts:10",{"_index":596,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:19",{"_index":598,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:33",{"_index":602,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/session/session.service.ts:47",{"_index":600,"title":{},"body":{"injectables/SessionService.html":{}}}],["src/users/dto/create",{"_index":350,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":617,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":623,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:10",{"_index":625,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:13",{"_index":628,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":624,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:19",{"_index":640,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":630,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:25",{"_index":639,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":634,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:31",{"_index":632,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:36",{"_index":638,"title":{},"body":{"entities/User.html":{}}}],["src/users/subscribers/users.subscriber.ts",{"_index":745,"title":{},"body":{"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["src/users/subscribers/users.subscriber.ts:12",{"_index":750,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:20",{"_index":758,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:26",{"_index":753,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:31",{"_index":757,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/users.controller.ts",{"_index":651,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:109",{"_index":682,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:37",{"_index":662,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:49",{"_index":668,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:67",{"_index":677,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:85",{"_index":687,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":717,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":722,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":727,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:21",{"_index":728,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:38",{"_index":731,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":733,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:59",{"_index":738,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:82",{"_index":736,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":866,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":869,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":871,"title":{},"body":{"index.html":{}}}],["started",{"_index":848,"title":{"index.html":{}},"body":{}}],["starter",{"_index":859,"title":{},"body":{"index.html":{}}}],["statements",{"_index":773,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["status.enum",{"_index":399,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["status.enum.ts",{"_index":842,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":892,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":496,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":23,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["subscribers/users.subscriber",{"_index":720,"title":{},"body":{"modules/UsersModule.html":{}}}],["successfully",{"_index":661,"title":{},"body":{"controllers/UsersController.html":{}}}],["super",{"_index":473,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":478,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{},"modules.html":{}}}],["suspend",{"_index":380,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["svg",{"_index":903,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":43,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":805,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":405,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{}}}],["test'})@isoptional()@length(0",{"_index":363,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test:covsupport",{"_index":876,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":875,"title":{},"body":{"index.html":{}}}],["test@1234",{"_index":402,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@1234'})@ispassword",{"_index":371,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com",{"_index":400,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com'})@isemail",{"_index":355,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122",{"_index":401,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122'})@isusername",{"_index":387,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["tests",{"_index":873,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":882,"title":{},"body":{"index.html":{}}}],["thats",{"_index":451,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["this.authservice.changepassword(userid",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getprofile(userid",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwt",{"_index":504,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatelocal(email",{"_index":515,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.datasource.getrepository(session).findone",{"_index":612,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.findone(id",{"_index":742,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.compare(password",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.hash(user.password",{"_index":769,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.jwtservice.sign(payload",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":475,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registrydates.deleteat",{"_index":649,"title":{},"body":{"entities/User.html":{}}}],["this.sessionrepository.create",{"_index":605,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionrepository.save(session",{"_index":611,"title":{},"body":{"injectables/SessionService.html":{}}}],["this.sessionservice.create(user.id",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.validate(user.id",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":739,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["this.userrepository.findoneby",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.preload",{"_index":741,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":744,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.softremove(user",{"_index":743,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":702,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":704,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(id",{"_index":707,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":713,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":710,"title":{},"body":{"controllers/UsersController.html":{}}}],["throw",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{}}}],["timestamp",{"_index":415,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["toboolean",{"_index":788,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(obj[key",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionService.html":{}}}],["touch",{"_index":893,"title":{},"body":{"index.html":{}}}],["transform",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":534,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":443,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["twitter",{"_index":899,"title":{},"body":{"index.html":{}}}],["type",{"_index":21,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/ChangePasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":38,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"injectables/AuthService.html":{},"classes/CreateUserEntity1719238220284.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(databaseconfig.asprovider",{"_index":435,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":813,"title":{},"body":{"dependencies.html":{}}}],["types/bcrypt",{"_index":818,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":820,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":765,"title":{},"body":{"classes/UsersSubscriber.html":{},"index.html":{}}}],["unauthorizedexception",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/Device.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":420,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["unit",{"_index":872,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":913,"title":{},"body":{"properties.html":{}}}],["unused",{"_index":767,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["up",{"_index":20,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["up(queryrunner",{"_index":35,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["update",{"_index":55,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":709,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":737,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(undefined",{"_index":683,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":622,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updated'})@isstring()@isuuid",{"_index":619,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updatedat",{"_index":417,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{},"classes/RegistryDates.html":{}}}],["updatedatecolumn",{"_index":553,"title":{},"body":{"classes/RegistryDates.html":{}}}],["updateevent",{"_index":756,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["updateuserdto",{"_index":616,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":421,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":419,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["use",{"_index":524,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["use(req",{"_index":525,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["useclass",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{}}}],["useguards",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":67,"title":{"entities/User.html":{}},"body":{"classes/AddRoleToUser1719388025258.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserEntity1719238220284.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":52,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["user'})@apiresponse({status",{"_index":658,"title":{},"body":{"controllers/UsersController.html":{}}}],["user('id",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":351,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":520,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:11",{"_index":620,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:13",{"_index":356,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:21",{"_index":388,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":372,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":382,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:46",{"_index":364,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":519,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["user.password",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"classes/UsersSubscriber.html":{}}}],["user.status",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.status.tolowercase",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.ts",{"_index":10,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"coverage.html":{}}}],["user.ts:16",{"_index":63,"title":{},"body":{"classes/AddRoleToUser1719388025258.html":{}}}],["user.ts:17",{"_index":30,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{}}}],["user.ts:4",{"_index":27,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{}}}],["user.ts:6",{"_index":36,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{}}}],["user?.[data",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useragent",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userentity",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionService.html":{}}}],["username",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/CreateUserEntity1719238220284.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{}}}],["username.decorator",{"_index":397,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["username.decorator.ts",{"_index":795,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernamefield",{"_index":514,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernameregex",{"_index":797,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":633,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":646,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":652,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":721,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":694,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"modules/SessionModule.html":{},"injectables/SessionService.html":{},"classes/UsersSubscriber.html":{}}}],["users/users.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":650,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":94,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":693,"title":{"injectables/UsersService.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":719,"title":{"classes/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["userstatus",{"_index":373,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.activate",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstatus.deactivate",{"_index":645,"title":{},"body":{"entities/User.html":{}}}],["usevalue",{"_index":347,"title":{},"body":{"modules/CommonModule.html":{}}}],["using",{"_index":734,"title":{},"body":{"injectables/UsersService.html":{}}}],["util/common.constants",{"_index":346,"title":{},"body":{"modules/CommonModule.html":{}}}],["uuid",{"_index":45,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/CreateUserEntity1719238220284.html":{},"controllers/UsersController.html":{}}}],["uuid'})@apiquery({name",{"_index":680,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid'})@apiresponse({status",{"_index":676,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid_generate_v4",{"_index":410,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["valid",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionService.html":{},"miscellaneous/variables.html":{}}}],["validate(email",{"_index":511,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(logindto",{"_index":539,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validate(req",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userid",{"_index":601,"title":{},"body":{"injectables/SessionService.html":{}}}],["validateby",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatejwt",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(undefined",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal(email",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{}}}],["validation.middleware",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["validation.middleware.ts",{"_index":523,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["validation.middleware.ts:13",{"_index":529,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validation_pipe_options",{"_index":345,"title":{},"body":{"modules/CommonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":343,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipe(validation_pipe_options",{"_index":348,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipeoptions",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":444,"title":{},"body":{"modules/EnvModule.html":{}}}],["validator",{"_index":395,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":25,"title":{},"body":{"classes/AddRelationshipToSessionAndUser1719672459617.html":{},"classes/AddRoleToUser1719388025258.html":{},"classes/AddSessionEntity1719672378417.html":{},"injectables/BcryptService.html":{},"classes/CreateUserEntity1719238220284.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":377,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["variable",{"_index":777,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":916,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vars",{"_index":768,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["varying",{"_index":77,"title":{},"body":{"classes/AddSessionEntity1719672378417.html":{},"classes/CreateUserEntity1719238220284.html":{}}}],["varying(30",{"_index":412,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["varying(50",{"_index":411,"title":{},"body":{"classes/CreateUserEntity1719238220284.html":{}}}],["version",{"_index":437,"title":{},"body":{"interfaces/Device.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":195,"title":{},"body":{"modules/AuthModule.html":{}}}],["w][\\w.]{3,30",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":867,"title":{},"body":{"index.html":{}}}],["website",{"_index":897,"title":{},"body":{"index.html":{}}}],["whitelist",{"_index":540,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["windows",{"_index":990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["without",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{}}}],["works",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x/.test(useragent",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x11/i.test(useragent",{"_index":995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":861,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":886,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[@$!%*?&])[a",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/SessionModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddRelationshipToSessionAndUser1719672459617.html":{"url":"classes/AddRelationshipToSessionAndUser1719672459617.html","title":"class - AddRelationshipToSessionAndUser1719672459617","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRelationshipToSessionAndUser1719672459617\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1719672459617-add-relationship-to-session-and-user.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddRelationshipToSessionAndUser1719672459617'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1719672459617-add-relationship-to-session-and-user.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719672459617-add-relationship-to-session-and-user.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719672459617-add-relationship-to-session-and-user.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddRelationshipToSessionAndUser1719672459617 implements MigrationInterface {\n    name = 'AddRelationshipToSessionAndUser1719672459617'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD \"ownerId\" uuid NOT NULL\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\" FOREIGN KEY (\"ownerId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\"\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP COLUMN \"ownerId\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddRoleToUser1719388025258.html":{"url":"classes/AddRoleToUser1719388025258.html","title":"class - AddRoleToUser1719388025258","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddRoleToUser1719388025258\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1719388025258-add-role-to-user.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddRoleToUser1719388025258'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1719388025258-add-role-to-user.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719388025258-add-role-to-user.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719388025258-add-role-to-user.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddRoleToUser1719388025258 implements MigrationInterface {\n    name = 'AddRoleToUser1719388025258'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'USER')\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"user\"\n            ADD \"role\" \"public\".\"user_role_enum\" NOT NULL DEFAULT 'USER'\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"user\" DROP COLUMN \"role\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddSessionEntity1719672378417.html":{"url":"classes/AddSessionEntity1719672378417.html","title":"class - AddSessionEntity1719672378417","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddSessionEntity1719672378417\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1719672378417-add-session-entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AddSessionEntity1719672378417'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1719672378417-add-session-entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719672378417-add-session-entity.ts:16\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719672378417-add-session-entity.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class AddSessionEntity1719672378417 implements MigrationInterface {\n    name = 'AddSessionEntity1719672378417'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP COLUMN \"device\"\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD \"device\" json NOT NULL\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP COLUMN \"device\"\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD \"device\" character varying NOT NULL\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nAppModule -->\n\nEnvModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EnvModule\n                        \n                        \n                            SessionModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModule } from './common/common.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EnvModule } from './env/env.module';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { SessionModule } from './session/session.module';\n\n@Module({\n  imports: [\n    CommonModule,\n    DatabaseModule,\n    EnvModule,\n    AuthModule,\n    UsersModule,\n    SessionModule\n  ]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, changePasswordDto: ChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@UseGuards(JwtAuthGuard)@Post('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                changePasswordDto\n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserEntity, ip: string, device: Device)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:30\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards\n} from '@nestjs/common';\nimport { Device } from 'common/interfaces/device.interface';\nimport { User as UserEntity } from 'users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { IpAddress } from './decorators/ipAddress.decorator';\nimport { Public } from './decorators/public.decorator';\nimport { UserAgent } from './decorators/user-agent.decorator';\nimport { User } from './decorators/user.decorator';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiTags } from '@nestjs/swagger';\n\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  @Public()\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  login(\n    @User() user: UserEntity,\n    @IpAddress() ip: string,\n    @UserAgent() device: Device\n  ) {\n    return this.authService.login(user, ip, device);\n  }\n\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@User('id') userId: string) {\n    return this.authService.getProfile(userId);\n  }\n\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  changePassword(\n    @User('id') userId: string,\n    @Body() changePasswordDto: ChangePasswordDto\n  ) {\n    return this.authService.changePassword(userId, changePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nHashingService \n\nHashingService \n\n\n\nAuthModule\n\nAuthModule\n\nHashingService  -->\n\nAuthModule->HashingService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nAuthModule -->\n\nSessionService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingService\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:43\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from '../session/entities/session.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './config/jwt.config';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { BcryptService } from './hashing/bcrypt.service';\nimport { HashingService } from './hashing/hashing.service';\nimport { LoginValidationMiddleware } from './middlewares/login-validation.middleware';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { SessionService } from 'session/session.service';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User, Session]),\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n    ConfigModule.forFeature(jwtConfig)\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    {\n      provide: HashingService,\n      useClass: BcryptService\n    },\n    LocalStrategy,\n    JwtStrategy,\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard\n    },\n    SessionService\n  ],\n  exports: [HashingService]\n})\nexport class AuthModule implements NestModule {\n  configure(consumer: MiddlewareConsumer) {\n    consumer.apply(LoginValidationMiddleware).forRoutes('auth/login');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                            \n                                    Async\n                                validateLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingService: HashingService, sessionService: SessionService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, undefined: ChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:65\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            ChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(undefined: JwtPayload, jwtToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:115\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwtToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocal(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:88\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'common/interfaces/custom-request.interface';\nimport { Device } from 'common/interfaces/device.interface';\nimport { SessionService } from 'session/session.service';\nimport { Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { JwtPayload } from './../common/interfaces/jwt-payload.interface';\nimport { ChangePasswordDto } from './dto/change-password.dto';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { HashingService } from './hashing/hashing.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @InjectRepository(User) private readonly userRepository: Repository,\n    private readonly hashingService: HashingService,\n    private readonly sessionService: SessionService,\n    private readonly jwtService: JwtService\n  ) {}\n\n  async register(registerUserDto: RegisterUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...registerUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  async login(user: User, ip: string, device: Device) {\n    const payload = { id: user.id };\n    // generate jwt token\n    const token = this.jwtService.sign(payload);\n\n    // create new session\n    await this.sessionService.create(user.id, token, ip, device);\n\n    // return user data and jwt token\n    return {\n      ...user,\n      token: this.jwtService.sign(payload)\n    };\n  }\n\n  async getProfile(id: string) {\n    // Find user\n    const user = await this.userRepository.findOneBy({ id });\n\n    // Remove id form user object and return it\n    delete user.id;\n    return user;\n  }\n\n  async changePassword(\n    id: string,\n    { currentPassword, newPassword }: ChangePasswordDto\n  ) {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['password']\n    });\n\n    // Check valid password\n    const isMatch = await this.hashingService.compare(\n      currentPassword,\n      user.password\n    );\n\n    // If invalid password, handle it\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // If the new password is different from the current password\n    if (currentPassword !== newPassword)\n      await this.userRepository.update({ id }, { password: newPassword });\n  }\n\n  async validateLocal(email: string, password: string) {\n    // Find user with email or username\n    const user = await this.userRepository.findOne({\n      where: [{ email }, { username: email }],\n      select: ['id', 'role', 'status', 'password']\n    });\n\n    // If doesn't exists, handle it\n    if (!user) throw new NotFoundException('User not found');\n\n    // Check user status\n    // if (user.status !== UserStatus.ACTIVATE)\n    //   throw new UnauthorizedException(\n    //     `Your account is ${user.status.toLowerCase()} see support for reviewing your account`\n    //   );\n\n    // Check valid password\n    const isMatch = await this.hashingService.compare(password, user.password);\n\n    // If invalid password, handle it\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // Return user without password\n    delete user.password;\n    return user;\n  }\n\n  async validateJwt({ id }: JwtPayload, jwtToken: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, handle it\n    if (!user) throw new UnauthorizedException();\n\n    // Checking that the session has not expired\n    const session = await this.sessionService.validate(user.id, jwtToken);\n\n    // If it had expired, handle it\n    if (!session) throw new UnauthorizedException();\n\n    // return userId and session\n    const res: CustomUser = { id, session };\n\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/hashing/bcrypt.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/bcrypt.service.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer, roundsSalt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/bcrypt.service.ts:7\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                roundsSalt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingService } from './hashing.service';\n\n@Injectable()\nexport class BcryptService implements HashingService {\n  async hash(data: string | Buffer, roundsSalt: number = 10) {\n    const getSalt = await bcrypt.genSalt(roundsSalt);\n    return bcrypt.hash(data, getSalt);\n  }\n\n  compare(data: string | Buffer, encrypted: string) {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangePasswordDto.html":{"url":"classes/ChangePasswordDto.html","title":"class - ChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPassword\n                            \n                            \n                                    \n                                    Readonly\n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPassword } from 'common/decorators/validators/is-password.decorator';\n\nexport class ChangePasswordDto {\n  @IsPassword()\n  readonly currentPassword: string;\n\n  @IsPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/common/common.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { VALIDATION_PIPE_OPTIONS } from './util/common.constants';\n\n@Module({\n  providers: [\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe(VALIDATION_PIPE_OPTIONS)\n    }\n  ]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get valid email address', example: 'test@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name between 0 and 30 charters', example: 'mohmadreza test'})@IsOptional()@Length(0, 30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password include numbers,charters, spacial charters like: @#$%^!&*(_+)= & between 8 and 20 charters', example: 'test@1234'})@IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserStatus, description: 'Possible values is: 'ACTIVATE', 'DEACTIVATE' & 'SUSPEND'', example: 'ACTIVATE'})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username lowercase charters, numbers & spacial charter just _ & between 3 and 30 charters', example: 'test_122'})@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsOptional, Length } from 'class-validator';\nimport { IsPassword } from 'common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'common/decorators/validators/is-username.decorator';\nimport { UserStatus } from 'common/enums/user-status.enum';\n\nexport class CreateUserDto {\n  @ApiProperty({\n    description: 'Get valid email address',\n    example: 'test@gmail.com'\n  })\n  @IsEmail()\n  readonly email: string;\n\n  @ApiProperty({\n    description:\n      'Username lowercase charters, numbers & spacial charter just _ & between 3 and 30 charters',\n    example: 'test_122'\n  })\n  @IsUsername()\n  readonly username: string;\n\n  @ApiProperty({\n    description:\n      'Password include numbers,charters, spacial charters like: @#$%^!&*(_+)= & between 8 and 20 charters',\n    example: 'test@1234'\n  })\n  @IsPassword()\n  readonly password: string;\n\n  @ApiPropertyOptional({\n    enum: UserStatus,\n    description: \"Possible values is: 'ACTIVATE', 'DEACTIVATE' & 'SUSPEND'\",\n    example: 'ACTIVATE'\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  readonly status: UserStatus;\n\n  @ApiPropertyOptional({\n    description: 'Name between 0 and 30 charters',\n    example: 'mohmadreza test'\n  })\n  @IsOptional()\n  @Length(0, 30)\n  readonly name: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserEntity1719238220284.html":{"url":"classes/CreateUserEntity1719238220284.html","title":"class - CreateUserEntity1719238220284","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserEntity1719238220284\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/database/migrations/1719238220284-create-user-entity.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'CreateUserEntity1719238220284'\n                    \n                \n                    \n                        \n                                Defined in src/database/migrations/1719238220284-create-user-entity.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719238220284-create-user-entity.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/database/migrations/1719238220284-create-user-entity.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class CreateUserEntity1719238220284 implements MigrationInterface {\n    name = 'CreateUserEntity1719238220284'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TABLE \"user\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"name\" character varying(50),\n                \"email\" character varying NOT NULL,\n                \"username\" character varying(30) NOT NULL,\n                \"password\" character varying NOT NULL,\n                \"status\" \"public\".\"user_status_enum\" NOT NULL DEFAULT 'DEACTIVATE',\n                \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"deleteAt\" TIMESTAMP,\n                CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"),\n                CONSTRAINT \"UQ_78a916df40e02a9deb1c4b75edb\" UNIQUE (\"username\"),\n                CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\")\n            )\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            DROP TABLE \"user\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/custom-request.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         CustomUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\nexport interface CustomUser {\n  readonly id: string;\n  readonly session: Session;\n}\n\nexport interface CustomRequest extends Request {\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/custom-request.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            session\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\nexport interface CustomUser {\n  readonly id: string;\n  readonly session: Session;\n}\n\nexport interface CustomRequest extends Request {\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/database/database.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database.config';\n\n@Module({\n  imports: [TypeOrmModule.forRootAsync(databaseConfig.asProvider())]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Device.html":{"url":"interfaces/Device.html","title":"interface - Device","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Device\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/device.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Device {\n  readonly name: string;\n  readonly version?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnvModule.html":{"url":"modules/EnvModule.html","title":"module - EnvModule","body":"\n                   \n\n\n\n\n    Modules\n    EnvModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/env/env.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ENV_VALIDATION_SCHEMA } from './env.constants';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      expandVariables: true,\n      validationSchema: ENV_VALIDATION_SCHEMA\n    })\n  ]\n})\nexport class EnvModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/hashing/hashing.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/hashing.service.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/hashing/hashing.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport abstract class HashingService {\n  abstract hash(data: string | Buffer): Promise;\n  abstract compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/id.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the data thats need to be processed'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/id.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\nexport class IdDto {\n  @ApiProperty({\n    description: 'The ID of the data thats need to be processed'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:11\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'auth/decorators/public.decorator';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n  canActivate(context: ExecutionContext) {\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(),\n      context.getClass()\n    ]);\n\n    if (isPublic) return true;\n\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport jwtConfig from 'auth/config/jwt.config';\nimport { JwtPayload } from 'common/interfaces/jwt-payload.interface';\nimport { Request } from 'express';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @Inject(jwtConfig.KEY)\n    private readonly jwtConfiguration: ConfigType,\n    private readonly authService: AuthService\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: jwtConfiguration.secret,\n      passReqToCallback: true\n    });\n  }\n\n  validate(req: Request, payload: JwtPayload) {\n    return this.authService.validateJwt(\n      payload,\n      req.headers?.authorization.replace('bearer ', '')\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport { Strategy } from 'passport-local';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  validate(email: string, password: string) {\n    return this.authService.validateLocal(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsPassword } from 'common/decorators/validators/is-password.decorator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly email: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginValidationMiddleware.html":{"url":"injectables/LoginValidationMiddleware.html","title":"injectable - LoginValidationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginValidationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middlewares/login-validation.middleware.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/middlewares/login-validation.middleware.ts:13\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware\n} from '@nestjs/common';\nimport { LoginUserDto } from 'auth/dto/login-user.dto';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\n\n@Injectable()\nexport class LoginValidationMiddleware implements NestMiddleware {\n  async use(req: Request, res: Response, next: NextFunction) {\n    const loginDto = plainToInstance(LoginUserDto, req.body);\n\n    const errors = await validate(loginDto, {\n      whitelist: true,\n      forbidNonWhitelisted: true\n    });\n\n    if (errors.length) {\n      throw new BadRequestException(errors);\n    }\n\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { IsPassword } from 'common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'common/decorators/validators/is-username.decorator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  readonly email: string;\n\n  @IsUsername()\n  readonly username: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistryDates.html":{"url":"classes/RegistryDates.html","title":"class - RegistryDates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistryDates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/embedded/registry-dates.embedded.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/embedded/registry-dates.embedded.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/embedded/registry-dates.embedded.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/embedded/registry-dates.embedded.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\n\nexport class RegistryDates {\n  @CreateDateColumn()\n  createdAt: Date;\n\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  @DeleteDateColumn()\n  deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveDto.html":{"url":"classes/RemoveDto.html","title":"class - RemoveDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/common/dto/remove.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                soft\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        soft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/common/dto/remove.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { IsBoolean } from 'common/decorators/validators/is-boolean.decorator';\n\nexport class RemoveDto {\n  @IsOptional()\n  @IsBoolean()\n  readonly soft: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/entities/session.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                device\n                            \n                            \n                                    \n                                expiryDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ip\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Device\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:8\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/session/entities/session.entity.ts:11\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Device } from 'common/interfaces/device.interface';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n@Entity()\nexport class Session {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ unique: true })\n  token: string;\n\n  @Column({ type: 'json' })\n  device: Device;\n\n  @Column()\n  ip: string;\n\n  @Column()\n  expiryDate: Date;\n\n  @ManyToOne(() => User, (user) => user.id, {\n    nullable: false\n  })\n  owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionController.html":{"url":"controllers/SessionController.html","title":"controller - SessionController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                session\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n@Controller('session')\nexport class SessionController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionModule.html":{"url":"modules/SessionModule.html","title":"module - SessionModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionModule\n\n\n\ncluster_SessionModule_providers\n\n\n\n\nSessionService\n\nSessionService\n\n\n\nSessionModule\n\nSessionModule\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/session/session.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from './entities/session.entity';\nimport { SessionController } from './session.controller';\nimport { SessionService } from './session.service';\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session])],\n  providers: [SessionService],\n  controllers: [SessionController]\n})\nexport class SessionModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionService.html":{"url":"injectables/SessionService.html","title":"injectable - SessionService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/session/session.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                sessions\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, sessionRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/session/session.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string, token: string, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    sessions(undefined: CustomUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CustomUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/session/session.service.ts:33\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'common/interfaces/custom-request.interface';\nimport { Device } from 'common/interfaces/device.interface';\nimport { Session } from 'session/entities/session.entity';\nimport { DataSource, Raw, Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n@Injectable()\nexport class SessionService {\n  constructor(\n    private readonly dataSource: DataSource,\n    @InjectRepository(Session)\n    private readonly sessionRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  async create(userId: string, token: string, ip: string, device: Device) {\n    const session = this.sessionRepository.create({\n      owner: {\n        id: userId\n      },\n      ip,\n      token,\n      device,\n      expiryDate: new Date(new Date().setMilliseconds(31 * 24 * 60 * 60 * 1000))\n    });\n\n    return await this.sessionRepository.save(session);\n  }\n\n  async validate(userId: string, token: string): Promise {\n    const session = await this.dataSource.getRepository(Session).findOne({\n      where: {\n        token,\n        owner: {\n          id: userId\n        },\n        expiryDate: Raw((alias) => `${alias} > NOW()`)\n      }\n    });\n\n    return session;\n  }\n\n  async sessions({ id }: CustomUser) {\n    const user = await this.userRepository.findOne({\n      where: { id },\n      relations: ['session']\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user thats need to be Updated'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  @ApiProperty({\n    description: 'The ID of the user thats need to be Updated'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                registryDates\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                sessions\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registryDates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistryDates\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column(undefined, {prefix: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Session[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, session => session.owner, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { RegistryDates } from 'common/embedded/registry-dates.embedded';\nimport { UserRole } from 'common/enums/user-role.enum';\nimport { UserStatus } from 'common/enums/user-status.enum';\nimport { Session } from 'session/entities/session.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n@Entity()\nexport class User {\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  @Column({ length: 50, nullable: true, select: false })\n  name: string;\n\n  @Column({ unique: true })\n  email: string;\n\n  @Column({ unique: true, length: 30 })\n  username: string;\n\n  @Column({ select: false })\n  password: string;\n\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.DEACTIVATE })\n  status: UserStatus;\n\n  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })\n  role: UserRole;\n\n  @Column(() => RegistryDates, { prefix: false })\n  registryDates: RegistryDates;\n\n  @OneToMany(() => Session, (session) => session.owner, {\n    cascade: ['soft-remove', 'recover']\n  })\n  sessions: Session[];\n\n  get isDeleted() {\n    return !!this.registryDates.deleteAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({description: 'Creates a new user'})@ApiResponse({status: 201, description: 'You get a 201 response if your data is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:37\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'Get list of users register in application'})@ApiResponse({status: 200, description: 'Fetch users successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:49\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({description: 'Get single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Fetch single user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:67\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: IdDto, undefined: RemoveDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({description: 'Delete single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiQuery({name: 'soft', type: Boolean, required: false, description: 'This query for soft delete data of user in application'})@ApiResponse({status: 200, description: 'Delete user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:109\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            RemoveDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({description: 'Update single user with id and send data'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Update data of user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:85\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common';\nimport { IdDto } from 'common/dto/id.dto';\nimport { RemoveDto } from 'common/dto/remove.dto';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags\n} from '@nestjs/swagger';\n\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Post()\n  @ApiOperation({\n    description: 'Creates a new user'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your data is created successfully'\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    return this.usersService.create(createUserDto);\n  }\n\n  @Get()\n  @ApiOperation({\n    description: 'Get list of users register in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch users successfully'\n  })\n  findAll() {\n    return this.usersService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOperation({\n    description: 'Get single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch single user successfully'\n  })\n  findOne(@Param('id') { id }: IdDto) {\n    return this.usersService.findOne(id);\n  }\n\n  @Patch(':id')\n  @ApiOperation({\n    description: 'Update single user with id and send data'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Update data of user successfully'\n  })\n  update(@Param('id') { id }: IdDto, @Body() updateUserDto: UpdateUserDto) {\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  @Delete(':id')\n  @ApiOperation({\n    description: 'Delete single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiQuery({\n    name: 'soft',\n    type: Boolean,\n    required: false,\n    description: 'This query for soft delete data of user in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete user successfully'\n  })\n  remove(@Param('id') { id }: IdDto, @Query() { soft }: RemoveDto) {\n    return this.usersService.remove(id, soft);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from 'auth/auth.module';\nimport { Session } from 'session/entities/session.entity';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/users.subscriber';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session]), AuthModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and preform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:21\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:38\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, soft: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Find and Delete a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:59\n                        \n                    \n\n\n            \n                \n                        Find and Update a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\n\n/**\n * Class to connect to Users table and preform business operations\n */\n@Injectable()\nexport class UsersService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...createUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  async findOne(id: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find and Update a single user using the ID of user\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      // Find user with id and update data\n      const user = await this.userRepository.preload({\n        id,\n        ...updateUserDto\n      });\n\n      // If doesn't exists, throw error\n      if (!user) {\n        throw new NotFoundException('user not found');\n      }\n\n      // Otherwise save and return user\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Find and Delete a single user using the ID of user\n   */\n  async remove(id: string, soft: boolean) {\n    const user = await this.findOne(id);\n    return soft\n      ? await this.userRepository.softRemove(user)\n      : await this.userRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersSubscriber.html":{"url":"classes/UsersSubscriber.html","title":"class - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/subscribers/users.subscriber.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeInsert\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/subscribers/users.subscriber.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeInsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeInsert(event: InsertEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            InsertEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(event: UpdateEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:31\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UpdateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:20\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashingService } from 'auth/hashing/hashing.service';\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  UpdateEvent\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n@EventSubscriber()\nexport class UsersSubscriber implements EntitySubscriberInterface {\n  constructor(\n    private readonly dataSource: DataSource,\n    private readonly hashingService: HashingService\n  ) {\n    dataSource.subscribers.push(this);\n  }\n\n  listenTo() {\n    return User;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n  async beforeInsert(event: InsertEvent) {\n    const { entity: user } = event;\n    user.password = await this.hashingService.hash(user.password);\n  }\n\n  async beforeUpdate(event: UpdateEvent) {\n    const { entity } = event;\n    const user = entity as User;\n\n    user.password = await this.hashingService.hash(user.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/ipAddress.decorator.ts\n            \n            variable\n            IpAddress\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user-agent.decorator.ts\n            \n            variable\n            UserAgent\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/change-password.dto.ts\n            \n            class\n            ChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/hashing/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/middlewares/login-validation.middleware.ts\n            \n            injectable\n            LoginValidationMiddleware\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            toBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            ToBoolean\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-boolean.decorator.ts\n            \n            variable\n            IsBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IS_PASSWORD_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            isPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IsPassword\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            passwordRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IS_USERNAME_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            isUsername\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IsUsername\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            usernameRegex\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/dto/remove.dto.ts\n            \n            class\n            RemoveDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/embedded/registry-dates.embedded.ts\n            \n            class\n            RegistryDates\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomUser\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/device.interface.ts\n            \n            interface\n            Device\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/common/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/common/util/common.constants.ts\n            \n            variable\n            VALIDATION_PIPE_OPTIONS\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/database/migrations/1719238220284-create-user-entity.ts\n            \n            class\n            CreateUserEntity1719238220284\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1719388025258-add-role-to-user.ts\n            \n            class\n            AddRoleToUser1719388025258\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1719672378417-add-session-entity.ts\n            \n            class\n            AddSessionEntity1719672378417\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/database/migrations/1719672459617-add-relationship-to-session-and-user.ts\n            \n            class\n            AddRelationshipToSessionAndUser1719672459617\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/env/env.constants.ts\n            \n            variable\n            ENV_VALIDATION_SCHEMA\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.controller.ts\n            \n            controller\n            SessionController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/session/session.service.ts\n            \n            injectable\n            SessionService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/subscribers/users.subscriber.ts\n            \n            class\n            UsersSubscriber\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                85 %\n                (6/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport : ^1.0.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/common/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                        \n                            \n                                 ACTIVATE\n                            \n                        \n                        \n                            \n                                Value : ACTIVATE\n                            \n                        \n                        \n                            \n                                 DEACTIVATE\n                            \n                        \n                        \n                            \n                                Value : DEACTIVATE\n                            \n                        \n                        \n                            \n                                 SUSPEND\n                            \n                        \n                        \n                            \n                                Value : SUSPEND\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnvModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nAuthModule->UsersModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nHashingService \n\nHashingService \n\nHashingService  -->\n\nAuthModule->HashingService \n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAppModule -->\n\nCommonModule->AppModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nAppModule -->\n\nDatabaseModule->AppModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nAppModule -->\n\nEnvModule->AppModule\n\n\n\n\n\nSessionModule\n\nSessionModule\n\nAppModule -->\n\nSessionModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionService\n\nSessionService\n\nAuthModule -->\n\nSessionService->AuthModule\n\n\n\nSessionModule -->\n\nSessionService->SessionModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    13 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Mohamadreza Mosalli\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ENV_VALIDATION_SCHEMA   (src/.../env.constants.ts)\n                        \n                        \n                            IpAddress   (src/.../ipAddress.decorator.ts)\n                        \n                        \n                            IS_PASSWORD_KEY   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            IS_USERNAME_KEY   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsBoolean   (src/.../is-boolean.decorator.ts)\n                        \n                        \n                            isPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            isUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            passwordRegex   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            ToBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserAgent   (src/.../user-agent.decorator.ts)\n                        \n                        \n                            usernameRegex   (src/.../is-username.decorator.ts)\n                        \n                        \n                            VALIDATION_PIPE_OPTIONS   (src/.../common.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/env/env.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  DATA_SOURCE_USERNAME: Joi.string().required(),\n  DATA_SOURCE_PASSWORD: Joi.string().required(),\n  DATA_SOURCE_HOST: Joi.string().required(),\n  DATA_SOURCE_PORT: Joi.number().required(),\n  DATA_SOURCE_DATABASE: Joi.string().required(),\n  DATA_SOURCE_URL: Joi.string().required(),\n  JWT_SECRET_KEY: Joi.string().required(),\n  NODE_ENV: Joi.string().required()\n})\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/ipAddress.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IpAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get ip address\n    const ip = request.headers['x-forwarded-for'] as string;\n\n    if (ip && process.env.NODE_ENV === 'production') {\n      ip.split(',')[0].replace(',', '');\n    }\n\n    // Set ip address\n    return ip ?? '127.0.0.1';\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/validators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PASSWORD_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPassword'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, passwordRegex)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_PASSWORD_KEY,\n    validator: {\n      validate: (value): boolean => isPassword(value),\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/validators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_USERNAME_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isUsername'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, usernameRegex)\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_USERNAME_KEY,\n    validator: {\n      validate: (value): boolean => isUsername(value),\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{3,30}$/\n                    \n                \n\n\n        \n    \n\n    src/common/decorators/validators/is-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) =>\n  applyDecorators(DefaultIsBoolean(validationOptions), ToBoolean())\n                    \n                \n\n            \n                \n                    Checks if the value is a boolean. Works with query params\n\n                \n            \n\n        \n    \n\n    src/common/decorators/transforms/to-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown) => {\n  switch (value) {\n    case null:\n      return 'failure';\n\n    case 'true':\n      return true;\n\n    case 'false':\n      return false;\n\n    default:\n      return value;\n  }\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ToBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Transform(({ obj, key }) => toBoolean(obj[key]))\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n    const user = request.user;\n    console.log('user', user);\n\n    return data ? user?.[data] : user;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/user-agent.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Device => {\n    const request = ctx.switchToHttp().getRequest();\n\n    const userAgent = request.headers['user-agent'];\n\n    // Set default\n    let device: Device = {\n      name: 'unknown'\n    };\n\n    if (userAgent) {\n      if (/like Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'iOS',\n          version: /CPU( iPhone)? OS ([0-9\\._]+) like Mac OS X/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n      } else if (/Android/.test(userAgent)) {\n        device = {\n          name: 'Android',\n          version: /Android ([0-9\\.]+)[\\);]/.exec(userAgent)?.[1]\n        };\n      } else if (/(Intel|PPC) Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'macOS',\n          version: /(Intel|PPC) Mac OS X ?([0-9\\._]*)[\\)\\;]/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n      } else if (/Windows NT/.test(userAgent)) {\n        device = {\n          name: 'Windows',\n          version: /Windows NT ([0-9\\._]+)[\\);]/.exec(userAgent)?.[1]\n        };\n      } else if (/Linux/i.test(userAgent) && /X11/i.test(userAgent)) {\n        device = {\n          name: 'Linux'\n        };\n      }\n    }\n\n    return device;\n  }\n)\n                    \n                \n\n\n        \n    \n\n    src/common/util/common.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_PIPE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  whitelist: true,\n  forbidNonWhitelisted: true,\n  transform: true,\n  transformOptions: {\n    enableImplicitConversion: true\n  }\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
