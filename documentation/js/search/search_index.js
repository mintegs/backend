var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.933,1,2.485]],["body/modules/AppModule.html",[0,1.748,1,4.975,2,2.303,3,1.524,4,1.942,5,1.942,6,1.713,7,1.942,8,1.942,9,3.268,10,3.268,11,4.341,12,0.021,13,4.341,14,4.182,15,4.341,16,2.602,17,1.942,18,1.821,19,0.223,20,0.223,21,0.198,22,3.822,23,0.424,24,4.379,25,5.121,26,2.325,27,3.135,28,5.121,29,4.379,30,3.525,31,3.525,32,5.121,33,3.89,34,3.89,35,2.602,36,4.379,37,6.169,38,2.44,39,3.234,40,1.301,41,1.826,42,3.604,43,3.89,44,2.606,45,2.991,46,1.639,47,4.379,48,2.784,49,3.234,50,5.121,51,5.121,52,5.121,53,5.121,54,3.89,55,3.525,56,4.379,57,0.513,58,0.795,59,3.822,60,3.822,61,3.822,62,3.822,63,0.223,64,0.011,65,0.014,66,0.014]],["title/controllers/AuthController.html",[67,1.834,68,2.485]],["body/controllers/AuthController.html",[12,0.021,19,0.171,20,0.171,21,0.151,23,0.609,26,1.601,38,2.025,40,1.397,44,1.794,57,0.549,58,0.608,63,0.171,64,0.008,65,0.012,66,0.012,67,1.486,68,3.78,69,1.486,70,2.501,71,2.014,72,2.925,73,2.025,74,3.228,75,2.309,76,0.324,77,1.289,78,4.278,79,3.633,80,4.43,81,3.207,82,2.925,83,1.512,84,3.756,85,2.069,86,2.925,87,2.069,88,0.852,89,2.925,90,3.16,91,1.854,92,1.497,93,0.609,94,1.345,95,5.058,96,2.79,97,2.985,98,1.95,99,2.925,100,2.925,101,2.925,102,3.633,103,2.501,104,5.49,105,3.189,106,2.849,107,2.925,108,2.925,109,3.228,110,2.616,111,2.159,112,1.515,113,2.501,114,3.964,115,2.925,116,2.925,117,1.694,118,3.228,119,2.925,120,2.925,121,2.501,122,2.925,123,1.59,124,2.542,125,2.501,126,3.228,127,2.925,128,3.16,129,2.925,130,3.228,131,2.925,132,2.925,133,2.925,134,2.501,135,1.709,136,1.847,137,2.501,138,3.633,139,2.014,140,2.925,141,2.501,142,1.59,143,2.014,144,2.222,145,2.222,146,2.925,147,2.925,148,2.014,149,0.679,150,2.503,151,2.925,152,2.925,153,2.069,154,2.925,155,4.248,156,2.925,157,2.925,158,2.925,159,4.248,160,2.925,161,2.925,162,2.925,163,2.925,164,2.925,165,2.925,166,2.925]],["title/modules/AuthModule.html",[0,0.933,11,2.28]],["body/modules/AuthModule.html",[0,1.612,2,1.256,3,1.256,4,1.601,5,1.601,6,1.412,7,2.887,8,1.601,11,4.549,12,0.021,16,2.277,17,1.601,18,1.502,19,0.184,20,0.184,21,0.163,23,0.349,27,2.277,34,2.394,38,2.973,40,1.18,41,1.86,42,1.841,44,2.203,48,1.713,49,2.83,57,0.574,58,0.655,63,0.184,64,0.009,65,0.013,66,0.013,68,3.591,69,2.65,73,2.136,75,2.436,77,0.956,81,1.841,88,0.489,91,1.064,92,0.859,93,0.349,94,0.772,98,0.956,123,1.713,124,3.169,125,2.694,136,3.294,137,2.694,138,2.694,167,2.694,168,2.694,169,2.694,170,3.391,171,3.94,172,3.94,173,3.391,174,3.169,175,3.151,176,4.482,177,4.482,178,5.681,179,3.151,180,3.151,181,3.151,182,5.216,183,2.694,184,2.169,185,4.482,186,1.99,187,3.151,188,2.394,189,2.169,190,1.713,191,1.841,192,3.151,193,3.832,194,3.151,195,3.085,196,3.151,197,3.151,198,3.151,199,3.151,200,2.694,201,2.694,202,2.694,203,1.188,204,1.601,205,2.394,206,2.436,207,2.694,208,1.331,209,2.835,210,3.151,211,2.169,212,2.436,213,2.169,214,3.151,215,1.256,216,3.151,217,3.151,218,2.65,219,2.835,220,3.151,221,3.085,222,2.169,223,3.151,224,4.482,225,2.694,226,2.394,227,3.151,228,2.394,229,2.694,230,2.83,231,1.412,232,3.832,233,3.151,234,1.841,235,3.151]],["title/injectables/AuthService.html",[124,1.834,236,0.793]],["body/injectables/AuthService.html",[3,1.108,12,0.021,18,0.807,19,0.099,20,0.099,21,0.088,23,0.392,26,1.048,30,1.914,34,2.112,35,0.86,38,1.685,40,1.425,41,1.979,42,1.624,44,1.174,46,1.715,48,2.457,49,1.756,55,1.914,57,0.467,58,0.352,63,0.099,64,0.005,65,0.008,66,0.008,73,1.325,76,0.188,77,0.843,78,3.5,79,2.377,80,3.691,81,1.624,83,1.446,84,3.242,87,2.389,88,0.797,90,1.069,91,1.733,92,1.399,93,0.569,94,1.257,95,2.112,96,1.412,97,1.511,98,1.9,102,3.5,103,2.377,105,2.468,106,2.413,111,0.86,112,2.203,113,2.377,114,3.384,117,2.334,123,0.92,124,2.08,134,1.448,135,0.989,143,1.166,144,1.286,145,1.286,149,0.95,150,2.463,153,1.831,173,2.225,174,2.08,188,1.286,200,1.448,202,1.448,203,1.048,206,3.404,208,1.909,212,0.92,218,1.412,236,0.611,237,0.675,238,1.448,239,3.536,240,2.78,241,1.624,242,2.377,243,2.78,244,1.797,245,1.325,246,2.377,247,1.585,248,1.914,249,3.288,250,3.536,251,2.377,252,2.08,253,1.693,254,2.402,255,3.899,256,5.975,257,1.693,258,3.112,259,2.112,260,4.52,261,3.024,262,3.536,263,3.536,264,1.693,265,1.693,266,2.112,267,3.384,268,2.528,269,3.068,270,2.78,271,1.693,272,4.093,273,1.693,274,2.687,275,2.944,276,1.693,277,1.693,278,2.585,279,4.52,280,1.693,281,3.865,282,2.377,283,2.297,284,2.78,285,1.693,286,2.377,287,2.608,288,1.951,289,2.377,290,4.389,291,1.286,292,1.448,293,1.448,294,2.391,295,1.448,296,1.448,297,2.391,298,0.989,299,2.377,300,3.11,301,1.448,302,2.723,303,1.693,304,2.377,305,2.838,306,2.78,307,2.377,308,2.377,309,3.533,310,2.112,311,2.112,312,2.554,313,2.377,314,2.78,315,1.693,316,1.693,317,2.687,318,2.78,319,2.78,320,2.78,321,2.377,322,1.914,323,1.693,324,1.286,325,1.286,326,1.693,327,1.166,328,0.92,329,2.818,330,2.233,331,1.448,332,1.914,333,4.093,334,1.693,335,1.693,336,1.693,337,1.693,338,1.693,339,1.693,340,1.693,341,1.693,342,1.693,343,1.448,344,1.693,345,1.448,346,1.286,347,1.069,348,2.377,349,1.693,350,2.112,351,2.377,352,1.448,353,1.286,354,1.286,355,1.693,356,1.448,357,1.693,358,2.377]],["title/injectables/BcryptService.html",[236,0.793,359,2.485]],["body/injectables/BcryptService.html",[12,0.021,19,0.203,20,0.203,21,0.18,23,0.385,46,2.233,57,0.439,58,0.723,63,0.203,64,0.015,65,0.013,66,0.013,73,2.288,76,0.385,77,1.457,83,1.533,88,0.745,91,1.622,92,1.309,93,0.532,94,1.176,98,1.953,150,2.365,153,2.073,208,2.323,218,2.44,230,2.196,236,1.303,237,1.386,245,2.288,248,3.306,249,2.795,254,2.152,269,2.196,298,2.805,302,1.767,312,1.657,347,4.246,359,4.084,360,2.973,361,3.648,362,4.106,363,5.073,364,4.802,365,2.61,366,2.61,367,4.802,368,4.084,369,4.106,370,5.749,371,5.836,372,3.477,373,3.014,374,4.802,375,4.802,376,3.465,377,3.033,378,4.106,379,3.306,380,4.106,381,5.932,382,4.432,383,3.477,384,3.648,385,4.179,386,5.932,387,5.501,388,2.99,389,5.932,390,1.767,391,4.802,392,3.477,393,2.642,394,4.802,395,3.477,396,2.973,397,3.477,398,3.477,399,3.477]],["title/modules/CommonModule.html",[0,0.933,170,1.962]],["body/modules/CommonModule.html",[0,1.701,2,2.139,3,1.635,4,2.083,5,2.083,6,1.837,7,2.726,8,3.038,12,0.021,16,2.726,17,2.083,18,1.954,19,0.24,20,0.24,21,0.212,23,0.454,26,2.391,27,2.726,57,0.538,58,0.852,63,0.314,64,0.011,65,0.015,66,0.015,88,0.833,117,2.384,170,3.837,186,2.589,215,2.139,225,4.588,228,4.819,229,3.506,241,3.134,245,2.557,254,3.192,359,4.117,400,3.506,401,3.506,402,3.506,403,4.265,404,4.1,405,4.588,406,4.588,407,4.588,408,4.076,409,3.705,410,3.134,411,5.98,412,4.076,413,3.134,414,4.543,415,5.365,416,4.1,417,4.1,418,4.1,419,4.1,420,3.506,421,4.1,422,4.1]],["title/modules/CoreModule.html",[0,0.933,13,2.28]],["body/modules/CoreModule.html",[0,1.714,2,2.711,3,1.674,4,2.134,5,2.134,6,1.882,7,2.134,8,2.134,12,0.021,13,4.576,16,2.769,17,2.134,18,2.001,19,0.245,20,0.245,21,0.217,23,0.465,24,4.66,26,2.054,27,2.769,44,2.302,49,2.652,56,4.66,57,0.51,58,0.873,63,0.245,64,0.012,65,0.015,66,0.015,73,2.597,170,3.695,209,2.283,211,2.891,228,3.19,247,1.882,423,3.591,424,3.591,425,4.293,426,4.293,427,4.199,428,5.449,429,6.049,430,5.449,431,3.751,432,5.449,433,4.66,434,4.14,435,5.449,436,5.449,437,4.66,438,5.449,439,4.66,440,4.66,441,5.449,442,5.449,443,4.199,444,4.199,445,4.199,446,4.199,447,3.591,448,2.283]],["title/classes/CreateUserDto.html",[64,0.01,449,2.109]],["body/classes/CreateUserDto.html",[12,0.021,19,0.167,20,0.167,21,0.148,23,0.691,40,0.821,46,1.336,57,0.461,63,0.167,64,0.012,65,0.012,66,0.012,76,0.317,83,1.404,85,2.177,87,2.349,88,0.967,92,1.699,93,0.64,94,1.565,97,2.27,111,2.122,112,1.489,117,1.665,142,1.553,149,1.616,212,2.951,287,3.311,288,2.969,328,3.14,449,2.44,450,1.139,451,5.159,452,1.804,453,2.637,454,3.173,455,1.023,456,3.75,457,3.429,458,4.559,459,2.857,460,2.857,461,3.524,462,4.154,463,3.156,464,2.443,465,3.571,466,4.643,467,4.853,468,5.992,469,4.176,470,2.857,471,2.857,472,5.099,473,3.173,474,5.429,475,4.643,476,5.429,477,4.643,478,3.571,479,3.571,480,2.857,481,2.857,482,3.571,483,3.571,484,4.734,485,2.857,486,4.176,487,4.643,488,4.221,489,2.875,490,3.173,491,2.857,492,2.857,493,3.571,494,3.398,495,3.571,496,3.571,497,2.857,498,2.857,499,4.176,500,3.571,501,3.571,502,4.176,503,4.125,504,4.221,505,3.571,506,2.857,507,3.75,508,1.28,509,2.44,510,2.875,511,1.967,512,2.875,513,2.443,514,2.443,515,2.443,516,2.857,517,2.857,518,2.857,519,2.857,520,2.171,521,2.857]],["title/interfaces/CustomRequest.html",[522,1.361,523,2.485]],["body/interfaces/CustomRequest.html",[12,0.021,19,0.226,20,0.226,21,0.2,23,0.428,40,1.448,41,2.514,57,0.411,63,0.302,65,0.014,66,0.014,76,0.428,83,1.419,93,0.644,105,2.621,106,2.453,111,2.621,112,2.457,149,1.348,191,2.257,231,1.732,268,2.704,275,2.458,283,1.963,294,4.025,455,1.518,463,3.166,473,4.412,522,2.656,523,4.266,524,2.257,525,2.936,526,2.936,527,4.411,528,4.411,529,3.232,530,3.392,531,2.458,532,3.919,533,3.552,534,3.919,535,2.621,536,3.375,537,2.936,538,3.304,539,3.304,540,2.936,541,4.411,542,3.258]],["title/interfaces/CustomUser.html",[294,2.109,522,1.361]],["body/interfaces/CustomUser.html",[12,0.021,19,0.222,20,0.222,21,0.197,23,0.421,40,1.442,41,2.607,57,0.407,63,0.298,65,0.014,66,0.014,76,0.421,83,1.484,93,0.638,105,2.926,106,2.6,111,2.926,112,2.48,149,1.336,191,2.22,231,2.287,268,2.826,275,2.745,283,2.592,294,3.945,455,1.411,463,3.06,473,4.375,522,2.621,523,3.512,524,2.22,525,2.887,526,2.887,527,3.25,528,3.25,529,2.934,530,2.98,531,1.811,532,2.887,533,2.617,534,2.887,535,1.931,536,3.431,537,3.876,538,4.363,539,4.363,540,3.876,541,4.925,542,3.222]],["title/modules/DatabaseModule.html",[0,0.933,425,2.28]],["body/modules/DatabaseModule.html",[0,1.768,2,1.716,12,0.021,19,0.252,20,0.252,21,0.222,23,0.477,27,3.11,42,3.234,57,0.488,58,0.895,63,0.252,64,0.012,65,0.015,66,0.015,73,2.638,87,2.087,88,0.859,93,0.614,189,4.213,190,2.339,203,2.087,207,4.734,208,2.338,209,3.512,213,3.811,244,2.813,245,2.638,247,3.067,288,2.638,366,3.009,413,3.234,425,4.081,543,4.303,544,5.536,545,4.734,546,5.525,547,4.206,548,4.734,549,5.536,550,6.12,551,4.734,552,5.536,553,4.734,554,5.536,555,4.734,556,5.536,557,3.811,558,5.536,559,3.811,560,4.206,561,5.536,562,4.206,563,4.303,564,4.303]],["title/interfaces/Device.html",[106,1.525,522,1.361]],["body/interfaces/Device.html",[12,0.021,19,0.263,20,0.263,21,0.233,23,0.499,63,0.263,65,0.016,66,0.016,76,0.499,83,1.563,92,1.972,93,0.631,94,1.696,106,3.074,149,1.321,212,3.096,231,2.016,455,1.395,461,3.327,463,3.13,522,1.695,524,2.628,542,4.534,553,3.847,559,4.522,565,3.847,566,2.841,567,4.498,568,3.847,569,3.847,570,3.847,571,4.498,572,4.87,573,4.87,574,5.695,575,4.302,576,5.695,577,5.695,578,5.695]],["title/modules/EnvModule.html",[0,0.933,426,2.28]],["body/modules/EnvModule.html",[0,1.842,2,2.361,12,0.021,19,0.28,20,0.28,21,0.248,23,0.531,27,2.433,57,0.513,58,0.995,63,0.28,64,0.013,65,0.017,66,0.017,117,2.361,183,5.064,184,3.296,208,2.715,209,2.603,211,4.077,215,2.361,241,2.797,365,3.219,409,2.797,413,2.797,426,3.74,559,3.296,579,4.788,580,4.499,581,4.788,582,4.094,583,4.788,584,3.637,585,4.094,586,4.788,587,3.637,588,4.788,589,4.499,590,4.788,591,4.788,592,2.433,593,4.094,594,2.603,595,4.788]],["title/classes/GenerateTables1725986093329.html",[64,0.01,596,2.743]],["body/classes/GenerateTables1725986093329.html",[12,0.021,19,0.194,20,0.194,21,0.172,40,1.143,41,2.074,57,0.265,63,0.194,64,0.009,65,0.013,66,0.013,76,0.368,77,1.411,83,0.73,87,1.252,88,0.833,91,1.571,92,1.73,93,0.722,94,1.139,96,2.728,98,1.411,105,1.688,106,1.403,128,4.008,203,1.252,230,2.938,249,3.224,268,2.319,275,2.217,287,2.364,288,2.217,302,3.477,322,2.287,327,2.287,328,1.806,388,3.542,390,1.688,393,4.419,431,3.696,450,1.325,455,1.139,489,3.203,490,2.524,531,2.772,545,3.978,596,4.419,597,4.974,598,2.841,599,5.368,600,4.652,601,3.322,602,4.652,603,6.756,604,3.322,605,3.673,606,4.652,607,3.322,608,6.844,609,4.821,610,5.381,611,4.652,612,5.426,613,5.816,614,2.287,615,2.524,616,5.816,617,4.652,618,6.515,619,3.322,620,3.39,621,3.322,622,4.652,623,5.368,624,3.322,625,5.368,626,3.322,627,3.322,628,3.322,629,2.524,630,3.978,631,2.524,632,2.524,633,3.322,634,3.322,635,3.322,636,4.652,637,2.841,638,4.652,639,3.322,640,3.322,641,3.322,642,4.652,643,2.287,644,6.123]],["title/injectables/HashingService.html",[236,0.793,254,1.618]],["body/injectables/HashingService.html",[12,0.021,19,0.211,20,0.211,21,0.186,23,0.399,46,2.294,57,0.287,58,0.749,63,0.211,64,0.018,65,0.014,66,0.014,76,0.399,77,1.493,83,1.583,88,0.935,91,1.662,92,1.342,93,0.545,94,1.205,98,2.057,150,2.235,218,2.5,236,1.081,237,1.437,245,2.345,254,2.699,298,3.518,347,3.803,361,3.739,368,4.146,369,4.208,370,5.798,371,5.565,373,3.445,376,3.518,377,3.108,378,4.208,379,3.388,380,4.208,396,5.565,434,3.739,522,1.855,605,4.393,645,3.081,646,7.126,647,3.388,648,4.921,649,4.921,650,4.921,651,4.921,652,3.603,653,4.575,654,5.15,655,4.208,656,6.507,657,3.603]],["title/classes/IdDto.html",[64,0.01,658,2.485]],["body/classes/IdDto.html",[12,0.021,19,0.26,20,0.26,21,0.23,23,0.626,46,1.808,57,0.45,63,0.26,64,0.018,65,0.016,66,0.016,76,0.492,83,1.559,85,1.674,88,0.689,93,0.626,96,3.43,97,2.414,112,2.014,142,2.414,149,1.441,268,2.795,390,2.256,450,1.771,453,3.567,455,1.384,456,3.374,457,2.805,463,2.96,503,4.291,508,1.99,532,4.291,534,4.291,566,3.567,620,3.567,658,3.889,659,3.798,660,3.567,661,3.567,662,3.07,663,5.648,664,4.501,665,5.648,666,4.441,667,4.441,668,4.291,669,4.83,670,2.805,671,3.798,672,3.798,673,3.374]],["title/injectables/JwtAuthGuard.html",[136,2.28,236,0.793]],["body/injectables/JwtAuthGuard.html",[0,1.17,12,0.021,19,0.187,20,0.187,21,0.165,23,0.502,30,3.618,35,2.299,38,3.304,39,3.811,57,0.456,58,0.664,63,0.187,64,0.018,65,0.013,66,0.013,75,3.107,76,0.354,77,1.373,88,0.937,91,1.528,92,1.234,93,0.502,94,1.108,98,1.83,128,4.157,136,3.61,148,2.199,149,0.741,150,1.804,153,1.706,186,2.017,206,2.46,208,1.911,226,4.343,231,2.028,234,3.911,236,0.994,237,1.274,244,2.299,245,2.157,252,2.67,312,1.522,332,3.116,353,3.993,373,1.623,388,3.107,408,4.343,409,1.866,412,3.438,448,2.46,500,3.87,529,2.986,535,2.905,536,2.67,592,2.67,647,3.116,674,4.494,675,2.427,676,5.16,677,3.116,678,3.87,679,3.438,680,4.584,681,4.525,682,4.525,683,4.525,684,4.525,685,3.194,686,6.788,687,3.194,688,3.87,689,3.87,690,4.525,691,5.358,692,3.194,693,4.525,694,3.87,695,4.525,696,2.858,697,4.343,698,4.343,699,5.255,700,3.61,701,3.319,702,2.017,703,2.427,704,3.194,705,2.427,706,2.427,707,3.87,708,3.194,709,3.194,710,4.525,711,3.194,712,3.194,713,2.732,714,3.194,715,2.732,716,3.194]],["title/interfaces/JwtPayload.html",[278,2.28,522,1.361]],["body/interfaces/JwtPayload.html",[12,0.02,19,0.286,20,0.286,21,0.253,23,0.542,31,3.366,40,1.275,63,0.286,65,0.017,66,0.017,76,0.542,83,1.553,93,0.542,96,3.048,97,3.261,110,2.33,149,1.392,206,3.261,268,2.882,275,2.858,278,3.788,310,4.557,437,4.181,455,1.469,463,2.33,522,2.261,524,2.856,566,3.088,568,4.181,614,3.366,670,3.088,717,4.181,718,4.181,719,4.181,720,4.181,721,3.714,722,4.889,723,4.181,724,4.889,725,4.181,726,3.714,727,4.889,728,4.889,729,4.889,730,4.889]],["title/injectables/JwtStrategy.html",[171,2.28,236,0.793]],["body/injectables/JwtStrategy.html",[12,0.021,19,0.249,20,0.171,21,0.151,23,0.555,35,2.161,38,2.027,39,2.686,40,1.147,46,1.361,57,0.538,58,0.609,63,0.171,64,0.016,65,0.012,66,0.012,73,2.027,76,0.325,77,1.29,88,0.853,91,1.436,92,1.159,93,0.609,94,1.042,98,1.29,112,2.24,124,3.466,149,0.987,150,2.191,153,1.104,171,3.844,184,2.017,193,4.282,206,3.844,208,2.321,209,3.308,212,2.312,213,2.928,215,1.168,218,2.161,219,2.312,221,3.782,236,0.934,237,1.168,241,3.758,252,2.965,258,2.017,275,2.027,278,3.47,283,2.161,292,2.505,293,2.505,297,2.484,305,2.484,310,4.982,311,4.174,329,2.928,373,2.791,410,2.484,413,1.711,431,2.017,433,3.637,448,2.312,522,1.104,529,3.174,530,2.484,535,2.791,587,2.225,592,1.488,594,3.172,662,2.312,677,3.782,688,2.505,689,2.505,700,2.686,702,1.85,705,2.225,731,2.505,732,5.494,733,4.253,734,4.253,735,4.253,736,3.637,737,2.929,738,5.494,739,2.929,740,5.007,741,4.698,742,4.253,743,4.253,744,2.929,745,5.007,746,3.637,747,2.686,748,3.637,749,4.253,750,3.231,751,2.928,752,2.505,753,2.505,754,2.929,755,2.929,756,2.929,757,2.929,758,3.231,759,2.929,760,2.929,761,2.929,762,2.225,763,2.929,764,2.505,765,2.929,766,2.929,767,2.929,768,2.225,769,2.929,770,2.929,771,2.929,772,2.225,773,2.505,774,2.929,775,2.929]],["title/injectables/LocalAuthGuard.html",[139,2.485,236,0.793]],["body/injectables/LocalAuthGuard.html",[12,0.021,19,0.276,20,0.276,21,0.244,23,0.523,33,4.461,35,2.983,38,3.185,57,0.468,58,0.982,63,0.276,64,0.018,65,0.016,66,0.016,75,3.192,139,4.602,221,4.602,222,4.824,226,4.461,236,1.29,237,1.883,461,3.43,535,3.396,675,3.588,676,5.464,678,5.021,679,4.461,702,4.035,776,4.039,777,4.461,778,3.708,779,5.871,780,5.871,781,4.461,782,5.021,783,5.871,784,5.871]],["title/injectables/LocalStrategy.html",[172,2.28,236,0.793]],["body/injectables/LocalStrategy.html",[12,0.021,19,0.203,20,0.203,21,0.179,23,0.385,26,1.808,31,3.302,38,2.286,40,1.321,54,3.644,57,0.473,58,0.722,63,0.203,64,0.017,65,0.013,66,0.013,76,0.385,77,1.798,83,1.414,87,2.571,88,0.745,91,1.62,92,1.308,93,0.532,94,1.175,98,1.455,112,2.114,124,3.466,148,2.39,149,0.806,150,2.191,153,2.071,172,3.744,221,4.283,222,3.784,236,1.054,237,1.384,244,2.437,245,2.286,251,4.102,252,3.161,286,5.069,287,3.466,288,2.286,305,2.802,309,3.302,366,2.607,373,3.012,405,4.102,409,2.802,410,2.802,413,2.802,457,3.029,535,3.012,594,3.222,605,3.029,653,3.644,662,2.607,677,4.54,696,3.029,700,3.029,702,2.192,705,4.175,706,3.644,736,4.102,750,3.644,752,5.32,753,2.968,772,3.644,778,3.029,785,2.968,786,4.796,787,4.102,788,3.471,789,3.471,790,3.644,791,4.796,792,3.471,793,4.796,794,4.796,795,4.796,796,3.471,797,3.471]],["title/classes/LoginUserDto.html",[64,0.01,798,2.485]],["body/classes/LoginUserDto.html",[12,0.021,19,0.291,20,0.291,21,0.258,57,0.484,63,0.291,64,0.017,65,0.017,66,0.017,76,0.552,83,1.496,85,2.287,87,2.466,88,0.942,93,0.673,149,1.647,287,3.325,450,1.987,452,3.147,455,1.486,508,2.233,509,3.822,510,3.43,511,3.43,668,4.61,798,4.178,799,5.595,800,4.983,801,4.261,802,4.261,803,6.068]],["title/injectables/LoginValidationMiddleware.html",[195,2.485,236,0.793]],["body/injectables/LoginValidationMiddleware.html",[12,0.021,19,0.209,20,0.209,21,0.185,23,0.543,40,0.963,46,1.567,57,0.501,58,0.744,63,0.209,64,0.018,65,0.014,66,0.014,76,0.397,77,1.486,80,3.721,88,0.867,91,1.209,92,0.976,93,0.397,94,0.877,98,1.486,117,1.427,118,2.719,135,2.091,150,2.227,195,3.372,208,1.512,215,1.953,219,2.662,230,2.26,232,5.378,234,2.091,236,1.076,237,1.427,241,3.794,249,2.837,302,1.818,305,3.262,309,4.134,312,2.334,330,3.527,358,5.135,409,2.861,410,2.091,455,1.2,508,2.195,529,3.273,530,3.884,540,4.242,592,3.051,594,2.662,661,3.093,662,2.662,671,3.06,698,2.719,713,3.06,746,4.188,747,3.093,750,4.242,798,3.372,804,4.188,805,3.06,806,4.898,807,4.471,808,5.278,809,6.005,810,3.579,811,3.372,812,3.093,813,6.005,814,6.005,815,4.898,816,3.579,817,3.579,818,3.06,819,3.579,820,4.898,821,3.579,822,3.579,823,4.188,824,4.188,825,3.579,826,3.579,827,3.579,828,3.579]],["title/interfaces/Paginated.html",[522,1.361,829,2.485]],["body/interfaces/Paginated.html",[12,0.021,19,0.29,20,0.29,21,0.256,46,2.176,63,0.29,65,0.017,66,0.017,76,0.55,83,1.532,93,0.796,382,4.681,455,1.482,522,1.869,524,2.897,536,2.52,808,3.767,829,4.165,830,4.241,831,5.814,832,5.814,833,5.584,834,6.799,835,4.241,836,4.241,837,4.241,838,4.241,839,3.767,840,3.767,841,3.767]],["title/modules/PaginationModule.html",[0,0.933,403,2.28]],["body/modules/PaginationModule.html",[0,1.7,2,2.011,3,2.011,4,2.562,5,2.562,6,2.26,7,3.342,8,3.342,12,0.021,16,3.106,17,2.562,18,2.403,19,0.295,20,0.295,21,0.261,57,0.487,58,1.048,63,0.295,64,0.014,65,0.017,66,0.017,403,4.55,842,4.312,843,4.312,844,4.312,845,4.689,846,5.043,847,5.043]],["title/classes/PaginationQueryDto.html",[64,0.01,848,2.485]],["body/classes/PaginationQueryDto.html",[12,0.021,19,0.284,20,0.284,21,0.251,57,0.387,63,0.284,64,0.017,65,0.017,66,0.017,76,0.538,85,2.251,88,0.927,93,0.662,94,1.653,149,1.637,382,4.646,388,3.247,390,3.035,450,1.936,455,1.463,507,4.914,508,2.176,848,4.112,849,5.532,850,4.152,851,6.469,852,6.469,853,5.771,854,5.972,855,4.855,856,4.855,857,6.469]],["title/injectables/PaginationService.html",[236,0.793,845,2.28]],["body/injectables/PaginationService.html",[12,0.021,19,0.211,20,0.211,21,0.187,46,1.155,57,0.519,58,0.75,63,0.211,64,0.01,65,0.017,66,0.014,76,0.4,77,1.494,88,0.765,91,1.894,92,1.343,93,0.622,94,1.207,98,1.095,117,1.439,149,0.838,153,1.361,186,2.28,203,1.361,236,1.083,237,1.439,249,2.85,252,2.503,297,2.109,302,2.503,312,3.233,493,3.087,529,3.176,530,2.109,536,1.834,605,3.112,751,2.485,807,3.392,808,2.742,829,3.392,831,3.087,832,3.087,833,3.087,835,3.087,836,4.213,837,3.087,838,4.797,839,2.742,840,2.742,841,2.742,845,3.112,848,4.149,853,5.153,858,3.087,859,5.609,860,3.61,861,3.61,862,3.61,863,5.063,864,5.699,865,4.578,866,5.153,867,5.153,868,6.026,869,3.61,870,4.927,871,5.609,872,3.61,873,3.61,874,3.61,875,3.61,876,3.61,877,3.61,878,3.61,879,6.783,880,6.026,881,4.927,882,3.61,883,3.61,884,3.61,885,3.61,886,3.61,887,3.61,888,3.61,889,3.61,890,3.61,891,3.61,892,3.61,893,3.61]],["title/classes/RegisterUserDto.html",[64,0.01,114,2.28]],["body/classes/RegisterUserDto.html",[12,0.021,19,0.277,20,0.277,21,0.245,57,0.51,63,0.277,64,0.016,65,0.016,66,0.016,76,0.526,83,1.541,85,2.413,87,2.413,88,0.994,93,0.71,114,3.719,149,1.682,287,3.253,288,3.051,450,1.892,452,2.996,455,1.442,505,5.475,508,2.126,509,3.74,510,4.054,511,3.266,512,4.408,513,4.057,801,4.057,802,4.057,894,5.725,895,4.744]],["title/classes/RegistryDates.html",[64,0.01,896,2.28]],["body/classes/RegistryDates.html",[12,0.021,19,0.218,20,0.218,21,0.193,23,0.414,57,0.298,63,0.218,64,0.018,65,0.014,66,0.014,76,0.414,85,2.405,88,0.886,93,0.633,110,3.464,203,2.534,231,2.259,247,2.739,248,3.47,325,3.829,353,3.829,434,3.829,447,4.31,450,1.488,455,1.235,629,4.335,631,4.335,632,4.335,643,3.47,680,3.829,725,4.31,768,3.829,790,4.996,840,3.829,896,3.183,897,5.225,898,3.192,899,4.31,900,4.959,901,5.846,902,5.225,903,5.225,904,4.31,905,5.707,906,3.733,907,5.623,908,3.47,909,6.11,910,5.04,911,5.707,912,3.733,913,3.859,914,5.225,915,4.31,916,5.04,917,5.707,918,3.733,919,4.642,920,5.04]],["title/classes/RemoveDto.html",[64,0.01,921,2.485]],["body/classes/RemoveDto.html",[12,0.021,19,0.26,20,0.26,21,0.23,23,0.627,33,4.297,46,1.81,57,0.496,63,0.26,64,0.018,65,0.016,66,0.016,76,0.493,85,1.677,88,0.691,93,0.749,94,1.654,112,2.017,142,2.419,149,1.443,215,2.609,244,2.261,376,4.033,390,2.261,450,1.775,453,3.572,455,1.385,463,3.342,464,3.806,504,4.837,507,4.297,508,1.995,529,2.121,594,2.419,661,3.572,672,3.806,673,3.381,913,4.526,915,4.837,921,3.894,922,3.806,923,4.45,924,4.45,925,4.297,926,4.45,927,4.45,928,3.806]],["title/entities/Session.html",[41,1.287,110,1.72]],["body/entities/Session.html",[12,0.021,19,0.207,20,0.207,21,0.183,23,0.392,26,1.831,40,1.405,41,2.575,57,0.442,63,0.207,64,0.01,65,0.014,66,0.014,76,0.392,83,1.422,85,2.439,88,1.004,93,0.735,96,2.468,105,3.182,106,2.851,110,2.847,111,2.468,112,1.733,123,1.922,143,2.434,203,1.333,204,1.797,206,2.641,215,1.937,247,2.177,268,2.213,274,3.691,275,2.984,283,2.468,308,4.154,313,4.154,455,1.19,566,3.068,592,2.468,614,4.113,615,4.216,620,3.955,670,3.068,701,3.068,723,4.154,900,4.113,907,4.154,929,3.024,930,4.746,931,3.024,932,3.536,933,4.858,934,5.667,935,3.536,936,4.858,937,4.154,938,3.536,939,4.539,940,3.536,941,3.536,942,4.154,943,3.536,944,4.858,945,3.024,946,3.536,947,4.858,948,3.024]],["title/controllers/SessionsController.html",[67,1.834,949,2.485]],["body/controllers/SessionsController.html",[12,0.021,19,0.279,20,0.279,21,0.246,23,0.528,41,2.106,42,3.449,43,4.486,44,2.494,48,3.747,57,0.38,58,0.991,63,0.279,64,0.018,65,0.016,66,0.016,67,3.502,69,2.422,71,3.281,73,2.814,74,4.486,75,3.21,77,1.791,212,3.21,215,2.354,234,3.449,245,2.814,365,3.21,377,3.729,533,4.065,747,3.729,812,3.729,949,4.065,950,4.076,951,5.049,952,5.905,953,5.905,954,4.486,955,5.049,956,4.486,957,4.766]],["title/modules/SessionsModule.html",[0,0.933,14,2.28]],["body/modules/SessionsModule.html",[0,1.752,2,1.798,3,1.798,4,2.291,5,2.291,6,2.02,7,3.178,8,2.291,12,0.021,14,4.374,16,2.897,17,2.291,18,2.148,19,0.264,20,0.264,21,0.233,23,0.5,27,2.291,40,0.886,41,2.034,44,1.904,47,4.876,48,2.451,57,0.552,58,0.937,63,0.264,64,0.013,65,0.016,66,0.016,69,2.897,81,3.331,123,2.451,173,3.765,189,3.104,190,2.451,203,1.699,204,2.291,205,3.425,208,2.409,215,2.274,219,2.451,255,3.425,259,3.425,365,3.1,582,3.855,747,2.847,812,2.847,949,4.306,951,3.855,958,4.508,959,4.508,960,4.508,961,4.508,962,4.508,963,4.508,964,3.855,965,4.508,966,3.425]],["title/injectables/SessionsService.html",[173,1.962,236,0.793]],["body/injectables/SessionsService.html",[12,0.021,19,0.146,20,0.146,21,0.129,23,0.418,26,1.423,40,1.347,41,2.559,43,2.868,44,2.145,45,2.967,48,3.416,57,0.475,58,0.519,63,0.146,64,0.013,65,0.011,66,0.011,76,0.276,77,1.145,83,1.494,88,0.788,91,1.715,92,1.385,93,0.563,94,1.244,95,4.36,98,1.862,105,2.916,106,2.706,111,1.267,112,1.346,117,2.289,123,1.356,143,1.717,149,1.057,150,2.554,153,1.423,173,2.052,190,1.356,191,1.457,203,0.94,204,2.58,218,1.918,236,1.116,237,0.995,244,1.267,247,2.041,249,3.193,252,1.918,255,2.868,268,2.506,269,1.575,275,3.213,281,3.228,282,3.228,283,1.267,294,2.967,295,2.133,296,2.133,297,2.661,300,3.46,301,2.133,302,2.314,312,1.799,317,1.895,324,2.868,330,2.384,332,1.717,354,1.895,361,1.895,366,2.052,379,1.717,384,2.868,385,2.868,407,3.228,410,2.661,448,2.052,454,2.868,461,1.457,531,1.799,536,1.267,547,2.868,594,2.052,605,2.384,610,1.895,615,2.868,630,3.228,654,2.133,662,2.052,670,1.575,680,2.868,696,2.384,782,3.228,863,4.945,867,2.133,900,3.496,908,1.717,930,3.228,967,2.133,968,3.228,969,2.133,970,5.374,971,5.079,972,4.343,973,2.494,974,3.228,975,3.775,976,2.494,977,2.494,978,2.494,979,3.775,980,3.775,981,2.494,982,2.133,983,2.494,984,2.133,985,2.133,986,4.554,987,2.494,988,2.494,989,2.494,990,2.494,991,2.494,992,2.494,993,3.775,994,2.494,995,2.494,996,2.494,997,3.775,998,2.494,999,2.494,1000,2.494,1001,2.494,1002,2.494,1003,2.494,1004,2.133,1005,2.494]],["title/classes/UpdateUserDto.html",[64,0.01,1006,2.28]],["body/classes/UpdateUserDto.html",[12,0.021,19,0.243,20,0.243,21,0.215,23,0.6,35,2.751,40,1.333,46,2.041,57,0.48,63,0.243,64,0.019,65,0.015,66,0.015,76,0.461,83,1.453,85,1.567,88,0.645,93,0.6,96,2.751,109,4.113,112,1.931,135,2.429,142,2.26,149,1.397,268,2.753,449,3.517,450,1.658,452,2.625,453,3.419,455,1.326,456,3.158,457,3.419,458,3.727,462,3.727,463,2.58,503,4.113,508,1.863,531,1.981,535,3.24,661,3.419,662,2.943,668,4.113,669,4.629,719,4.629,919,4.573,1006,4.027,1007,4.629,1008,5.413,1009,5.413,1010,4.629,1011,4.113,1012,5.413,1013,6.377,1014,4.157,1015,4.157,1016,4.157,1017,4.157,1018,4.157,1019,4.157,1020,4.157,1021,4.157]],["title/entities/User.html",[40,0.71,110,1.72]],["body/entities/User.html",[12,0.021,19,0.161,20,0.161,21,0.142,23,0.305,40,1.369,41,2.254,48,2.899,57,0.454,63,0.161,64,0.013,65,0.011,66,0.011,71,2.797,76,0.305,83,1.442,85,2.432,87,2.144,88,1.002,92,1.551,93,0.738,94,0.995,98,0.835,110,2.837,153,1.037,191,1.607,203,1.037,204,1.398,215,1.62,267,3.368,268,1.925,274,3.086,287,2.89,288,2.711,327,3.916,328,3.092,366,1.496,377,1.738,388,3.436,455,0.995,466,3.474,467,4.051,472,4.321,484,4.321,489,2.797,494,4.351,514,3.474,515,2.353,575,3.324,592,3.129,620,3.992,629,3.086,631,3.086,632,2.09,660,2.565,664,2.797,696,1.738,701,3.759,726,2.09,865,3.669,896,3.889,899,3.474,900,1.894,903,2.353,904,3.474,913,1.738,914,3.474,931,3.474,934,5.405,937,3.474,939,3.086,942,3.474,945,3.474,948,2.353,1022,2.353,1023,3.086,1024,2.751,1025,2.751,1026,2.751,1027,4.062,1028,2.751,1029,5.332,1030,2.751,1031,2.751,1032,4.062,1033,2.751,1034,2.751,1035,4.062,1036,4.062,1037,4.062,1038,4.864,1039,2.751,1040,4.56,1041,2.751,1042,4.062,1043,4.062,1044,2.751,1045,3.474,1046,4.062,1047,4.062,1048,2.751,1049,2.751,1050,2.751,1051,2.751,1052,2.751,1053,4.062,1054,2.751,1055,2.751,1056,2.751,1057,2.353,1058,2.751,1059,2.09,1060,2.751,1061,2.751,1062,2.353,1063,2.751,1064,2.751,1065,2.751]],["title/classes/UserChangePasswordDto.html",[64,0.01,84,2.109]],["body/classes/UserChangePasswordDto.html",[12,0.021,19,0.295,20,0.295,21,0.261,57,0.402,63,0.295,64,0.014,65,0.017,66,0.017,76,0.559,83,1.502,84,3.571,85,2.304,88,0.949,90,4.154,93,0.678,149,1.652,450,2.011,455,1.497,509,4.091,510,3.472,511,3.472,1066,5.625,1067,4.312,1068,5.625,1069,5.625,1070,5.043,1071,5.043]],["title/controllers/UsersController.html",[67,1.834,1072,2.485]],["body/controllers/UsersController.html",[12,0.021,19,0.126,20,0.126,21,0.111,23,0.776,26,1.269,40,1.399,46,1.969,57,0.451,58,0.447,63,0.126,64,0.006,65,0.009,66,0.009,67,2.108,69,1.092,71,1.48,76,0.238,77,1.021,81,1.966,83,1.188,85,1.921,88,0.791,91,1.722,92,1.595,93,0.706,94,1.15,96,2.108,97,2.939,98,1.866,112,1.201,117,1.872,118,2.557,121,2.879,135,1.966,141,1.838,142,1.168,148,1.48,149,0.499,150,2.607,153,1.921,174,2.59,218,2.59,234,1.966,267,2.126,268,2.752,283,1.71,300,2.557,322,4.236,328,2.771,354,3.152,373,2.59,376,1.966,449,3.301,462,4.027,529,1.977,531,2.429,555,2.879,575,1.48,592,2.747,643,4.236,658,4.236,701,2.126,721,4.674,751,1.48,758,3.567,762,3.152,772,3.873,778,4.024,807,2.317,902,1.838,908,2.317,913,3.569,921,3.232,964,2.879,1006,3.798,1010,2.879,1059,3.152,1072,2.317,1073,1.838,1074,3.366,1075,3.366,1076,3.366,1077,2.557,1078,4.015,1079,2.879,1080,1.838,1081,2.149,1082,2.149,1083,4.695,1084,6.153,1085,2.149,1086,6.153,1087,2.149,1088,4.695,1089,3.366,1090,5.85,1091,4.695,1092,2.149,1093,2.149,1094,2.149,1095,3.366,1096,3.366,1097,2.149,1098,2.149,1099,2.149,1100,2.149,1101,4.015,1102,2.149,1103,2.149,1104,2.149,1105,3.366,1106,2.149,1107,2.149,1108,2.149,1109,1.838,1110,1.838,1111,1.838,1112,5.407,1113,4.695,1114,3.366,1115,5.407,1116,2.149,1117,2.149,1118,2.149,1119,2.149,1120,2.149,1121,2.149,1122,2.149,1123,2.149,1124,2.149,1125,2.149,1126,1.838,1127,2.149,1128,2.149,1129,2.149,1130,2.149,1131,2.149,1132,2.149,1133,2.149,1134,2.149,1135,2.149]],["title/modules/UsersModule.html",[0,0.933,15,2.28]],["body/modules/UsersModule.html",[0,1.685,2,2.144,3,1.329,4,1.693,5,1.693,6,1.494,7,2.732,8,1.693,12,0.021,15,4.325,16,2.369,17,1.693,18,1.588,19,0.195,20,0.195,21,0.172,23,0.369,26,2.195,27,2.959,30,4.01,31,3.21,39,2.944,40,1.384,41,2.265,42,3.711,44,2.893,45,3.402,49,3.678,55,3.21,57,0.531,58,0.693,63,0.195,64,0.009,65,0.013,66,0.013,69,2.369,73,2.222,74,3.542,75,2.534,87,2.195,170,3.617,174,3.381,189,3.702,190,1.811,191,1.947,201,2.85,204,2.369,205,2.532,219,2.534,231,2.089,247,2.61,254,2.089,261,4.981,266,3.542,298,2.724,368,3.21,439,3.987,587,3.542,647,3.21,660,2.944,777,3.542,778,3.678,787,3.987,807,3.21,812,2.944,956,3.542,968,3.987,974,3.987,1072,4.22,1111,2.85,1136,3.332,1137,3.332,1138,3.332,1139,3.332,1140,4.662,1141,4.662,1142,3.987,1143,3.987,1144,4.662,1145,4.01,1146,3.987,1147,3.987,1148,3.987,1149,4.662,1150,4.662,1151,4.662,1152,4.662,1153,4.662,1154,4.662,1155,2.85,1156,3.332,1157,3.332]],["title/injectables/UsersService.html",[174,1.834,236,0.793]],["body/injectables/UsersService.html",[12,0.021,19,0.111,20,0.111,21,0.098,23,0.338,35,1.549,40,1.427,44,1.614,45,3.144,46,0.607,57,0.446,58,0.394,63,0.111,64,0.015,65,0.009,66,0.009,76,0.21,77,0.925,83,1.356,84,2.801,87,2.515,88,0.869,90,1.198,91,1.818,92,1.575,93,0.597,94,1.318,98,1.633,117,2.146,135,1.781,144,1.441,145,1.441,149,0.707,150,1.745,153,2.234,174,1.549,190,1.031,203,0.715,204,1.549,208,2.558,236,0.67,237,0.756,244,0.964,246,2.607,247,2.656,249,3.436,252,2.224,254,2.765,258,1.306,259,2.316,267,2.414,268,2.697,269,3.234,287,1.549,288,1.453,289,1.622,290,2.607,291,1.441,297,1.781,298,2.233,299,2.607,302,3.185,304,2.607,305,3.144,309,3.976,312,2.565,317,1.441,322,2.099,324,2.903,327,2.099,328,1.657,329,1.306,330,2.414,331,3.268,345,1.622,346,1.441,347,1.198,348,2.607,350,1.441,351,1.622,352,1.622,365,1.657,366,1.657,368,2.099,373,2.224,376,2.233,388,1.031,390,0.964,410,2.991,448,2.077,449,2.991,454,2.316,531,2.285,536,1.942,547,2.316,557,1.306,575,1.306,609,2.316,643,3.705,647,2.099,700,2.414,721,4.252,778,2.764,863,4.503,864,4.603,865,4.089,866,3.743,896,1.925,913,2.764,966,2.316,972,4.1,982,1.622,984,3.268,1004,2.607,1006,3.534,1011,2.316,1059,2.316,1068,3.268,1069,3.268,1078,3.743,1079,3.268,1080,2.607,1101,2.607,1109,1.622,1110,1.622,1126,5.179,1143,2.607,1155,1.622,1158,1.622,1159,2.607,1160,3.048,1161,3.048,1162,3.822,1163,1.897,1164,1.897,1165,3.048,1166,3.048,1167,3.048,1168,3.048,1169,1.897,1170,1.897,1171,1.897,1172,4.377,1173,1.897,1174,3.048,1175,1.897,1176,3.048,1177,1.897,1178,3.048,1179,1.897,1180,1.897,1181,1.897,1182,1.897,1183,3.048,1184,3.048,1185,1.897,1186,3.822,1187,3.822,1188,1.897,1189,1.897,1190,1.897,1191,1.622,1192,1.897,1193,1.897,1194,1.897,1195,1.897]],["title/classes/UsersSubscriber.html",[64,0.01,1145,2.485]],["body/classes/UsersSubscriber.html",[12,0.021,19,0.186,20,0.333,21,0.164,23,0.352,40,1.382,45,1.855,46,1.676,57,0.418,63,0.186,64,0.015,65,0.013,66,0.013,76,0.352,77,1.367,81,1.855,87,1.974,88,0.885,91,1.769,92,1.428,93,0.632,94,1.283,98,1.729,110,3.408,123,1.726,149,1.046,150,2.273,153,1.197,203,1.197,218,2.289,219,3.099,230,2.846,231,1.423,247,2.883,249,3.177,252,2.897,254,2.996,258,3.102,267,2.846,291,2.412,297,2.632,298,3.06,302,2.289,312,2.496,347,2.846,350,3.423,365,2.449,373,3.177,450,1.266,461,2.632,584,3.423,781,4.751,919,3.423,956,4.331,969,2.715,970,5.62,1011,2.412,1145,3.102,1146,3.853,1148,4.875,1196,2.715,1197,4.506,1198,6.02,1199,5.238,1200,4.506,1201,4.506,1202,5.701,1203,3.175,1204,4.506,1205,5.701,1206,3.175,1207,4.506,1208,6.572,1209,4.506,1210,5.701,1211,3.175,1212,3.175,1213,4.506,1214,4.506,1215,3.175,1216,4.506,1217,3.175,1218,4.506,1219,3.175,1220,3.175]],["title/coverage.html",[1221,3.743]],["body/coverage.html",[6,1.326,12,0.021,21,0.153,40,0.842,41,1.055,64,0.019,65,0.012,66,0.012,67,2.558,68,2.037,70,2.53,84,1.728,90,1.868,93,0.328,106,1.25,110,2.041,114,1.868,117,1.18,124,1.503,126,2.248,128,1.868,130,2.248,136,1.868,139,2.037,171,1.868,172,1.868,173,1.608,174,1.503,195,2.037,209,1.608,236,1.486,238,2.53,254,1.326,278,1.868,294,1.728,359,2.037,360,2.53,393,2.248,414,2.248,449,1.728,451,2.53,452,3.486,509,2.502,512,2.949,522,2.208,523,2.037,525,3.254,526,3.254,565,2.53,580,2.248,596,2.248,597,2.53,598,2.53,609,2.248,645,2.53,658,2.037,659,2.53,664,2.037,674,2.53,675,3.254,703,2.248,717,2.53,718,2.53,731,2.53,776,2.53,785,2.53,798,2.037,799,2.53,804,2.53,805,2.53,811,2.037,829,2.037,830,2.53,845,1.868,848,2.037,849,2.53,850,2.53,858,2.53,894,2.53,896,1.868,897,2.53,898,2.53,921,2.037,922,2.53,925,2.248,929,2.53,949,2.037,950,2.53,967,2.53,1006,1.868,1007,2.53,1022,2.53,1066,2.53,1067,2.53,1072,2.037,1073,2.53,1077,2.248,1145,2.037,1158,2.53,1196,2.53,1221,2.248,1222,2.958,1223,2.53,1224,7.148,1225,7.482,1226,7.267,1227,4.283,1228,2.958,1229,2.53,1230,3.663,1231,2.53,1232,2.53,1233,2.53,1234,5.386,1235,5.519,1236,5.035,1237,6.298,1238,6.107,1239,3.663,1240,4.306,1241,3.663,1242,5.621,1243,4.72,1244,2.53,1245,2.53,1246,4.72,1247,2.53,1248,2.53,1249,2.958,1250,2.53,1251,2.53,1252,2.53,1253,2.958,1254,2.958,1255,4.283,1256,2.958,1257,2.958]],["title/dependencies.html",[3,1.731,1258,2.578]],["body/dependencies.html",[3,1.905,12,0.021,58,0.993,64,0.017,65,0.017,66,0.017,142,2.597,184,3.289,186,3.017,188,3.629,190,2.597,203,1.8,206,3.214,222,3.289,363,4.085,508,2.141,530,2.791,677,4.421,697,3.629,702,3.017,818,4.085,1259,4.777,1260,4.777,1261,6.422,1262,4.777,1263,4.777,1264,4.777,1265,4.085,1266,4.777,1267,4.777,1268,4.777,1269,4.777,1270,4.777,1271,4.777,1272,5.913,1273,4.777,1274,5.913,1275,4.777,1276,4.777,1277,4.777,1278,4.085,1279,4.777,1280,4.777,1281,4.777,1282,4.777,1283,4.777,1284,4.777,1285,4.777,1286,4.777,1287,4.777,1288,4.777]],["title/miscellaneous/enumerations.html",[1289,1.761,1290,3.713]],["body/miscellaneous/enumerations.html",[12,0.02,26,2.362,40,1.432,65,0.016,66,0.016,76,0.502,215,1.805,231,2.029,248,3.117,328,2.461,356,3.872,390,3.523,448,3.691,465,3.872,482,4.89,484,4.344,488,5.36,489,4.315,490,4.762,494,3.117,531,2.158,557,3.117,566,4.379,660,2.859,773,3.872,1023,4.762,1038,4.89,1289,2.645,1290,3.872,1291,4.89,1292,5.718,1293,5.718,1294,5.718,1295,4.528,1296,6.584,1297,4.528,1298,4.528,1299,4.528,1300,4.762,1301,4.528,1302,4.528,1303,3.872,1304,4.528,1305,4.528,1306,4.528,1307,4.528,1308,4.528,1309,4.528,1310,4.528,1311,4.528,1312,4.528,1313,4.528,1314,4.528,1315,4.528,1316,4.528,1317,4.528]],["title/miscellaneous/functions.html",[1289,1.761,1318,3.713]],["body/miscellaneous/functions.html",[6,3.177,12,0.018,26,2.122,65,0.018,66,0.018,76,0.624,811,4.492,1252,4.814,1289,3.288,1318,4.814,1319,5.629,1320,5.629,1321,5.629,1322,5.629]],["title/index.html",[76,0.334,1323,3.014,1324,3.014]],["body/index.html",[12,0.021,36,4.323,65,0.017,66,0.017,458,4.533,520,4.651,560,3.841,562,3.841,954,3.841,1221,3.841,1300,3.841,1325,5.055,1326,7.207,1327,5.055,1328,6.091,1329,5.055,1330,6.122,1331,5.055,1332,5.055,1333,5.055,1334,5.235,1335,5.055,1336,5.055,1337,5.055,1338,5.055,1339,5.055,1340,4.323,1341,4.323,1342,5.055,1343,5.055,1344,4.323]],["title/modules.html",[2,1.965]],["body/modules.html",[1,3.594,2,2.081,11,3.297,12,0.017,13,3.297,14,3.297,15,3.297,65,0.017,66,0.017,170,2.838,343,6.203,403,3.297,425,3.297,426,3.297,1345,7.254,1346,7.254,1347,7.36,1348,6.241,1349,6.241]],["title/overview.html",[1350,4.213]],["body/overview.html",[0,1.064,1,4.907,2,1.641,3,1.641,4,2.091,5,2.091,6,1.845,7,2.091,8,2.091,9,3.52,10,3.52,11,4.627,12,0.021,13,4.461,14,4.163,15,4.35,16,2.733,17,2.091,18,1.962,65,0.015,66,0.015,69,2.091,124,3.044,167,3.52,168,3.52,169,3.52,170,3.797,171,3.784,172,3.784,173,3.453,174,3.228,204,2.091,237,1.641,254,2.847,400,3.52,401,3.52,402,3.52,403,4.27,423,3.52,424,3.52,425,3.784,426,3.784,450,1.641,496,3.52,524,2.405,842,3.52,843,3.52,844,3.52,845,4.35,1350,3.52,1351,4.116,1352,3.52,1353,5.379,1354,4.116]],["title/properties.html",[455,1.064,1258,2.578]],["body/properties.html",[12,0.02,23,0.627,65,0.018,66,0.018,455,1.386,542,3.574,1300,4.3,1340,4.84,1341,4.84,1344,4.84,1355,5.66,1356,5.66]],["title/miscellaneous/variables.html",[589,3.299,1289,1.761]],["body/miscellaneous/variables.html",[3,0.467,12,0.021,26,1.018,29,2.759,35,2.036,38,0.559,39,1.705,40,1.215,44,0.495,45,0.685,46,1.528,54,0.89,55,0.807,64,0.009,65,0.006,66,0.008,67,1.372,69,0.596,75,0.637,76,0.13,77,0.819,83,1.381,87,1.51,88,0.501,92,1.441,93,0.551,94,0.499,97,1.107,98,0.618,105,2.427,106,2.463,109,0.89,111,2.315,112,2.013,117,0.467,126,2.051,128,2.53,130,2.451,153,2.164,208,1.818,209,2.178,211,2.221,212,1.107,213,0.807,215,0.467,219,0.637,231,0.525,234,1.577,241,3.575,242,1.002,244,0.596,245,1.537,247,1.795,266,3.629,269,2.037,275,0.559,283,1.035,288,1.741,305,1.885,307,1.002,311,0.89,312,1.909,321,1.002,325,0.89,329,0.807,330,0.74,332,0.807,346,0.89,362,1.002,365,3.121,366,1.468,376,2.902,377,0.74,379,1.402,382,3.42,384,1.547,385,2.451,388,3.417,390,3.445,406,1.741,408,1.547,409,0.685,412,4.014,413,1.19,414,1.547,420,1.002,431,2.758,440,1.741,448,1.468,453,0.74,455,0.981,457,2.037,458,1.402,461,0.685,462,3.288,463,1.741,467,0.89,468,1.741,472,1.547,475,1.741,477,1.741,478,1.002,479,1.002,483,1.002,487,2.309,494,1.402,495,1.002,501,1.002,508,1.795,509,2.34,512,2.515,520,2.051,529,2.779,531,1.287,533,1.402,535,0.596,536,0.596,537,0.89,542,3.137,546,1.741,548,1.002,551,1.741,557,0.807,559,1.402,560,0.89,562,2.051,569,1.741,570,1.002,572,1.002,573,2.759,580,1.547,584,0.89,585,1.002,589,1.547,592,2.685,593,1.741,594,1.468,610,1.547,612,2.309,614,0.807,620,0.74,637,1.002,653,0.89,655,1.002,660,0.74,661,2.53,662,1.468,664,0.807,670,0.74,673,0.89,679,0.89,691,2.759,694,1.002,696,0.74,697,0.89,698,0.89,700,0.74,701,2.307,703,2.051,706,3.044,707,1.002,715,1.741,720,1.002,726,2.051,741,1.002,747,2.307,748,1.002,751,0.807,758,1.547,762,2.451,764,3.124,768,1.547,777,0.89,781,0.89,790,2.051,811,3.535,812,0.74,823,1.741,824,1.741,839,0.89,841,0.89,901,2.309,908,0.807,925,2.451,928,1.002,939,0.89,954,1.547,955,1.002,966,0.89,985,1.002,1023,1.547,1040,1.002,1045,2.759,1057,1.002,1062,1.002,1077,1.547,1142,2.309,1147,1.002,1159,1.002,1191,1.002,1223,1.741,1229,1.002,1230,1.002,1231,1.002,1232,1.741,1233,1.002,1234,2.759,1239,1.002,1240,3.124,1241,3.897,1242,2.309,1243,3.124,1244,2.309,1245,2.309,1246,3.124,1247,2.309,1248,2.309,1250,1.002,1251,1.002,1265,2.759,1278,1.002,1289,0.685,1291,1.002,1303,1.741,1328,1.002,1334,2.309,1352,1.741,1357,1.172,1358,1.172,1359,4.776,1360,2.036,1361,2.036,1362,1.172,1363,1.172,1364,1.172,1365,1.172,1366,2.036,1367,1.172,1368,1.172,1369,1.172,1370,1.172,1371,1.172,1372,1.172,1373,2.036,1374,1.172,1375,2.7,1376,3.226,1377,2.036,1378,2.036,1379,2.036,1380,2.036,1381,3.226,1382,1.172,1383,1.172,1384,1.172,1385,2.036,1386,1.172,1387,1.172,1388,1.172,1389,1.172,1390,1.172,1391,1.172,1392,3.226,1393,1.172,1394,1.172,1395,1.172,1396,2.7,1397,2.7,1398,2.036,1399,1.172,1400,1.172,1401,1.172,1402,1.172,1403,1.172,1404,1.172,1405,2.036,1406,1.172,1407,1.172,1408,1.172,1409,1.172,1410,1.172,1411,1.172,1412,1.172,1413,1.172,1414,2.036,1415,2.036,1416,1.172,1417,1.172,1418,4.303,1419,1.172,1420,1.172,1421,1.172,1422,1.172,1423,1.172,1424,1.172,1425,1.172,1426,1.172,1427,1.172,1428,1.172,1429,1.172,1430,1.172,1431,1.172,1432,3.653,1433,2.7,1434,2.7,1435,1.172,1436,2.7,1437,1.172,1438,1.172,1439,2.036,1440,3.226,1441,2.036,1442,1.172,1443,1.172,1444,1.172,1445,3.226,1446,1.172,1447,1.172,1448,1.172,1449,1.172,1450,1.172,1451,1.172,1452,2.7,1453,1.172,1454,2.7,1455,1.172,1456,1.172,1457,1.172,1458,1.172,1459,1.172,1460,1.172,1461,1.172,1462,2.036,1463,2.036,1464,2.7,1465,4.776,1466,2.036,1467,2.036,1468,3.226,1469,1.172,1470,2.7,1471,1.172,1472,2.036,1473,2.036,1474,2.036,1475,3.226,1476,1.172,1477,1.172,1478,1.172,1479,1.172,1480,1.172,1481,1.172,1482,1.172,1483,2.036,1484,2.036,1485,1.172,1486,1.172,1487,1.172,1488,1.172,1489,1.172,1490,1.172,1491,1.172,1492,1.172,1493,1.172,1494,1.172,1495,1.172,1496,1.172,1497,1.172,1498,1.172,1499,2.7,1500,1.172,1501,1.172,1502,1.172,1503,1.172,1504,1.172,1505,1.172,1506,3.653,1507,1.172,1508,2.7,1509,2.036,1510,4.303,1511,1.172,1512,2.036,1513,1.172,1514,2.7,1515,2.7,1516,1.172,1517,1.172,1518,1.172,1519,1.172,1520,3.653,1521,1.172,1522,1.172,1523,1.172,1524,1.172,1525,2.036,1526,2.036,1527,1.172,1528,1.172,1529,1.172,1530,1.172,1531,1.172,1532,1.172,1533,1.172,1534,1.172,1535,1.172,1536,1.172,1537,1.172,1538,5.284,1539,1.172,1540,2.036,1541,3.653,1542,2.036,1543,3.226,1544,3.653,1545,2.036,1546,3.226,1547,1.172,1548,2.036,1549,1.172,1550,2.036,1551,2.036,1552,2.036,1553,1.172,1554,1.172,1555,2.7,1556,2.036,1557,1.172,1558,3.653,1559,1.172,1560,1.172,1561,1.172,1562,2.036,1563,1.172,1564,1.172,1565,1.172,1566,1.172,1567,2.036,1568,1.172,1569,1.172,1570,1.172,1571,1.172,1572,1.172,1573,2.7,1574,1.172,1575,1.172,1576,1.172,1577,1.172,1578,1.172,1579,1.172,1580,1.172,1581,1.172,1582,1.172,1583,1.172,1584,1.172,1585,1.172,1586,2.036,1587,2.036,1588,2.036,1589,1.172,1590,1.172,1591,1.172,1592,1.172]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1234,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1355,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1277,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1285,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1288,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1276,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1280,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":1235,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1236,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":853,"title":{},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{}}}],["1.0",{"_index":577,"title":{},"body":{"interfaces/Device.html":{}}}],["1.0.0",{"_index":1281,"title":{},"body":{"dependencies.html":{}}}],["1.0.16",{"_index":1273,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1260,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1226,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":389,"title":{},"body":{"injectables/BcryptService.html":{}}}],["10.0.0",{"_index":1261,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1269,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1266,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1263,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1225,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":994,"title":{},"body":{"injectables/SessionsService.html":{}}}],["11",{"_index":1353,"title":{},"body":{"overview.html":{}}}],["127.0.0.1",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.13.3",{"_index":1279,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1352,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.5",{"_index":578,"title":{},"body":{"interfaces/Device.html":{}}}],["2/2",{"_index":1238,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":1090,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":1083,"title":{},"body":{"controllers/UsersController.html":{}}}],["24",{"_index":992,"title":{},"body":{"injectables/SessionsService.html":{}}}],["2bdd",{"_index":1018,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["3",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.2.2",{"_index":1262,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1237,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":987,"title":{},"body":{"injectables/SessionsService.html":{}}}],["4",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1274,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1249,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1254,"title":{},"body":{"coverage.html":{}}}],["4e7b",{"_index":1019,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["5",{"_index":1354,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":1271,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1275,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1227,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":1027,"title":{},"body":{"entities/User.html":{}}}],["6/6",{"_index":1255,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":993,"title":{},"body":{"injectables/SessionsService.html":{}}}],["7.4.0",{"_index":1268,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1287,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":1283,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1228,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1253,"title":{},"body":{"coverage.html":{}}}],["8721c3c99ea4",{"_index":1021,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["9",{"_index":1351,"title":{},"body":{"overview.html":{}}}],["9/9",{"_index":1256,"title":{},"body":{"coverage.html":{}}}],["9\\.]+)[\\);]/.exec(useragent)?.[1",{"_index":1554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._",{"_index":1550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._]+)[\\);]/.exec(useragent)?.[1",{"_index":1561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9f53",{"_index":1020,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["_",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":646,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":448,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":682,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["accessing",{"_index":782,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/SessionsService.html":{}}}],["account",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":642,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["actions",{"_index":956,"title":{},"body":{"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["activate",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["activate'})@isoptional()@isenum(userstatus",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["activated",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["activation",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["active",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["adapt",{"_index":556,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["add",{"_index":637,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":955,"title":{},"body":{"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":533,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["adhere",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":665,"title":{},"body":{"classes/IdDto.html":{}}}],["admin",{"_index":1296,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["administrative",{"_index":1297,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["affect",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":1538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["agent.decorator.ts",{"_index":1232,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aggregating",{"_index":430,"title":{},"body":{"modules/CoreModule.html":{}}}],["algorithm",{"_index":364,"title":{},"body":{"injectables/BcryptService.html":{}}}],["alias",{"_index":1001,"title":{},"body":{"injectables/SessionsService.html":{}}}],["allow",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["allowed",{"_index":694,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["allowing",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":366,"title":{},"body":{"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["along",{"_index":1003,"title":{},"body":{"injectables/SessionsService.html":{}}}],["alter",{"_index":636,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["always",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["android",{"_index":573,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["android/.test(useragent",{"_index":1553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":1010,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":1112,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1113,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({description",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({enum",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":1114,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1115,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1119,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_pipe",{"_index":415,"title":{},"body":{"modules/CommonModule.html":{}}}],["applicable",{"_index":576,"title":{},"body":{"interfaces/Device.html":{}}}],["application",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"injectables/LocalStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["application's",{"_index":433,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtStrategy.html":{}}}],["application'})@apiresponse({status",{"_index":1089,"title":{},"body":{"controllers/UsersController.html":{}}}],["applies",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apply",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["applydecorators(defaultisboolean(validationoptions",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":439,"title":{},"body":{"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["associated",{"_index":723,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Session.html":{}}}],["async",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["asynchronous",{"_index":1320,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["atom",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":675,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":687,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:33",{"_index":692,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":753,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/config/jwt.config",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":704,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/dto/login",{"_index":816,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["auth/login",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["authenticated",{"_index":779,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authenticating",{"_index":786,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authentication",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":676,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":683,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":784,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1300,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["authorization",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice's",{"_index":795,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["automatic",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":901,"title":{},"body":{"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1349,"title":{},"body":{"modules.html":{}}}],["await",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["badrequestexception",{"_index":814,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["badrequestexception(errors",{"_index":828,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["balancer",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":696,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["baseurl",{"_index":881,"title":{},"body":{"injectables/PaginationService.html":{}}}],["basic",{"_index":1304,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":363,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":399,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.gensalt(roundssalt",{"_index":395,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.hash(data",{"_index":398,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcryptservice",{"_index":359,"title":{"injectables/BcryptService.html":{}},"body":{"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["bearer",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":781,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["beforeinsert",{"_index":1200,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeinsert(event",{"_index":1204,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1201,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate(event",{"_index":1209,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["behind",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["being",{"_index":1582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":552,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["between",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":376,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["boolean'})@isoptional()@isboolean",{"_index":923,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator",{"_index":927,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator.ts",{"_index":1240,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["booleans",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1347,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1345,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":370,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["bug",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buildmessage",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["built",{"_index":528,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["business",{"_index":1143,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["call",{"_index":688,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["callback",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["called",{"_index":405,"title":{},"body":{"modules/CommonModule.html":{},"injectables/LocalStrategy.html":{}}}],["calling",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calls",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["canactivate",{"_index":684,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":690,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":1043,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cases",{"_index":570,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["cast",{"_index":1220,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["catch",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["central",{"_index":428,"title":{},"body":{"modules/CoreModule.html":{}}}],["certain",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["change",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changelog",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changepassword",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["changes",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":612,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":706,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":64,"title":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{},"overview.html":{}}}],["clean",{"_index":1152,"title":{},"body":{"modules/UsersModule.html":{}}}],["client's",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":400,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":401,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_imports",{"_index":402,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":423,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":424,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_paginationmodule",{"_index":842,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_exports",{"_index":843,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_paginationmodule_providers",{"_index":844,"title":{},"body":{"modules/PaginationModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule",{"_index":958,"title":{},"body":{"modules/SessionsModule.html":{}}}],["cluster_sessionsmodule_providers",{"_index":959,"title":{},"body":{"modules/SessionsModule.html":{}}}],["cluster_usersmodule",{"_index":1136,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1137,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1138,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":934,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column(undefined",{"_index":1033,"title":{},"body":{"entities/User.html":{}}}],["column({length",{"_index":1026,"title":{},"body":{"entities/User.html":{}}}],["column({select",{"_index":1030,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":931,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column({unique",{"_index":945,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["combines",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commas",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commented",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["commit",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint.config.ts",{"_index":1223,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commitlint/config",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint/format",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":447,"title":{},"body":{"modules/CoreModule.html":{},"classes/RegistryDates.html":{}}}],["common/common.module",{"_index":443,"title":{},"body":{"modules/CoreModule.html":{}}}],["commonmodule",{"_index":170,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":368,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["compare(data",{"_index":369,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compared",{"_index":1302,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compares",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["comparing",{"_index":361,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionsService.html":{}}}],["compodoc/compodoc",{"_index":1259,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":968,"title":{},"body":{"injectables/SessionsService.html":{},"modules/UsersModule.html":{}}}],["concerns",{"_index":1154,"title":{},"body":{"modules/UsersModule.html":{}}}],["concrete",{"_index":649,"title":{},"body":{"injectables/HashingService.html":{}}}],["config",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/database.config",{"_index":563,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/jwt.config",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":586,"title":{},"body":{"modules/EnvModule.html":{}}}],["configtype",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["conforms",{"_index":534,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["connect",{"_index":1159,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":546,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["consecutive",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considered",{"_index":1063,"title":{},"body":{"entities/User.html":{}}}],["console.log('user",{"_index":1531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":618,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["constraints",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(authservice",{"_index":788,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(datasource",{"_index":969,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(jwtconfiguration",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":685,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(request",{"_index":860,"title":{},"body":{"injectables/PaginationService.html":{}}}],["constructor(userrepository",{"_index":1163,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(loginvalidationmiddleware).forroutes('auth/login",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["contain",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["container",{"_index":1166,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["content",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["context",{"_index":408,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["continuous",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('sessions",{"_index":957,"title":{},"body":{"controllers/SessionsController.html":{}}}],["controller('users",{"_index":1118,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["conventional",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convert",{"_index":819,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["converted",{"_index":1586,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core/common/common.module",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["core/common/decorators/validators/is",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["core/common/dto/id.dto",{"_index":1116,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/remove.dto",{"_index":1117,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/user",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["core/common/embedded/registry",{"_index":1050,"title":{},"body":{"entities/User.html":{}}}],["core/common/enums/user",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["core/common/hashing/hashing.service",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["core/common/interfaces/custom",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/device.interface",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/jwt",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["core/core.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["correcting",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corresponding",{"_index":783,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["coverage",{"_index":1221,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cpu",{"_index":1549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":531,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1120,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1080,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(userid",{"_index":975,"title":{},"body":{"injectables/SessionsService.html":{}}}],["created",{"_index":908,"title":{},"body":{"classes/RegistryDates.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":629,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":905,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createparamdecorator",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":449,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":902,"title":{},"body":{"classes/RegistryDates.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["crud",{"_index":974,"title":{},"body":{"injectables/SessionsService.html":{},"modules/UsersModule.html":{}}}],["cryptographic",{"_index":651,"title":{},"body":{"injectables/HashingService.html":{}}}],["ctx",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":536,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1309,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currentpage",{"_index":837,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["currentpassword",{"_index":1068,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":412,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["customizing",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customrequest",{"_index":523,"title":{"interfaces/CustomRequest.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["customuser",{"_index":294,"title":{"interfaces/CustomUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionsService.html":{},"coverage.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiparam({name",{"_index":1106,"title":{},"body":{"controllers/UsersController.html":{}}}],["data_source_database",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_host",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_password",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_port",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_url",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_username",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":444,"title":{},"body":{"modules/CoreModule.html":{}}}],["databaseconfig",{"_index":550,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":425,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":970,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["datasource.subscribers.push(this",{"_index":1215,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["date",{"_index":900,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["date().setmilliseconds(31",{"_index":991,"title":{},"body":{"injectables/SessionsService.html":{}}}],["date(new",{"_index":990,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dates",{"_index":904,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dates.embedded",{"_index":1051,"title":{},"body":{"entities/User.html":{}}}],["dates.embedded.ts",{"_index":898,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["dates.embedded.ts:14",{"_index":906,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:21",{"_index":918,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:29",{"_index":912,"title":{},"body":{"classes/RegistryDates.html":{}}}],["days",{"_index":988,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dcbec18c",{"_index":1017,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["deactivate",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":1310,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["debugging",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":672,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{}}}],["declares",{"_index":1141,"title":{},"body":{"modules/UsersModule.html":{}}}],["decoded",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorated",{"_index":952,"title":{},"body":{"controllers/SessionsController.html":{}}}],["decorator",{"_index":365,"title":{},"body":{"injectables/BcryptService.html":{},"modules/EnvModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{}}}],["decorators/ipaddress.decorator",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user.decorator",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/validators/is",{"_index":926,"title":{},"body":{"classes/RemoveDto.html":{}}}],["default",{"_index":388,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"classes/PaginationQueryDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaults",{"_index":1040,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["defines",{"_index":660,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":537,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"miscellaneous/variables.html":{}}}],["delegate",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["delete",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":1132,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({description",{"_index":1099,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteat",{"_index":632,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deleted",{"_index":914,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deletedat",{"_index":1037,"title":{},"body":{"entities/User.html":{}}}],["deletedatecolumn",{"_index":911,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deleting",{"_index":1168,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletion",{"_index":903,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dependency",{"_index":966,"title":{},"body":{"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["deps",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describing",{"_index":663,"title":{},"body":{"classes/IdDto.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"properties.html":{}}}],["destructure",{"_index":1216,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["details",{"_index":540,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["detection",{"_index":1566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["determine",{"_index":1062,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":693,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["development",{"_index":560,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device",{"_index":106,"title":{"interfaces/Device.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":557,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["docs",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1077,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["documenting",{"_index":1008,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":1186,"title":{},"body":{"injectables/UsersService.html":{}}}],["don't",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dots",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":600,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["down(queryrunner",{"_index":602,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["drop",{"_index":644,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["dto",{"_index":661,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["dto/create",{"_index":1109,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/pagination",{"_index":872,"title":{},"body":{"injectables/PaginationService.html":{}}}],["dto/register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":1110,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos",{"_index":1590,"title":{},"body":{"miscellaneous/variables.html":{}}}],["due",{"_index":1315,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["during",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["e.g",{"_index":559,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1335,"title":{},"body":{"index.html":{}}}],["each",{"_index":939,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["eachprefix",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easier",{"_index":555,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/UsersController.html":{}}}],["easily",{"_index":440,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["embedded",{"_index":1035,"title":{},"body":{"entities/User.html":{}}}],["enable",{"_index":587,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["enableimplicitconversion",{"_index":1588,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":1584,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabling",{"_index":1167,"title":{},"body":{"injectables/UsersService.html":{}}}],["encapsulates",{"_index":1151,"title":{},"body":{"modules/UsersModule.html":{}}}],["encapsulating",{"_index":435,"title":{},"body":{"modules/CoreModule.html":{}}}],["encrypted",{"_index":371,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["encryption",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1086,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoints",{"_index":1075,"title":{},"body":{"controllers/UsersController.html":{}}}],["enforces",{"_index":671,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["enforcing",{"_index":1578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":1592,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":670,"title":{},"body":{"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["ensuring",{"_index":777,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["entities/session.entity",{"_index":961,"title":{},"body":{"modules/SessionsModule.html":{}}}],["entities/user.entity",{"_index":1155,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":110,"title":{"entities/Session.html":{},"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["entitysubscriberinterface",{"_index":1199,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["entry",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["enum('activate",{"_index":624,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enum('admin",{"_index":626,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enumeration",{"_index":1308,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1290,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.constants",{"_index":581,"title":{},"body":{"modules/EnvModule.html":{}}}],["env/env.module",{"_index":445,"title":{},"body":{"modules/CoreModule.html":{}}}],["env_validation_schema",{"_index":580,"title":{},"body":{"modules/EnvModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":558,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["envmodule",{"_index":426,"title":{"modules/EnvModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/EnvModule.html":{},"modules.html":{},"overview.html":{}}}],["error",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":813,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["errors.length",{"_index":827,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["essential",{"_index":446,"title":{},"body":{"modules/CoreModule.html":{}}}],["etc",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1208,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["events",{"_index":1148,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["eventsubscriber",{"_index":1213,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["example",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exec(useragent)?.[2",{"_index":1551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execution",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":691,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":1187,"title":{},"body":{"injectables/UsersService.html":{}}}],["expandvariables",{"_index":591,"title":{},"body":{"modules/EnvModule.html":{}}}],["expansion",{"_index":588,"title":{},"body":{"modules/EnvModule.html":{}}}],["expirationdate",{"_index":541,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["expire",{"_index":936,"title":{},"body":{"entities/Session.html":{}}}],["expired",{"_index":997,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expiry",{"_index":986,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expirydate",{"_index":615,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["explicitly",{"_index":1219,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["export",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":530,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["expression",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extending",{"_index":527,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["extends",{"_index":535,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["external",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":1546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extracting",{"_index":759,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraction",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failure",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":701,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["feat",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feature",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["fetch",{"_index":1091,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":1005,"title":{},"body":{"injectables/SessionsService.html":{}}}],["fetches",{"_index":1002,"title":{},"body":{"injectables/SessionsService.html":{}}}],["field",{"_index":790,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["files",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":1126,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1078,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":1079,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":1125,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(undefined",{"_index":1093,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":1171,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1161,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1174,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionsrelations",{"_index":868,"title":{},"body":{"injectables/PaginationService.html":{}}}],["findoptionsselect",{"_index":866,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/UsersService.html":{}}}],["findoptionsselectbystring",{"_index":1172,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":864,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/UsersService.html":{}}}],["finds",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":839,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"miscellaneous/variables.html":{}}}],["fix",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixes",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fk_e1dde0bd0402cc9b1967c40a1b3",{"_index":638,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["flag",{"_index":1134,"title":{},"body":{"controllers/UsersController.html":{}}}],["flexibility",{"_index":553,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{}}}],["following",{"_index":585,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":824,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":639,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["format",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["format'})@isstring()@isuuid",{"_index":666,"title":{},"body":{"classes/IdDto.html":{}}}],["formatter",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatting",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["forwarded",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":432,"title":{},"body":{"modules/CoreModule.html":{}}}],["full",{"_index":1299,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["function",{"_index":811,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functionalities",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["functionality",{"_index":434,"title":{},"body":{"modules/CoreModule.html":{},"injectables/HashingService.html":{},"classes/RegistryDates.html":{}}}],["functions",{"_index":1318,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":999,"title":{},"body":{"injectables/SessionsService.html":{}}}],["generate",{"_index":393,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generated",{"_index":397,"title":{},"body":{"injectables/BcryptService.html":{}}}],["generates",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["generatetables1725986093329",{"_index":596,"title":{"classes/GenerateTables1725986093329.html":{}},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generating",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":1124,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({description",{"_index":1094,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({description",{"_index":1087,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@user('id",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile(userid",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsalt",{"_index":394,"title":{},"body":{"injectables/BcryptService.html":{}}}],["getter",{"_index":1061,"title":{},"body":{"entities/User.html":{}}}],["getting",{"_index":1323,"title":{"index.html":{}},"body":{}}],["given",{"_index":384,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["graph",{"_index":1348,"title":{},"body":{"modules.html":{}}}],["grouping",{"_index":1076,"title":{},"body":{"controllers/UsersController.html":{}}}],["guard",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["guards",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/jwt",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/local",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":698,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":1535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{}}}],["handling",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["hash",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hash(data",{"_index":380,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashed",{"_index":396,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashing",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hashing.service",{"_index":392,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt.service",{"_index":418,"title":{},"body":{"modules/CommonModule.html":{}}}],["hashing/hashing.service",{"_index":417,"title":{},"body":{"modules/CommonModule.html":{}}}],["hashingservice",{"_index":254,"title":{"injectables/HashingService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["header",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helping",{"_index":728,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["here",{"_index":1567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":548,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":1142,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@useguards(jwtauthguard)@post('change",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://minidocs.com",{"_index":1343,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":681,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":1095,"title":{},"body":{"controllers/UsersController.html":{}}}],["iddto",{"_index":658,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["identification",{"_index":1570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":664,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifies",{"_index":722,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["identify",{"_index":569,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["identifying",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immutability",{"_index":727,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["implement",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["implementation",{"_index":420,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["implemented",{"_index":648,"title":{},"body":{"injectables/HashingService.html":{}}}],["implements",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["import",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["imported",{"_index":583,"title":{},"body":{"modules/EnvModule.html":{}}}],["importing",{"_index":429,"title":{},"body":{"modules/CoreModule.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["improvement",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["includes",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["including",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":928,"title":{},"body":{"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicating",{"_index":377,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["information",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["initialize",{"_index":584,"title":{},"body":{"modules/EnvModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1321,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PaginationService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["inject(jwtconfig.key",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["inject(request",{"_index":876,"title":{},"body":{"injectables/PaginationService.html":{}}}],["injectable",{"_index":236,"title":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":407,"title":{},"body":{"modules/CommonModule.html":{},"injectables/SessionsService.html":{}}}],["injecting",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["injection",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":982,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(session",{"_index":983,"title":{},"body":{"injectables/SessionsService.html":{}}}],["injectrepository(user",{"_index":984,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injects",{"_index":1165,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inserted",{"_index":1207,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["insertevent",{"_index":1205,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["inserting",{"_index":1217,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["installation",{"_index":1325,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1327,"title":{},"body":{"index.html":{}}}],["instance",{"_index":410,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["integrate",{"_index":735,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["integration",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["integrity",{"_index":730,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["intel|ppc",{"_index":1556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interact",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":522,"title":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"interfaces/Paginated.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"interfaces/Paginated.html":{},"coverage.html":{}}}],["interfaces",{"_index":524,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"interfaces/Paginated.html":{},"overview.html":{}}}],["interfaces/paginated.interface",{"_index":875,"title":{},"body":{"injectables/PaginationService.html":{}}}],["invalid",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["invokes",{"_index":794,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["ios",{"_index":1542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ip",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["ip.split(',')[0].replace",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipaddress",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iphone",{"_index":572,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["ips",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_password_key",{"_index":1244,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":703,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_username_key",{"_index":1247,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":925,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":1064,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":519,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isnotempty",{"_index":803,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isstring",{"_index":800,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RemoveDto.html":{}}}],["isoptional()@ispositive",{"_index":854,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispassword",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispassword(value",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispositive",{"_index":857,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["ispublic",{"_index":707,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":668,"title":{},"body":{"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isusername",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isusername(value",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuuid",{"_index":669,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["it's",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["itemsperpages",{"_index":835,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["joi",{"_index":1278,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["joi.number().required",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":614,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt_secret_key",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":136,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconfiguration",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.secret",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":278,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwts",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":171,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["keeps",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":431,"title":{},"body":{"modules/CoreModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["last",{"_index":840,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"classes/RegistryDates.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["length(0",{"_index":521,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["leverages",{"_index":1536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1344,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":367,"title":{},"body":{"injectables/BcryptService.html":{}}}],["limit",{"_index":851,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["limited",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["links",{"_index":831,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["linux",{"_index":1562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linux/i.test(useragent",{"_index":1564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":1088,"title":{},"body":{"controllers/UsersController.html":{}}}],["listen",{"_index":1214,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["listens",{"_index":1146,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["listento",{"_index":1202,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["lists",{"_index":979,"title":{},"body":{"injectables/SessionsService.html":{}}}],["literal",{"_index":834,"title":{},"body":{"interfaces/Paginated.html":{}}}],["load",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":139,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":172,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["login(user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":820,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["loginuserdto",{"_index":798,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["loginvalidationmiddleware",{"_index":195,"title":{"injectables/LoginValidationMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["longer",{"_index":1311,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercase",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":1543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macos",{"_index":1555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["mainly",{"_index":1305,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maintain",{"_index":729,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["maintained",{"_index":442,"title":{},"body":{"modules/CoreModule.html":{}}}],["making",{"_index":554,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["manage",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/RegistryDates.html":{},"miscellaneous/enumerations.html":{}}}],["managed",{"_index":441,"title":{},"body":{"modules/CoreModule.html":{}}}],["management",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["manages",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["mandatory",{"_index":567,"title":{},"body":{"interfaces/Device.html":{}}}],["many",{"_index":1046,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":947,"title":{},"body":{"entities/Session.html":{}}}],["manytoone(undefined",{"_index":941,"title":{},"body":{"entities/Session.html":{}}}],["map",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mark",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":680,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"injectables/SessionsService.html":{}}}],["marks",{"_index":1197,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["matches",{"_index":379,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["matches(value",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["math.ceil(totalitems",{"_index":886,"title":{},"body":{"injectables/PaginationService.html":{}}}],["maximum",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["meaning",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meta",{"_index":832,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["metadata",{"_index":697,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":373,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["middlewareconsumer",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/login",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["migrationinterface",{"_index":599,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["miscellaneous",{"_index":1289,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1330,"title":{},"body":{"index.html":{}}}],["modified",{"_index":725,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{}}}],["modifier",{"_index":724,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["modify",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modular",{"_index":438,"title":{},"body":{"modules/CoreModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohamadreza",{"_index":1340,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mohmadreza",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mosalli",{"_index":1341,"title":{},"body":{"index.html":{},"properties.html":{}}}],["multiple",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":1140,"title":{},"body":{"modules/UsersModule.html":{}}}],["needed",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":1013,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["nestjs",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["nestjs's",{"_index":1571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/PaginationService.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1264,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":702,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1267,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":815,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nestmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/EnvModule.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":995,"title":{},"body":{"injectables/SessionsService.html":{}}}],["newpassword",{"_index":1069,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["newurl",{"_index":883,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${nextpage",{"_index":892,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${paginationquery.page",{"_index":891,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${previouspage",{"_index":893,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=${totalpages",{"_index":890,"title":{},"body":{"injectables/PaginationService.html":{}}}],["newurl.origin}${newurl.pathname}?limit=${paginationquery.limit}&page=1",{"_index":889,"title":{},"body":{"injectables/PaginationService.html":{}}}],["next",{"_index":808,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["nextfunction",{"_index":809,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nextpage",{"_index":887,"title":{},"body":{"injectables/PaginationService.html":{}}}],["node_env",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["non",{"_index":1575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["notfoundexception",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["now",{"_index":630,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{}}}],["npm",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt",{"_index":1560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt/.test(useragent",{"_index":1559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":610,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":942,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["number",{"_index":382,"title":{},"body":{"injectables/BcryptService.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["obj",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["objectliteral",{"_index":874,"title":{},"body":{"injectables/PaginationService.html":{}}}],["objects",{"_index":1591,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtain",{"_index":1537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurs",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["one",{"_index":1045,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":1053,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":1041,"title":{},"body":{"entities/User.html":{}}}],["operating",{"_index":1563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":413,"title":{},"body":{"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["orchestrates",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["organizing",{"_index":436,"title":{},"body":{"modules/CoreModule.html":{}}}],["original",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["os",{"_index":1544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["others",{"_index":549,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["otherwise",{"_index":700,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overall",{"_index":1150,"title":{},"body":{"modules/UsersModule.html":{}}}],["overrides",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["overview",{"_index":1350,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":930,"title":{},"body":{"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["ownerid",{"_index":617,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["owns",{"_index":944,"title":{},"body":{"entities/Session.html":{}}}],["package",{"_index":1258,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":852,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["paginated",{"_index":829,"title":{"interfaces/Paginated.html":{}},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginatequery",{"_index":859,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginatequery(paginationquery",{"_index":862,"title":{},"body":{"injectables/PaginationService.html":{}}}],["pagination.service",{"_index":847,"title":{},"body":{"modules/PaginationModule.html":{}}}],["pagination/pagination.module",{"_index":419,"title":{},"body":{"modules/CommonModule.html":{}}}],["paginationmodule",{"_index":403,"title":{"modules/PaginationModule.html":{}},"body":{"modules/CommonModule.html":{},"modules/PaginationModule.html":{},"modules.html":{},"overview.html":{}}}],["paginationquery",{"_index":870,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationquery.limit",{"_index":880,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationquery.page",{"_index":879,"title":{},"body":{"injectables/PaginationService.html":{}}}],["paginationquerydto",{"_index":848,"title":{"classes/PaginationQueryDto.html":{}},"body":{"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"coverage.html":{}}}],["paginationservice",{"_index":845,"title":{"injectables/PaginationService.html":{}},"body":{"modules/PaginationModule.html":{},"injectables/PaginationService.html":{},"coverage.html":{},"overview.html":{}}}],["param",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["param0",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["param1",{"_index":1131,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["parent",{"_index":689,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["parsed",{"_index":1568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parserpreset",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parses",{"_index":1569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["partialtype",{"_index":1016,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":1012,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participating",{"_index":1307,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["passes",{"_index":699,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passing",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passport",{"_index":677,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy",{"_index":752,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["password.decorator",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["password.decorator.ts",{"_index":1243,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":1067,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:5",{"_index":1070,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":1071,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["passwordregex",{"_index":1245,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":362,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":1108,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1128,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({description",{"_index":1104,"title":{},"body":{"controllers/UsersController.html":{}}}],["pattern",{"_index":1540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":718,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["perf",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performance",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performs",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1301,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1282,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":406,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":635,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["pk_f55da76ac1c3ac420f444d2ff11",{"_index":621,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["plain",{"_index":374,"title":{},"body":{"injectables/BcryptService.html":{}}}],["plaintoinstance",{"_index":817,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["plaintoinstance(loginuserdto",{"_index":821,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["point",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["populated",{"_index":909,"title":{},"body":{"classes/RegistryDates.html":{}}}],["port",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["possibly",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["post",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({description",{"_index":1081,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["preform",{"_index":1160,"title":{},"body":{"injectables/UsersService.html":{}}}],["present",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":1580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":841,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{},"miscellaneous/variables.html":{}}}],["previouspage",{"_index":888,"title":{},"body":{"injectables/PaginationService.html":{}}}],["primarily",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":622,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["primarygeneratedcolumn",{"_index":948,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":937,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["private",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["privileges",{"_index":1298,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["proceed",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["process",{"_index":715,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":1583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":1144,"title":{},"body":{"modules/UsersModule.html":{}}}],["processing",{"_index":953,"title":{},"body":{"controllers/SessionsController.html":{}}}],["production",{"_index":562,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["project",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":605,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{}}}],["promoting",{"_index":437,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/JwtPayload.html":{}}}],["properly",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":455,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["propertydecorator",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protect",{"_index":678,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["protecting",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["provide",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{}}}],["provided",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":965,"title":{},"body":{"modules/SessionsModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":647,"title":{},"body":{"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["proxied",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public\".\"user_role_enum",{"_index":625,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public\".\"user_status_enum",{"_index":623,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public()@httpcode(httpstatus.ok)@useguards(localauthguard)@post('login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":1101,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["query.dto",{"_index":873,"title":{},"body":{"injectables/PaginationService.html":{}}}],["query.dto.ts",{"_index":850,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["query.dto.ts:10",{"_index":856,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["query.dto.ts:6",{"_index":855,"title":{},"body":{"classes/PaginationQueryDto.html":{}}}],["queryrunner",{"_index":603,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["queryrunner.query",{"_index":608,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["raw",{"_index":654,"title":{},"body":{"injectables/HashingService.html":{},"injectables/SessionsService.html":{}}}],["raw((alias",{"_index":1000,"title":{},"body":{"injectables/SessionsService.html":{}}}],["read",{"_index":673,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["reasons",{"_index":1317,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receives",{"_index":1121,"title":{},"body":{"controllers/UsersController.html":{}}}],["record",{"_index":916,"title":{},"body":{"classes/RegistryDates.html":{}}}],["recover",{"_index":1060,"title":{},"body":{"entities/User.html":{}}}],["recovered",{"_index":1058,"title":{},"body":{"entities/User.html":{}}}],["refactor",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":640,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["reflect",{"_index":1284,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":686,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["regex",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{},"classes/UsersSubscriber.html":{}}}],["register(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registered",{"_index":964,"title":{},"body":{"modules/SessionsModule.html":{},"controllers/UsersController.html":{}}}],["registers",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":114,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["registry",{"_index":1036,"title":{},"body":{"entities/User.html":{}}}],["registrydates",{"_index":896,"title":{"classes/RegistryDates.html":{}},"body":{"classes/RegistryDates.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["regular",{"_index":1303,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rejects",{"_index":825,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["related",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["relation",{"_index":1047,"title":{},"body":{"entities/User.html":{}}}],["relations",{"_index":867,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/SessionsService.html":{}}}],["release",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relevant",{"_index":1147,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["remove",{"_index":1059,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1133,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":1176,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":1098,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":1057,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["removedto",{"_index":921,"title":{"classes/RemoveDto.html":{}},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["removes",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["removing",{"_index":915,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{}}}],["replace",{"_index":1547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/_/g",{"_index":1552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":1557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["report",{"_index":571,"title":{},"body":{"interfaces/Device.html":{}}}],["repositories",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":863,"title":{},"body":{"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["repository.count",{"_index":885,"title":{},"body":{"injectables/PaginationService.html":{}}}],["repository.find",{"_index":877,"title":{},"body":{"injectables/PaginationService.html":{}}}],["represent",{"_index":538,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["representation",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["representing",{"_index":899,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["represents",{"_index":566,"title":{},"body":{"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["req",{"_index":746,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["req.body",{"_index":822,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["req.headers?.authorization.replace('bearer",{"_index":775,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":529,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":1539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['x",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.interface",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["request.interface.ts",{"_index":526,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["request.user",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requested",{"_index":1532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":812,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":679,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["requirements",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":650,"title":{},"body":{"injectables/HashingService.html":{}}}],["res",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":656,"title":{},"body":{"injectables/HashingService.html":{}}}],["resources",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalAuthGuard.html":{},"classes/RemoveDto.html":{}}}],["respective",{"_index":1589,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":807,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["responsible",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["results",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["rethrows",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieval",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieve",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["retrieving",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returning",{"_index":655,"title":{},"body":{"injectables/HashingService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/PaginationService.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["revert",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reverts",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reviewing",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["role",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["role.enum",{"_index":1052,"title":{},"body":{"entities/User.html":{}}}],["role.enum.ts",{"_index":1292,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1295,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":387,"title":{},"body":{"injectables/BcryptService.html":{}}}],["roundssalt",{"_index":381,"title":{},"body":{"injectables/BcryptService.html":{}}}],["route",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["rule",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rules",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1328,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1286,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":386,"title":{},"body":{"injectables/BcryptService.html":{}}}],["save",{"_index":1183,"title":{},"body":{"injectables/UsersService.html":{}}}],["saves",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["schema",{"_index":593,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scopes",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scripts",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":1032,"title":{},"body":{"entities/User.html":{}}}],["see",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":865,"title":{},"body":{"injectables/PaginationService.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["selected",{"_index":1029,"title":{},"body":{"entities/User.html":{}}}],["send",{"_index":1105,"title":{},"body":{"controllers/UsersController.html":{}}}],["sent",{"_index":1009,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["separation",{"_index":1153,"title":{},"body":{"modules/UsersModule.html":{}}}],["serves",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["service",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"classes/UsersSubscriber.html":{}}}],["services",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["session",{"_index":41,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["session.owner",{"_index":1042,"title":{},"body":{"entities/User.html":{}}}],["sessioncontroller",{"_index":951,"title":{},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{}}}],["sessionmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionsModule.html":{}}}],["sessionrepository",{"_index":971,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["sessions(undefined",{"_index":977,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions.controller",{"_index":963,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions.service",{"_index":962,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions/entities/session.entity",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["sessions/sessions.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["sessions/sessions.service",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessionscontroller",{"_index":949,"title":{"controllers/SessionsController.html":{}},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"coverage.html":{}}}],["sessionservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{}}}],["sessionsmodule",{"_index":14,"title":{"modules/SessionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionsservice",{"_index":173,"title":{"injectables/SessionsService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":726,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":985,"title":{},"body":{"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":544,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["settings",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":551,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["several",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["shared",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":721,"title":{},"body":{"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["skip",{"_index":878,"title":{},"body":{"injectables/PaginationService.html":{}}}],["soft",{"_index":913,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["softly",{"_index":1056,"title":{},"body":{"entities/User.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"modules/PaginationModule.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["space",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":385,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["specifies",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/LocalAuthGuard.html":{},"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["specify",{"_index":582,"title":{},"body":{"modules/EnvModule.html":{},"modules/SessionsModule.html":{}}}],["splits",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.constants.ts",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.constants.ts",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipaddress.decorator.ts",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1319,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../to",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1291,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:53",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:68",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:102",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:120",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:155",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/ipaddress.decorator.ts",{"_index":1229,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1230,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user",{"_index":1231,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":1233,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":799,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":894,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":674,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":776,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/middlewares/login",{"_index":804,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":744,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":785,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":789,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:30",{"_index":792,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/common/common.module.ts",{"_index":404,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/decorators/transforms/to",{"_index":1239,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/decorators/validators/is",{"_index":1242,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/dto/id.dto.ts",{"_index":659,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/core/common/dto/id.dto.ts:23",{"_index":667,"title":{},"body":{"classes/IdDto.html":{}}}],["src/core/common/dto/remove.dto.ts",{"_index":922,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{}}}],["src/core/common/dto/remove.dto.ts:23",{"_index":924,"title":{},"body":{"classes/RemoveDto.html":{}}}],["src/core/common/dto/user",{"_index":1066,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["src/core/common/embedded/registry",{"_index":897,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["src/core/common/enums/user",{"_index":1294,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/common/hashing/bcrypt.service.ts",{"_index":360,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/core/common/hashing/bcrypt.service.ts:17",{"_index":383,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/core/common/hashing/bcrypt.service.ts:32",{"_index":372,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/core/common/hashing/hashing.service.ts",{"_index":645,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/core/common/hashing/hashing.service.ts:16",{"_index":657,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/core/common/hashing/hashing.service.ts:26",{"_index":652,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/core/common/interfaces/custom",{"_index":525,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/core/common/interfaces/device.interface.ts",{"_index":565,"title":{},"body":{"interfaces/Device.html":{},"coverage.html":{}}}],["src/core/common/interfaces/jwt",{"_index":717,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/core/common/pagination/dto/pagination",{"_index":849,"title":{},"body":{"classes/PaginationQueryDto.html":{},"coverage.html":{}}}],["src/core/common/pagination/interfaces/paginated.interface.ts",{"_index":830,"title":{},"body":{"interfaces/Paginated.html":{},"coverage.html":{}}}],["src/core/common/pagination/pagination.module.ts",{"_index":846,"title":{},"body":{"modules/PaginationModule.html":{}}}],["src/core/common/pagination/pagination.service.ts",{"_index":858,"title":{},"body":{"injectables/PaginationService.html":{},"coverage.html":{}}}],["src/core/common/pagination/pagination.service.ts:15",{"_index":861,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/core/common/pagination/pagination.service.ts:21",{"_index":869,"title":{},"body":{"injectables/PaginationService.html":{}}}],["src/core/common/util/common.constants.ts",{"_index":1250,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":427,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/database/database.module.ts",{"_index":543,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/migrations/1725986093329",{"_index":597,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["src/core/env/env.constants.ts",{"_index":1251,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/env/env.module.ts",{"_index":579,"title":{},"body":{"modules/EnvModule.html":{}}}],["src/main.ts",{"_index":1252,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/sessions/entities/session.entity.ts",{"_index":929,"title":{},"body":{"entities/Session.html":{},"coverage.html":{}}}],["src/sessions/entities/session.entity.ts:14",{"_index":938,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:20",{"_index":946,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:26",{"_index":932,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:32",{"_index":940,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:38",{"_index":935,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:47",{"_index":943,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/sessions.controller.ts",{"_index":950,"title":{},"body":{"controllers/SessionsController.html":{},"coverage.html":{}}}],["src/sessions/sessions.module.ts",{"_index":960,"title":{},"body":{"modules/SessionsModule.html":{}}}],["src/sessions/sessions.service.ts",{"_index":967,"title":{},"body":{"injectables/SessionsService.html":{},"coverage.html":{}}}],["src/sessions/sessions.service.ts:16",{"_index":973,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:38",{"_index":976,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:63",{"_index":981,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:88",{"_index":978,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/users/dto/create",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1007,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":1022,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":1025,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":1028,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":1024,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":1049,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":1031,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":1048,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":1039,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":1034,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:69",{"_index":1044,"title":{},"body":{"entities/User.html":{}}}],["src/users/subscribers/users.subscriber.ts",{"_index":1196,"title":{},"body":{"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["src/users/subscribers/users.subscriber.ts:15",{"_index":1203,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:36",{"_index":1212,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:45",{"_index":1206,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:57",{"_index":1211,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/users.controller.ts",{"_index":1073,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:122",{"_index":1107,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":1102,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1085,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1092,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":1097,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1139,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1158,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1179,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:134",{"_index":1181,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:163",{"_index":1177,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1164,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1169,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":1170,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1173,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:95",{"_index":1175,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":532,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["start",{"_index":954,"title":{},"body":{"controllers/SessionsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1331,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1332,"title":{},"body":{"index.html":{}}}],["started",{"_index":1324,"title":{"index.html":{}},"body":{}}],["starts",{"_index":1322,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statement",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1222,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["status.enum",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["status.enum.ts",{"_index":1293,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1338,"title":{},"body":{"index.html":{}}}],["still",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stores",{"_index":933,"title":{},"body":{"entities/Session.html":{}}}],["storing",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategies",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["strength",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":1579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"interfaces/Paginated.html":{},"classes/RegisterUserDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stringhash",{"_index":391,"title":{},"body":{"injectables/BcryptService.html":{}}}],["stripped",{"_index":1574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":719,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/UpdateUserDto.html":{}}}],["structured",{"_index":539,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["style",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style/formatting",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["submits",{"_index":793,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["subscriber",{"_index":1198,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["subscribers/users.subscriber",{"_index":1156,"title":{},"body":{"modules/UsersModule.html":{}}}],["successful",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["successfully",{"_index":1084,"title":{},"body":{"controllers/UsersController.html":{}}}],["such",{"_index":547,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":705,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":716,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["suspend",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"miscellaneous/enumerations.html":{}}}],["suspended",{"_index":1314,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["svg",{"_index":1346,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":1023,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["t",{"_index":833,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["table",{"_index":609,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tables.ts",{"_index":598,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["tables.ts:4",{"_index":601,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:48",{"_index":604,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:6",{"_index":607,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1257,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":574,"title":{},"body":{"interfaces/Device.html":{}}}],["tags",{"_index":1074,"title":{},"body":{"controllers/UsersController.html":{}}}],["take",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/PaginationService.html":{}}}],["taken",{"_index":1149,"title":{},"body":{"modules/UsersModule.html":{}}}],["takes",{"_index":653,"title":{},"body":{"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["temporarily",{"_index":1313,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["test",{"_index":520,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test'})@isoptional()@length(0",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test:covsupport",{"_index":1337,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1336,"title":{},"body":{"index.html":{}}}],["test@1234",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@1234'})@ispassword",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com'})@isemail",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122'})@isusername",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["testing",{"_index":561,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tests",{"_index":1334,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":375,"title":{},"body":{"injectables/BcryptService.html":{}}}],["this.authservice.changepassword(userid",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getprofile(userid",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwt",{"_index":774,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatelocal(email",{"_index":797,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.datasource.getrepository(session).findone",{"_index":998,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.findonebyid(id",{"_index":1193,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare",{"_index":1190,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare(password",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.hash(user.password",{"_index":1218,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.jwtservice.sign(payload",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registrydates.deleteat",{"_index":1065,"title":{},"body":{"entities/User.html":{}}}],["this.request.protocol}://${this.request.headers.host",{"_index":882,"title":{},"body":{"injectables/PaginationService.html":{}}}],["this.sessionrepository.create",{"_index":989,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.save(session",{"_index":996,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionservice.create(user.id",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.validate(user.id",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create",{"_index":1182,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1185,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1004,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1188,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.preload",{"_index":1189,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":1195,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1184,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softremove(user",{"_index":1194,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":1192,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(id",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updatepassword(id",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1122,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1123,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":1127,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1135,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1130,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":695,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["throw",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":907,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{}}}],["timestamp",{"_index":616,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["toboolean",{"_index":1241,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(obj[key",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["totalitems",{"_index":836,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["totalpages",{"_index":838,"title":{},"body":{"interfaces/Paginated.html":{},"injectables/PaginationService.html":{}}}],["touch",{"_index":1339,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":818,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":1587,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":592,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["two",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"interfaces/Paginated.html":{},"classes/PaginationQueryDto.html":{},"injectables/PaginationService.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/PaginationService.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(databaseconfig.asprovider",{"_index":564,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1265,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1270,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1272,"title":{},"body":{"dependencies.html":{}}}],["typically",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unchanged",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":575,"title":{},"body":{"interfaces/Device.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["underscores",{"_index":1548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unexpected",{"_index":1581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":620,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["uniquely",{"_index":568,"title":{},"body":{"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}}}],["unit",{"_index":1333,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1356,"title":{},"body":{"properties.html":{}}}],["up",{"_index":545,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{}}}],["up(queryrunner",{"_index":606,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["update",{"_index":643,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1129,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":1178,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(undefined",{"_index":1103,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":919,"title":{},"body":{"classes/RegistryDates.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{}}}],["updated.'})@isstring()@isuuid",{"_index":1014,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updatedat",{"_index":631,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":917,"title":{},"body":{"classes/RegistryDates.html":{}}}],["updateevent",{"_index":1210,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["updatepassword",{"_index":1162,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepassword(id",{"_index":1180,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":1191,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updateuserdto",{"_index":1006,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":1011,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["upon",{"_index":910,"title":{},"body":{"classes/RegistryDates.html":{}}}],["uppercase",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uq_232f8e85d7633bd6ddfad421696",{"_index":619,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":634,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":633,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["url",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["url(this.request.url",{"_index":884,"title":{},"body":{"injectables/PaginationService.html":{}}}],["use",{"_index":409,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["use(req",{"_index":806,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["useclass",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["used",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":641,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["user's",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user'})@apiresponse({status",{"_index":1082,"title":{},"body":{"controllers/UsersController.html":{}}}],["user('id",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":802,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:13",{"_index":895,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:19",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":1015,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":801,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["user.password",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user.status",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.status.tolowercase",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useragent",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userchangepassworddto",{"_index":84,"title":{"classes/UserChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userconfig",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["username",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username.decorator",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["username.decorator.ts",{"_index":1246,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["username/password",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["usernamefield",{"_index":796,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernameregex",{"_index":1248,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernames",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":972,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":1038,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":1055,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":778,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1157,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1111,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["users/users.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["userscontroller",{"_index":1072,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":174,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":1145,"title":{"classes/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["userstatus",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.activate",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstatus.deactivate",{"_index":1054,"title":{},"body":{"entities/User.html":{}}}],["uses",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":421,"title":{},"body":{"modules/CommonModule.html":{}}}],["using",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["util/common.constants",{"_index":416,"title":{},"body":{"modules/CommonModule.html":{}}}],["utility",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizes",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["uuid'})@apiquery({name",{"_index":1100,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid'})@apiresponse({status",{"_index":1096,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid_generate_v4",{"_index":611,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["valid",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":594,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["validate(email",{"_index":791,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(logindto",{"_index":826,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validate(req",{"_index":743,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userid",{"_index":980,"title":{},"body":{"injectables/SessionsService.html":{}}}],["validateby",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatejwt",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(undefined",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validatelocal(email",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["validating",{"_index":662,"title":{},"body":{"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validation.middleware",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["validation.middleware.ts",{"_index":805,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["validation.middleware.ts:23",{"_index":810,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validation_pipe_options",{"_index":414,"title":{},"body":{"modules/CommonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":411,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipe(validation_pipe_options",{"_index":422,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipeoptions",{"_index":1572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":595,"title":{},"body":{"modules/EnvModule.html":{}}}],["validator",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/PaginationQueryDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":390,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/PaginationQueryDto.html":{},"classes/RemoveDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["var_name",{"_index":590,"title":{},"body":{"modules/EnvModule.html":{}}}],["variable",{"_index":1224,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":589,"title":{"miscellaneous/variables.html":{}},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":613,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(30",{"_index":628,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(50",{"_index":627,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["verification",{"_index":745,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":542,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":780,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["viewing",{"_index":1306,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violations",{"_index":1316,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["w][\\w.]{3,30",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1329,"title":{},"body":{"index.html":{}}}],["way",{"_index":1585,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":720,"title":{},"body":{"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":1342,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":920,"title":{},"body":{"classes/RegistryDates.html":{}}}],["whether",{"_index":378,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["white",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitelist",{"_index":823,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["whitelisted",{"_index":1576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":1533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whose",{"_index":1312,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["windows",{"_index":1558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":787,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["without",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{}}}],["word",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x/.test(useragent",{"_index":1545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x11/i.test(useragent",{"_index":1565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":1326,"title":{},"body":{"index.html":{}}}],["yes",{"_index":871,"title":{},"body":{"injectables/PaginationService.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[@$!%*?&])[a",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/PaginationModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AppModule serves as the root module for the application.\nIt imports several feature modules, including:\n\nCoreModule: Contains shared resources and services used across the app.\nAuthModule: Manages authentication logic and user session management.\nUsersModule: Handles user-related operations and data management.\nSessionModule: Manages user sessions and related functionalities.\n\nThis module is the main entry point for the application and orchestrates\nthe integration of various features.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SessionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { SessionsModule } from './sessions/sessions.module';\nimport { CoreModule } from './core/core.module';\n\n/**\n * AppModule serves as the root module for the application.\n * It imports several feature modules, including:\n * - CoreModule: Contains shared resources and services used across the app.\n * - AuthModule: Manages authentication logic and user session management.\n * - UsersModule: Handles user-related operations and data management.\n * - SessionModule: Manages user sessions and related functionalities.\n *\n * This module is the main entry point for the application and orchestrates\n * the integration of various features.\n */\n@Module({\n  imports: [CoreModule, AuthModule, UsersModule, SessionsModule]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController is responsible for handling authentication-related routes in the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@UseGuards(JwtAuthGuard)@Post('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Change user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Get the user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserEntity, ip: string, device: Device)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Login an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User entity\n\n                                            \n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IP address\n\n                                            \n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Device is object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards\n} from '@nestjs/common';\nimport { User as UserEntity } from 'users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { IpAddress } from './decorators/ipAddress.decorator';\nimport { Public } from './decorators/public.decorator';\nimport { UserAgent } from './decorators/user-agent.decorator';\nimport { User } from './decorators/user.decorator';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthController is responsible for handling authentication-related routes in the application\n */\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Register a new user\n   * @param registerUserDto\n   * @returns User entity\n   */\n  @Public()\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  /**\n   * Login an existing user\n   * @param user User entity\n   * @param ip IP address\n   * @param device Device is object\n   * @returns\n   */\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  login(\n    @User() user: UserEntity,\n    @IpAddress() ip: string,\n    @UserAgent() device: Device\n  ) {\n    return this.authService.login(user, ip, device);\n  }\n\n  /**\n   * Get the user profile\n   * @param userId UserID is string and UUID format\n   * @returns\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@User('id') userId: string) {\n    return this.authService.getProfile(userId);\n  }\n\n  /**\n   * Change user password\n   * @param userId UserID is string and UUID format\n   * @param changePasswordDto\n   * @returns\n   */\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  changePassword(\n    @User('id') userId: string,\n    @Body() userChangePasswordDto: UserChangePasswordDto\n  ) {\n    return this.authService.changePassword(userId, userChangePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nAuthModule -->\n\nSessionsService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AuthModule is responsible for all authentication-related functionalities\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionsService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from '../sessions/entities/session.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './config/jwt.config';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LoginValidationMiddleware } from './middlewares/login-validation.middleware';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { SessionsService } from 'sessions/sessions.service';\nimport { CommonModule } from 'core/common/common.module';\nimport { UsersService } from 'users/users.service';\n\n/**\n * AuthModule is responsible for all authentication-related functionalities\n */\n@Module({\n  imports: [\n    // Import TypeORM module for User and Session entities\n    TypeOrmModule.forFeature([User, Session]),\n\n    // Register JWT module asynchronously using configuration from jwtConfig\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n\n    // Import configuration module for environment-specific settings\n    ConfigModule.forFeature(jwtConfig),\n\n    CommonModule\n  ],\n  // Define the controllers related to authentication\n  controllers: [AuthController],\n\n  // Providers for authentication services, strategies, and guards\n  providers: [\n    // Service to handle authenticate user\n    AuthService,\n\n    // Service to handle user management\n    UsersService,\n\n    // Service to handle user sessions\n    SessionsService,\n\n    // Strategy for local (username/password) authentication\n    LocalStrategy,\n\n    // Strategy for JWT authentication\n    JwtStrategy,\n\n    // Apply JwtAuthGuard as a global guard for protecting routes\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard\n    }\n  ]\n})\n\n/**\n * AuthModule implements NestModule, allowing for middleware configuration\n */\nexport class AuthModule implements NestModule {\n  // Configure the middleware for specific routes\n  configure(consumer: MiddlewareConsumer) {\n    // Apply LoginValidationMiddleware to the 'auth/login' route\n    consumer.apply(LoginValidationMiddleware).forRoutes('auth/login');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService is a service responsible for all authentication-related functionalities\nin the application, including user registration, login, profile retrieval\nand JWT validation. It utilizes various services and\nrepositories provided by NestJS and TypeORM to interact with the database\nand manage user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                            \n                                    Async\n                                validateLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, hashingService: HashingService, sessionService: SessionsService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            Injecting dependencies using constructor injection\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                UserService for user management\n\n                                                        \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SessionService for managing user sessions\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JwtService for generating JWT tokens\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Changes a user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Registers a new user ****\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Login user and generates a JWT token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user and JWT token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Registers a new user ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(undefined: JwtPayload, jwtToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Validates a JWT token and retrieves the user information ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwtToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                UserId and object of session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocal(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Validates a user's credentials using email or username and password ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SessionsService } from 'sessions/sessions.service';\nimport { User } from 'users/entities/user.entity';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { HashingService } from '../core/common/hashing/hashing.service';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { UsersService } from 'users/users.service';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthService is a service responsible for all authentication-related functionalities\n * in the application, including user registration, login, profile retrieval\n * and JWT validation. It utilizes various services and\n * repositories provided by NestJS and TypeORM to interact with the database\n * and manage user sessions.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Injecting dependencies using constructor injection\n   * @param userService UserService for user management\n   * @param sessionService SessionService for managing user sessions\n   * @param jwtService JwtService for generating JWT tokens\n   */\n  constructor(\n    private readonly userService: UsersService,\n    // Injecting the HashingService for password hashing\n    private readonly hashingService: HashingService,\n    // Injecting the SessionService for managing user sessions\n    private readonly sessionService: SessionsService,\n    // Injecting the JwtService for generating JWT tokens\n    private readonly jwtService: JwtService\n  ) {}\n\n  /**\n   * Registers a new user ***\n   * @param registerUserDto\n   * @returns Object of user data\n   */\n  async register(registerUserDto: RegisterUserDto) {\n    try {\n      // Creates a new user and saves to database from the RegisterUserDto\n      return await this.userService.create({ ...registerUserDto });\n    } catch (error) {\n      // Rethrows any error that occurs during registration\n      throw error;\n    }\n  }\n\n  /**\n   * Login user and generates a JWT token\n   * @param user\n   * @param ip\n   * @param device\n   * @returns Object of user and JWT token\n   */\n  async login(user: User, ip: string, device: Device) {\n    // Creates a payload for the JWT token, containing the user's ID\n    const payload = { id: user.id };\n\n    // Generates a JWT token using the JwtService\n    const token = this.jwtService.sign(payload);\n\n    // Creates a new session for the user, storing the token, IP address, and device information\n    await this.sessionService.create(user.id, token, ip, device);\n\n    // Returns the user data and the JWT token\n    return {\n      ...user,\n      token: this.jwtService.sign(payload)\n    };\n  }\n\n  /**\n   * Registers a new user ****\n   * @param id The ID is string and UUID format\n   * @returns Object of user data\n   */\n  async getProfile(id: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Removes the ID from the user object, as it's not needed in the profile\n    delete user.id;\n\n    // Returns the user's profile data\n    return user;\n  }\n\n  /**\n   * Changes a user's password\n   * @param id\n   * @param userChangePasswordDto\n   */\n  async changePassword(\n    id: string,\n    userChangePasswordDto: UserChangePasswordDto\n  ) {\n    try {\n      return await this.userService.updatePassword(id, userChangePasswordDto);\n    } catch (error) {\n      // Rethrows any error that occurs during changePassword\n      throw error;\n    }\n  }\n\n  /**\n   * Validates a user's credentials using email or username and password ***\n   * @param email\n   * @param password\n   * @returns Object of user data\n   */\n  async validateLocal(email: string, password: string) {\n    // Finds the user by their email or username, retrieving specific fields\n    const user = await this.userService.findOne(\n      [{ email }, { username: email }],\n      ['id', 'role', 'status', 'password']\n    );\n\n    // Throws a NotFoundException if the user is not found\n    if (!user) throw new NotFoundException('User not found');\n\n    // // Checks if the user's account is activated (this part is commented out, but it could be used to implement user account activation)\n    // if (user.status !== UserStatus.ACTIVATE)\n    //   throw new UnauthorizedException(\n    //     `Your account is ${user.status.toLowerCase()} see support for reviewing your account`\n    //   );\n\n    // Compares the provided password with the stored password hash\n    const isMatch = await this.hashingService.compare(password, user.password);\n\n    // Throws an UnauthorizedException if the password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // Removes the password from the user object, as it's not needed for authentication\n    delete user.password;\n\n    // Returns the user information without the password\n    return user;\n  }\n\n  /**\n   * Validates a JWT token and retrieves the user information ***\n   * @param param0\n   * @param jwtToken\n   * @returns UserId and object of session\n   */\n  async validateJwt({ id }: JwtPayload, jwtToken: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Throws an UnauthorizedException if the user is not found\n    if (!user) throw new UnauthorizedException();\n\n    // Validates the JWT token and checks if the session is still active\n    const session = await this.sessionService.validate(user.id, jwtToken);\n\n    // Throws an UnauthorizedException if the session is invalid\n    if (!session) throw new UnauthorizedException();\n\n    // Creates a CustomUser object containing the user's ID and the session information\n    const res: CustomUser = { id, session };\n\n    // Returns the CustomUser object\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/hashing/bcrypt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\nThe Injectable decorator allows NestJS to manage the lifecycle of the service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/bcrypt.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Method to compare a plain text data with an encrypted hash.\nReturns a boolean indicating whether the data matches the encrypted hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer, roundsSalt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/bcrypt.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                roundsSalt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                stringHash\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingService } from './hashing.service';\n\n/**\n * BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\n * The Injectable decorator allows NestJS to manage the lifecycle of the service.\n */\n@Injectable()\nexport class BcryptService implements HashingService {\n  /**\n   * Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n   * @param data\n   * @param roundsSalt\n   * @returns stringHash\n   */\n  async hash(data: string | Buffer, roundsSalt: number = 10) {\n    // Generate a salt with the specified number of rounds.\n    const getSalt = await bcrypt.genSalt(roundsSalt);\n\n    // Return the hashed data using the generated salt.\n    return bcrypt.hash(data, getSalt);\n  }\n\n  /**\n   * Method to compare a plain text data with an encrypted hash.\n   * Returns a boolean indicating whether the data matches the encrypted hash.\n   * @param data\n   * @param encrypted\n   * @returns boolean\n   */\n  compare(data: string | Buffer, encrypted: string) {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CommonModule_imports\n\n\n\n\nPaginationModule\n\nPaginationModule\n\n\n\nCommonModule\n\nCommonModule\n\nCommonModule -->\n\nPaginationModule->CommonModule\n\n\n\n\n\nHashingService \n\nHashingService \n\nHashingService  -->\n\nCommonModule->HashingService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a module called CommonModule\nProvide a global validation pipe for the application, which is injected into the NestJS application context\nUse a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            PaginationModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            HashingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { VALIDATION_PIPE_OPTIONS } from './util/common.constants';\nimport { HashingService } from './hashing/hashing.service';\nimport { BcryptService } from './hashing/bcrypt.service';\nimport { PaginationModule } from './pagination/pagination.module';\n\n/**\n * Define a module called CommonModule\n * Provide a global validation pipe for the application, which is injected into the NestJS application context\n * Use a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n */\n@Module({\n  providers: [\n    {\n      // Use BcryptService as the implementation of HashingService\n      provide: HashingService,\n      useClass: BcryptService\n    },\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe(VALIDATION_PIPE_OPTIONS)\n    }\n  ],\n  // Export the HashingService for use in other modules\n  exports: [HashingService],\n  imports: [PaginationModule]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The CoreModule is a central module for the application,\nresponsible for importing and aggregating other key modules.\nIt serves as a foundation for the application's functionality\nby encapsulating and organizing related modules, promoting\na modular architecture where features can be easily managed and maintained.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EnvModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModule } from './common/common.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EnvModule } from './env/env.module';\n\n/**\n * The CoreModule is a central module for the application,\n * responsible for importing and aggregating other key modules.\n * It serves as a foundation for the application's functionality\n * by encapsulating and organizing related modules, promoting\n * a modular architecture where features can be easily managed and maintained.\n */\n@Module({\n  // Importing essential modules that provide common functionalities,\n  // database access, and environment configuration.\n  imports: [CommonModule, DatabaseModule, EnvModule]\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get valid email address', example: 'test@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    Specifies that 'email' is a required property, must be a valid email format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name limited to a maximum of 30 characters', example: 'mohmadreza test'})@IsOptional()@Length(0, 30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    Optional 'name' property with a maximum length of 30 characters\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters', example: 'test@1234'})@IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    Specifies that 'password' is a required property, with specific content and length requirements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserStatus, description: 'Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'', example: 'ACTIVATE'})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:54\n                        \n                    \n\n            \n                \n                    Optional property 'status' that can take specific enum values defined in UserStatus\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters', example: 'test_122'})@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    Specifies that 'username' is a required property\nMust adhere to certain formatting and length constraints\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsOptional, Length } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\n\n/**\n * Data Transfer Object for creating a new user\n */\nexport class CreateUserDto {\n  /**\n   * Specifies that 'email' is a required property, must be a valid email format\n   */\n  @ApiProperty({\n    description: 'Get valid email address',\n    example: 'test@gmail.com'\n  })\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Specifies that 'username' is a required property\n   * Must adhere to certain formatting and length constraints\n   */\n  @ApiProperty({\n    description:\n      'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters',\n    example: 'test_122'\n  })\n  @IsUsername()\n  readonly username: string;\n\n  /**\n   * Specifies that 'password' is a required property, with specific content and length requirements\n   */\n  @ApiProperty({\n    description:\n      'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters',\n    example: 'test@1234'\n  })\n  @IsPassword()\n  readonly password: string;\n\n  /**\n   * Optional property 'status' that can take specific enum values defined in UserStatus\n   */\n  @ApiPropertyOptional({\n    enum: UserStatus,\n    description: \"Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'\",\n    example: 'ACTIVATE'\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  readonly status?: UserStatus;\n\n  /**\n   * Optional 'name' property with a maximum length of 30 characters\n   */\n  @ApiPropertyOptional({\n    description: 'Name limited to a maximum of 30 characters',\n    example: 'mohmadreza test'\n  })\n  @IsOptional()\n  @Length(0, 30)\n  readonly name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extending the built-in Request type from Express to create a CustomRequest interface.\nThis interface includes all properties of the standard Request object,\nwith an additional 'user' property that conforms to the CustomUser interface.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         CustomUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomUser\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The User object is id and session of current user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'sessions/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining a CustomUser interface to represent a user object.\nThis interface includes a user ID and a session object,\nallowing for structured user information with session details.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            session\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of current user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Session object of current user like token, expirationDate, device and IP address\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'sessions/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            DatabaseModule is a NestJS module responsible for setting up\nthe database connection using TypeORM.\nIt imports the TypeOrmModule with a configuration provided\nasynchronously. The configuration options, such as the database\ntype, host, username, password, and others, are defined in\nthe databaseConfig module.\nThis setup allows for better flexibility and management of\ndatabase connection settings, making it easier to adapt to\ndifferent environments (e.g., development, testing, production).\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database.config';\n\n/**\n * DatabaseModule is a NestJS module responsible for setting up\n * the database connection using TypeORM.\n *\n * It imports the TypeOrmModule with a configuration provided\n * asynchronously. The configuration options, such as the database\n * type, host, username, password, and others, are defined in\n * the databaseConfig module.\n *\n * This setup allows for better flexibility and management of\n * database connection settings, making it easier to adapt to\n * different environments (e.g., development, testing, production).\n */\n@Module({\n  imports: [TypeOrmModule.forRootAsync(databaseConfig.asProvider())]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Device.html":{"url":"interfaces/Device.html","title":"interface - Device","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Device\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/device.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a device with a specific name and an optional version.\nThe name property is mandatory and should uniquely identify the device,\nwhile the version property is optional, allowing for flexibility in cases\nwhere the device may not have a specific version to report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the device (e.g., \"iPhone\", \"Android Tablet\")\na string that specifies the name of the device\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Device {\n  /**\n   * The name of the device (e.g., \"iPhone\", \"Android Tablet\")\n   * a string that specifies the name of the device\n   */\n  readonly name: string;\n\n  /**\n   * The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n   */\n  readonly version?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnvModule.html":{"url":"modules/EnvModule.html","title":"module - EnvModule","body":"\n                   \n\n\n\n\n    Modules\n    EnvModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/env/env.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a new module using the Module decorator\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ENV_VALIDATION_SCHEMA } from './env.constants';\n\n/**\n * Define a new module using the Module decorator\n */\n@Module({\n  imports: [\n    /**\n     * Specify the modules to be imported into this module\n     * Initialize the ConfigModule with the following configuration options\n     */\n    ConfigModule.forRoot({\n      // Enable the expansion of environment variables (e.g., using ${VAR_NAME})\n      expandVariables: true,\n\n      // Use a validation schema to validate environment variables\n      validationSchema: ENV_VALIDATION_SCHEMA\n    })\n  ]\n})\nexport class EnvModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTables1725986093329.html":{"url":"classes/GenerateTables1725986093329.html","title":"class - GenerateTables1725986093329","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTables1725986093329\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1725986093329-generate-tables.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GenerateTables1725986093329'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1725986093329-generate-tables.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class GenerateTables1725986093329 implements MigrationInterface {\n    name = 'GenerateTables1725986093329'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TABLE \"session\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"token\" character varying NOT NULL,\n                \"device\" json NOT NULL,\n                \"ip\" character varying NOT NULL,\n                \"expiryDate\" TIMESTAMP NOT NULL,\n                \"ownerId\" uuid NOT NULL,\n                CONSTRAINT \"UQ_232f8e85d7633bd6ddfad421696\" UNIQUE (\"token\"),\n                CONSTRAINT \"PK_f55da76ac1c3ac420f444d2ff11\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_status_enum\" AS ENUM('ACTIVATE', 'DEACTIVATE', 'SUSPEND')\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'USER')\n        `);\n        await queryRunner.query(`\n            CREATE TABLE \"user\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"name\" character varying(50),\n                \"email\" character varying NOT NULL,\n                \"username\" character varying(30) NOT NULL,\n                \"password\" character varying NOT NULL,\n                \"status\" \"public\".\"user_status_enum\" NOT NULL DEFAULT 'DEACTIVATE',\n                \"role\" \"public\".\"user_role_enum\" NOT NULL DEFAULT 'USER',\n                \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"deleteAt\" TIMESTAMP,\n                CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"),\n                CONSTRAINT \"UQ_78a916df40e02a9deb1c4b75edb\" UNIQUE (\"username\"),\n                CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\" FOREIGN KEY (\"ownerId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"user\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_status_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"session\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/hashing/hashing.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The HashingService class is defined as an abstract service in NestJS.\nIt provides an interface for hashing and comparing hashed data,\nwhich can be implemented by any concrete class that requires\ncryptographic hashing functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/hashing.service.ts:26\n                        \n                    \n\n\n            \n                \n                        The compare method is an abstract method that takes raw data\nand an encrypted string, returning a Promise that resolves to a\nboolean indicating whether the raw data matches the hashed data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/hashing.service.ts:16\n                        \n                    \n\n\n            \n                \n                        The hash method is an abstract method that takes data as a string or Buffer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a hashed string\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * The HashingService class is defined as an abstract service in NestJS.\n * It provides an interface for hashing and comparing hashed data,\n * which can be implemented by any concrete class that requires\n * cryptographic hashing functionality.\n */\n@Injectable()\nexport abstract class HashingService {\n  /**\n   * The hash method is an abstract method that takes data as a string or Buffer\n   * @param data\n   * @returns returns a Promise that resolves to a hashed string\n   */\n  abstract hash(data: string | Buffer): Promise;\n\n  /**\n   * The compare method is an abstract method that takes raw data\n   * and an encrypted string, returning a Promise that resolves to a\n   * boolean indicating whether the raw data matches the hashed data.\n   * @param data\n   * @param encrypted\n   * @returns returns a Promise that resolves to a boolean\n   */\n  abstract compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This class defines a Data Transfer Object (DTO) for validating and describing\nan identifier that adheres to the UUID standard.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID must be string and conforms to the UUID format'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/id.dto.ts:23\n                        \n                    \n\n            \n                \n                    The 'id' property represents a unique identifier and must be a string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * This class defines a Data Transfer Object (DTO) for validating and describing\n * an identifier that adheres to the UUID standard.\n */\nexport class IdDto {\n  /**\n   * The 'id' property represents a unique identifier and must be a string\n   */\n  @ApiProperty({\n    description: 'The ID must be string and conforms to the UUID format'\n  })\n\n  // Ensures the value is of type string\n  @IsString()\n\n  // Enforces that the string is a valid UUID\n  @IsUUID()\n\n  // Declare the property as read-only\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard is a custom authentication guard that extends the default\nAuthGuard provided by the NestJS Passport module. This guard is used\nto protect routes that require JWT authentication, while also allowing\nfor certain routes to be marked as public (i.e., accessible without\nauthentication).\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Call the constructor of the parent AuthGuard class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines if the current request should be allowed through based\non the authentication logic. It checks if the route is marked as\npublic using the Reflector to access metadata.\nrequest, including the handler and the class where the route is\ndefined.\nlogic passes; otherwise, it returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ExecutionContext provides the context of the\nrequest, including the handler and the class where the route is\ndefined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                true if the route is public or if the default authentication\nlogic passes; otherwise, it returns false.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'auth/decorators/public.decorator';\n\n/**\n * JwtAuthGuard is a custom authentication guard that extends the default\n * AuthGuard provided by the NestJS Passport module. This guard is used\n * to protect routes that require JWT authentication, while also allowing\n * for certain routes to be marked as public (i.e., accessible without\n * authentication).\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * Call the constructor of the parent AuthGuard class.\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Determines if the current request should be allowed through based\n   * on the authentication logic. It checks if the route is marked as\n   * public using the Reflector to access metadata.\n   * @param context - The ExecutionContext provides the context of the\n   * request, including the handler and the class where the route is\n   * defined.\n   * @returns true if the route is public or if the default authentication\n   * logic passes; otherwise, it returns false.\n   */\n  canActivate(context: ExecutionContext) {\n    // Use the Reflector to check if the current route is marked as public.\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(), // Get the method (handler) level metadata.\n      context.getClass() // Get the class level metadata.\n    ]);\n\n    // If the route is public, allow the request without authentication.\n    if (isPublic) return true;\n\n    // Otherwise, proceed with the normal authentication process.\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface represents the structure of a JWT (JSON Web Token) payload.\nIt contains a single property 'id', which is a string that uniquely identifies\nthe user or entity associated with the token. The 'readonly' modifier ensures\nthat the 'id' cannot be modified after it has been set, promoting immutability\nand helping to maintain the integrity of the JWT payload.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of user is string and UUID format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * The ID of user is string and UUID format\n   */\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class is responsible for validating JWTs using Passport.\nIt extends Passport's Strategy class for JWTs and overrides the\nvalidation method to integrate with the application's authentication service.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT containing secret and other settings.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of AuthService to delegate JWT validation logic.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validate method to handle the verification of the JWT.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIncoming request object, used to access headers and other request-specific data.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe decoded payload of the JWT, containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user object if validation is successful; otherwise, it throws an error.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport jwtConfig from 'auth/config/jwt.config'; // Import the JWT configuration\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface'; // Define the interface for JWT payload\nimport { Request } from 'express'; // Import Request type from Express\nimport { ExtractJwt, Strategy } from 'passport-jwt'; // Import JWT extraction and strategy from passport-jwt\n\n/**\n * JwtStrategy class is responsible for validating JWTs using Passport.\n * It extends Passport's Strategy class for JWTs and overrides the\n * validation method to integrate with the application's authentication service.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor for JwtStrategy.\n   * @param jwtConfiguration - Configuration object for JWT containing secret and other settings.\n   * @param authService - Instance of AuthService to delegate JWT validation logic.\n   */\n  constructor(\n    @Inject(jwtConfig.KEY) // Inject the JWT configuration using the key defined in jwtConfig\n    private readonly jwtConfiguration: ConfigType, // Retrieve configuration type for jwtConfig\n    private readonly authService: AuthService // Injecting the AuthService for validation\n  ) {\n    // Call the parent constructor with options for extracting JWT and using the secret\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extracts JWT from Authorization header as Bearer token\n      secretOrKey: jwtConfiguration.secret, // Uses the secret defined in JWT configuration for verification\n      passReqToCallback: true // Enable passing the request object to the validation callback\n    });\n  }\n\n  /**\n   * Validate method to handle the verification of the JWT.\n   * @param req - Incoming request object, used to access headers and other request-specific data.\n   * @param payload - The decoded payload of the JWT, containing user information.\n   * @returns The user object if validation is successful; otherwise, it throws an error.\n   */\n  validate(req: Request, payload: JwtPayload) {\n    // Calls the AuthService to validate the token payload and possibly retrieve user info\n    return this.authService.validateJwt(\n      payload,\n      req.headers?.authorization.replace('bearer ', '')\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\nand specifies the 'local' strategy for authentication.\nThis guard will be used to protect routes that require local authentication,\nensuring that users are authenticated via the local strategy before accessing\nthe corresponding resources.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\n * and specifies the 'local' strategy for authentication.\n * This guard will be used to protect routes that require local authentication,\n * ensuring that users are authenticated via the local strategy before accessing\n * the corresponding resources.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\nIt extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor takes in an AuthService instance, which contains methods for validating user credentials.\nIt also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:30\n                        \n                    \n\n\n            \n                \n                        The validate method is called by Passport after the user submits their credentials.\nIt invokes the AuthService's validateLocal method to check if the provided email and password are valid.\nIf authentication is successful, it should return the user object; otherwise, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                promise user object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport { Strategy } from 'passport-local';\n\n/**\n * The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\n * It extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor takes in an AuthService instance, which contains methods for validating user credentials.\n   * It also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n   * @param authService\n   */\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * The validate method is called by Passport after the user submits their credentials.\n   * It invokes the AuthService's validateLocal method to check if the provided email and password are valid.\n   * If authentication is successful, it should return the user object; otherwise, it will throw an error.\n   * @param email\n   * @param password\n   * @returns promise user object\n   */\n  validate(email: string, password: string) {\n    return this.authService.validateLocal(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly email: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginValidationMiddleware.html":{"url":"injectables/LoginValidationMiddleware.html","title":"injectable - LoginValidationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginValidationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middlewares/login-validation.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a middleware class for validating login user data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/middlewares/login-validation.middleware.ts:23\n                        \n                    \n\n\n            \n                \n                        Middleware function to handle incoming requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express request\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express response\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express next\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware\n} from '@nestjs/common';\nimport { LoginUserDto } from 'auth/dto/login-user.dto';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * Define a middleware class for validating login user data\n */\n@Injectable()\nexport class LoginValidationMiddleware implements NestMiddleware {\n  /**\n   * Middleware function to handle incoming requests\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next\n   * @returns If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n   */\n  async use(req: Request, res: Response, next: NextFunction) {\n    // Convert the request body to a LoginUserDto instance\n    const loginDto = plainToInstance(LoginUserDto, req.body);\n\n    // Validate the loginDto using class-validator\n    // - whitelist: true enforces only the properties defined in the DTO\n    // - forbidNonWhitelisted: true rejects any properties not defined in the DTO\n    const errors = await validate(loginDto, {\n      whitelist: true,\n      forbidNonWhitelisted: true\n    });\n\n    // If validation errors are found, throw a BadRequestException with the error details\n    if (errors.length) {\n      throw new BadRequestException(errors);\n    }\n\n    // If validation is successful, proceed to the next middleware or route handler\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Paginated.html":{"url":"interfaces/Paginated.html","title":"interface - Paginated","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Paginated\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination/interfaces/paginated.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            links\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     T[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        links\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        links:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Paginated {\n  data: T[];\n  meta: {\n    itemsPerPages: number;\n    totalItems: number;\n    currentPage: number;\n    totalPages: number;\n  };\n  links: {\n    first: string;\n    last: string;\n    current: string;\n    next: string;\n    previous: string;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/PaginationModule.html":{"url":"modules/PaginationModule.html","title":"module - PaginationModule","body":"\n                   \n\n\n\n\n    Modules\n    PaginationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nPaginationService \n\nPaginationService \n\n\n\nPaginationModule\n\nPaginationModule\n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/pagination/pagination.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            PaginationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PaginationService } from './pagination.service';\n\n@Module({\n  providers: [PaginationService],\n  exports: [PaginationService]\n})\nexport class PaginationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/PaginationQueryDto.html":{"url":"classes/PaginationQueryDto.html","title":"class - PaginationQueryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  PaginationQueryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination/dto/pagination-query.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                limit\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                page\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        limit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination/dto/pagination-query.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                            Optional\n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsOptional()@IsPositive()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/pagination/dto/pagination-query.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsPositive } from 'class-validator';\n\nexport class PaginationQueryDto {\n  @IsOptional()\n  @IsPositive()\n  readonly limit?: number = 1;\n\n  @IsOptional()\n  @IsPositive()\n  readonly page?: number = 1;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PaginationService.html":{"url":"injectables/PaginationService.html","title":"injectable - PaginationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  PaginationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/pagination/pagination.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                paginateQuery\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(request: Request)\n                    \n                \n                        \n                            \n                                Defined in src/core/common/pagination/pagination.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        request\n                                                  \n                                                        \n                                                                    Request\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        paginateQuery\n                        \n                    \n                \n            \n            \n                \n                        \n                    paginateQuery(paginationQuery: PaginationQueryDto, repository: Repository, where?: FindOptionsWhere[] | FindOptionsWhere, select?: FindOptionsSelect, relations?: FindOptionsRelations)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/pagination/pagination.service.ts:21\n                        \n                    \n\n                    \n                        \n                            Type parameters :\n                            \n                                    T\n                            \n                        \n                    \n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                paginationQuery\n                                            \n                                                            PaginationQueryDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                repository\n                                            \n                                                        Repository\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                where\n                                            \n                                                        FindOptionsWhere[] | FindOptionsWhere\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                select\n                                            \n                                                        FindOptionsSelect\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                relations\n                                            \n                                                        FindOptionsRelations\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { PaginationQueryDto } from './dto/pagination-query.dto';\nimport {\n  FindOptionsRelations,\n  FindOptionsSelect,\n  FindOptionsWhere,\n  ObjectLiteral,\n  Repository\n} from 'typeorm';\nimport { Request } from 'express';\nimport { REQUEST } from '@nestjs/core';\nimport { Paginated } from './interfaces/paginated.interface';\n\n@Injectable()\nexport class PaginationService {\n  constructor(\n    @Inject(REQUEST)\n    private readonly request: Request\n  ) {}\n\n  async paginateQuery(\n    paginationQuery: PaginationQueryDto,\n    repository: Repository,\n    where?: FindOptionsWhere[] | FindOptionsWhere,\n    select?: FindOptionsSelect,\n    relations?: FindOptionsRelations\n  ): Promise> {\n    const results = await repository.find({\n      where,\n      select,\n      relations,\n      skip: (paginationQuery.page - 1) * paginationQuery.limit,\n      take: paginationQuery.limit\n    });\n\n    const baseURL = `${this.request.protocol}://${this.request.headers.host}/`;\n    const newUrl = new URL(this.request.url, baseURL);\n\n    const totalItems = await repository.count();\n    const totalPages = Math.ceil(totalItems / paginationQuery.limit);\n    const nextPage =\n      paginationQuery.page === totalPages\n        ? paginationQuery.page\n        : paginationQuery.page + 1;\n    const previousPage =\n      paginationQuery.page === 1\n        ? paginationQuery.page\n        : paginationQuery.page - 1;\n\n    const response: Paginated = {\n      data: results,\n      meta: {\n        itemsPerPages: paginationQuery.limit,\n        totalItems,\n        currentPage: paginationQuery.page,\n        totalPages\n      },\n      links: {\n        first: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=1`,\n        last: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${totalPages}`,\n        current: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${paginationQuery.page}`,\n        next: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${nextPage}`,\n        previous: `${newUrl.origin}${newUrl.pathname}?limit=${paginationQuery.limit}&page=${previousPage}`\n      }\n    };\n    return response;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  readonly email: string;\n\n  @IsUsername()\n  readonly username: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistryDates.html":{"url":"classes/RegistryDates.html","title":"class - RegistryDates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistryDates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/embedded/registry-dates.embedded.ts\n        \n\n\n            \n                Description\n            \n            \n                A class representing common date fields for an entity in the database.\nThis class uses TypeORM decorators to automatically manage\nthe creation, update, and deletion dates of the entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:14\n                        \n                    \n\n            \n                \n                    The date and time when the entity was created.\nThis field is automatically populated by TypeORM upon entity creation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:29\n                        \n                    \n\n            \n                \n                    The date and time when the entity was soft deleted.\nThis field is automatically populated when the entity is marked as deleted,\nallowing for soft deletion functionality without removing the record from the database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:21\n                        \n                    \n\n            \n                \n                    The date and time when the entity was last updated.\nThis field is automatically updated by TypeORM whenever the entity is modified.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * A class representing common date fields for an entity in the database.\n * This class uses TypeORM decorators to automatically manage\n * the creation, update, and deletion dates of the entity.\n */\nexport class RegistryDates {\n  /**\n   * The date and time when the entity was created.\n   * This field is automatically populated by TypeORM upon entity creation.\n   */\n  @CreateDateColumn()\n  createdAt: Date;\n\n  /**\n   * The date and time when the entity was last updated.\n   * This field is automatically updated by TypeORM whenever the entity is modified.\n   */\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * The date and time when the entity was soft deleted.\n   * This field is automatically populated when the entity is marked as deleted,\n   * allowing for soft deletion functionality without removing the record from the database.\n   */\n  @DeleteDateColumn()\n  deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveDto.html":{"url":"classes/RemoveDto.html","title":"class - RemoveDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/remove.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a Data Transfer Object (DTO) class for removing resources\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                soft\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        soft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The \"soft\" property is optional and has type boolean'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/remove.dto.ts:23\n                        \n                    \n\n            \n                \n                    Define a property 'soft' that is optional and of type boolean\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { IsBoolean } from '../decorators/validators/is-boolean.decorator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Define a Data Transfer Object (DTO) class for removing resources\n */\nexport class RemoveDto {\n  /**\n   * Define a property 'soft' that is optional and of type boolean\n   */\n  @ApiPropertyOptional({\n    description: 'The \"soft\" property is optional and has type boolean'\n  })\n\n  // Indicate that the 'soft' property is optional in the request\n  @IsOptional()\n\n  // Validate that the 'soft' property, if provided, must be a boolean value\n  @IsBoolean()\n\n  // Declare the property as read-only\n  readonly soft: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the Session entity that represents a user session in the application\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                device\n                            \n                            \n                                    \n                                expiryDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ip\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Device\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:26\n                        \n                    \n\n            \n                \n                    Stores device information as a JSON object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:38\n                        \n                    \n\n            \n                \n                    The date and time when the session will expire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:14\n                        \n                    \n\n            \n                \n                    Generates a unique UUID for each session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:32\n                        \n                    \n\n            \n                \n                    IP address of the user during this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:47\n                        \n                    \n\n            \n                \n                    This session must be associated with a user\nThe user who owns this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:20\n                        \n                    \n\n            \n                \n                    Ensures each token is JWT and unique in the database\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Device } from 'core/common/interfaces/device.interface';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Define the Session entity that represents a user session in the application\n */\n@Entity()\nexport class Session {\n  /**\n   * Generates a unique UUID for each session\n   */\n  @PrimaryGeneratedColumn('uuid') //\n  id: string;\n\n  /**\n   * Ensures each token is JWT and unique in the database\n   */\n  @Column({ unique: true })\n  token: string;\n\n  /**\n   * Stores device information as a JSON object\n   */\n  @Column({ type: 'json' })\n  device: Device;\n\n  /**\n   * IP address of the user during this session\n   */\n  @Column()\n  ip: string;\n\n  /**\n   * The date and time when the session will expire\n   */\n  @Column()\n  expiryDate: Date; //\n\n  /**\n   * This session must be associated with a user\n   * The user who owns this session\n   */\n  @ManyToOne(() => User, (user) => user.id, {\n    nullable: false\n  })\n  owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionsController.html":{"url":"controllers/SessionsController.html","title":"controller - SessionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sessions\n            \n\n\n            \n                Description\n            \n            \n                The SessionController handles incoming requests related to sessions.\nIt is decorated with the Controller decorator, indicating that it\nis a NestJS controller responsible for processing routes that start\nwith 'sessions'. Additional route handling methods can be added in\nthis class to define specific actions for session management.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n/**\n * The SessionController handles incoming requests related to sessions.\n * It is decorated with the Controller decorator, indicating that it\n * is a NestJS controller responsible for processing routes that start\n * with 'sessions'. Additional route handling methods can be added in\n * this class to define specific actions for session management.\n */\n@Controller('sessions')\nexport class SessionsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionsModule.html":{"url":"modules/SessionsModule.html","title":"module - SessionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_providers\n\n\n\n\nSessionsService\n\nSessionsService\n\n\n\nSessionsModule\n\nSessionsModule\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sessions/sessions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define the SessionModule using the Module decorator\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from './entities/session.entity';\nimport { SessionsService } from './sessions.service';\nimport { SessionsController } from './sessions.controller';\n\n/**\n * Define the SessionModule using the Module decorator\n */\n@Module({\n  // Specify the entities that should be registered with TypeORM\n  imports: [TypeOrmModule.forFeature([User, Session])],\n  // Register the SessionService as a provider for dependency injection\n  providers: [SessionsService],\n  // Register the SessionController to handle incoming requests related to sessions\n  controllers: [SessionsController]\n})\nexport class SessionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionsService.html":{"url":"injectables/SessionsService.html","title":"injectable - SessionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The SessionService class is marked as Injectable,\nwhich allows it to be injected into other components in the application.\nThis service handles session-related operations, such as creating,\nvalidating, and retrieving user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                sessions\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, sessionRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/sessions/sessions.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                DataSource instance for accessing the database\n\n                                                        \n                                                \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Session repository for CRUD operations on Session entities\n\n                                                        \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The User repository to access User entities\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string, token: string, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Creates a new session for a specified user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                New session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    sessions(undefined: CustomUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves sessions for a given user****\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CustomUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Session lists\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Validates a session based on the user ID and token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Object of session\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { Session } from 'sessions/entities/session.entity';\nimport { DataSource, Raw, Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * The SessionService class is marked as Injectable,\n * which allows it to be injected into other components in the application.\n * This service handles session-related operations, such as creating,\n * validating, and retrieving user sessions.\n */\n@Injectable()\nexport class SessionsService {\n  /**\n   * @param dataSource DataSource instance for accessing the database\n   * @param sessionRepository The Session repository for CRUD operations on Session entities\n   * @param userRepository The User repository to access User entities\n   */\n  constructor(\n    private readonly dataSource: DataSource,\n    @InjectRepository(Session)\n    private readonly sessionRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Creates a new session for a specified user\n   * @param userId\n   * @param token\n   * @param ip\n   * @param device\n   * @returns New session\n   */\n  async create(userId: string, token: string, ip: string, device: Device) {\n    /**\n     * Creates a new session instance with the provided user ID, token, IP address, device information,\n     * and sets the expiry date to 31 days from now\n     */\n    const session = this.sessionRepository.create({\n      owner: {\n        id: userId\n      },\n      ip,\n      token,\n      device,\n      expiryDate: new Date(new Date().setMilliseconds(31 * 24 * 60 * 60 * 1000))\n    });\n\n    // Saves the newly created session to the database and returns it.\n    return await this.sessionRepository.save(session);\n  }\n\n  /**\n   * Validates a session based on the user ID and token.\n   * @param userId\n   * @param token\n   * @returns Object of session\n   */\n  async validate(userId: string, token: string): Promise {\n    /**\n     * Finds a session that matches the user ID and token,\n     * and checks if the session has not expired by comparing the expiry date with the current date.\n     */\n    const session = await this.dataSource.getRepository(Session).findOne({\n      where: {\n        token,\n        owner: {\n          id: userId\n        },\n        // Ensures the expiry date is in the future.\n        expiryDate: Raw((alias) => `${alias} > NOW()`)\n      }\n    });\n\n    // Returns the found session or null if not found or expired.\n    return session;\n  }\n\n  /**\n   * Retrieves sessions for a given user****\n   * @param param0\n   * @returns Session lists\n   */\n  async sessions({ id }: CustomUser) {\n    /**\n     * Fetches a user by ID along with their related sessions\n     */\n    await this.userRepository.findOne({\n      where: { id },\n      // Specifies that related sessions should be fetched.\n      relations: ['session']\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                UpdateUserDto class is a Data Transfer Object (DTO) that\nextends the CreateUserDto. This class is used for validating\nand documenting the structure of data sent to the API for updating\nan existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user that needs to be updated.'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the user that needs to be updated.\nThis property is required and should be a valid UUID string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * UpdateUserDto class is a Data Transfer Object (DTO) that\n * extends the CreateUserDto. This class is used for validating\n * and documenting the structure of data sent to the API for updating\n * an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * The ID of the user that needs to be updated.\n   * This property is required and should be a valid UUID string.\n   * @type {string}\n   * @example \"dcbec18c-2bdd-4e7b-9f53-8721c3c99ea4\"\n   */\n  @ApiProperty({\n    description: 'The ID of the user that needs to be updated.'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the User entity representing a user in the system\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                registryDates\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                sessions\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n            \n                \n                    User's email must be unique\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n            \n                \n                    Generates a unique identifier for each user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    User's name, optional and not selected by default\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    Password is not selected by default (for security)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registryDates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistryDates\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column(undefined, {prefix: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n            \n                \n                    Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n            \n                \n                    User role defaults to USER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Session[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, session => session.owner, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Defines a one-to-many relation with the Session entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    User status, defaults to DEACTIVATE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    Username has a maximum length of 30 and must be unique\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { RegistryDates } from 'core/common/embedded/registry-dates.embedded';\nimport { UserRole } from 'core/common/enums/user-role.enum';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\nimport { Session } from 'sessions/entities/session.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Define the User entity representing a user in the system\n */\n@Entity()\nexport class User {\n  /**\n   * Generates a unique identifier for each user\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * User's name, optional and not selected by default\n   */\n  @Column({ length: 50, nullable: true, select: false })\n  name: string;\n\n  /**\n   * User's email must be unique\n   */\n  @Column({ unique: true })\n  email: string;\n\n  /**\n   * Username has a maximum length of 30 and must be unique\n   */\n  @Column({ unique: true, length: 30 })\n  username: string;\n\n  /**\n   * Password is not selected by default (for security)\n   */\n  @Column({ select: false })\n  password: string;\n\n  /**\n   * User status, defaults to DEACTIVATE\n   */\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.DEACTIVATE })\n  status: UserStatus;\n\n  /**\n   * User role defaults to USER\n   */\n  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n   */\n  @Column(() => RegistryDates, { prefix: false })\n  registryDates: RegistryDates;\n\n  /**\n   * Defines a one-to-many relation with the Session entity\n   */\n  @OneToMany(() => Session, (session) => session.owner, {\n    /**\n     * Allows sessions to be softly removed or recovered\n     */\n    cascade: ['soft-remove', 'recover']\n  })\n  sessions: Session[];\n\n  /**\n   * Getter to determine if the user is considered deleted based on the deletion date\n   */\n  get isDeleted() {\n    /**\n     * Returns true if deleteAt is set (indicating the user is deleted)\n     */\n    return !!this.registryDates.deleteAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserChangePasswordDto.html":{"url":"classes/UserChangePasswordDto.html","title":"class - UserChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/user-change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPassword\n                            \n                            \n                                    \n                                    Readonly\n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class UserChangePasswordDto {\n  @IsPassword()\n  readonly currentPassword: string;\n\n  @IsPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for 'users' route\nTags the API endpoints for easier grouping in documentation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({description: 'Creates a new user'})@ApiResponse({status: 201, description: 'You get a 201 response if your data is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Endpoint to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'Get list of users register in application'})@ApiResponse({status: 200, description: 'Fetch users successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve all registered users\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Users list\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({description: 'Get single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Fetch single user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Get object of user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: IdDto, undefined: RemoveDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({description: 'Delete single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiQuery({name: 'soft', type: Boolean, required: false, description: 'This query for soft delete data of user in application'})@ApiResponse({status: 200, description: 'Delete user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:156\n                        \n                    \n\n\n            \n                \n                        Endpoint to delete a user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            RemoveDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({description: 'Update single user with id and send data'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Update data of user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Endpoint to update a user's information\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags\n} from '@nestjs/swagger';\nimport { IdDto } from 'core/common/dto/id.dto';\nimport { RemoveDto } from 'core/common/dto/remove.dto';\n\n/**\n * Controller for 'users' route\n * Tags the API endpoints for easier grouping in documentation\n */\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  /**\n   * Inject the UsersService\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Endpoint to create a new user\n   * @param createUserDto\n   * @returns\n   */\n  @Post()\n  @ApiOperation({\n    description: 'Creates a new user'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your data is created successfully'\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    /**\n     * Receives user data for creation\n     * Calls the service method to create a user\n     */\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Endpoint to retrieve all registered users\n   * @returns Users list\n   */\n  @Get()\n  @ApiOperation({\n    description: 'Get list of users register in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch users successfully'\n  })\n  findAll() {\n    // Calls the service method to get all users\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Endpoint to retrieve a single user by ID\n   * @param param0\n   * @returns Get object of user\n   */\n  @Get(':id')\n  @ApiOperation({\n    description: 'Get single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch single user successfully'\n  })\n  findOne(@Param('id') { id }: IdDto) {\n    /**\n     * Extracts user ID from the request parameters\n     * Calls the service method to find a user by ID\n     */\n    return this.usersService.findOneById(id);\n  }\n\n  /**\n   * Endpoint to update a user's information\n   * @param param0\n   * @param updateUserDto\n   * @returns\n   */\n  @Patch(':id')\n  @ApiOperation({\n    description: 'Update single user with id and send data'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Update data of user successfully'\n  })\n  update(@Param('id') { id }: IdDto, @Body() updateUserDto: UpdateUserDto) {\n    /**\n     * Extracts ID and update data from the request\n     * Calls the service method to update user data\n     */\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  /**\n   * Endpoint to delete a user by ID\n   * @param param0\n   * @param param1\n   * @returns\n   */\n  @Delete(':id')\n  @ApiOperation({\n    description: 'Delete single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiQuery({\n    name: 'soft',\n    type: Boolean,\n    required: false,\n    description: 'This query for soft delete data of user in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete user successfully'\n  })\n  remove(@Param('id') { id }: IdDto, @Query() { soft }: RemoveDto) {\n    /**\n     * Extracts ID and soft delete flag from the request\n     * Calls the service method to remove the user\n     */\n    return this.usersService.remove(id, soft);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCommonModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            UsersModule is responsible for managing user-related functionalities within the application.\nIt imports necessary modules and provides various components for user management, including:\n\nTypeOrmModule with User and Session entities to enable database operations for user and session management.\nCommonModule to handle hashing password and compare password with hashingService.\n\nThe module declares:\n\nUsersController, which defines the routes and handling of user-related HTTP requests.\nUsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\nUsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n\nOverall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from 'sessions/entities/session.entity';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/users.subscriber';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { CommonModule } from 'core/common/common.module';\n\n/**\n * UsersModule is responsible for managing user-related functionalities within the application.\n *\n * It imports necessary modules and provides various components for user management, including:\n * - TypeOrmModule with User and Session entities to enable database operations for user and session management.\n * - CommonModule to handle hashing password and compare password with hashingService.\n *\n * The module declares:\n * - UsersController, which defines the routes and handling of user-related HTTP requests.\n * - UsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\n * - UsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n *\n * Overall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session]), CommonModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and preform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the class, which injects the User repository.\nThe @InjectRepository(User) decorator is used to get an instance of the\nUser repository from the dependency injection container. This allows\nthe class to interact with the database using the userRepository\ninstance, enabling operations such as creating, retrieving,\nupdating, or deleting User entities.\naccess to user-related database operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the Repository that provides\naccess to user-related database operations.\n\n\n                                                        \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HashingService for password hashing and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:62\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(where: FindOptionsWhere | FindOptionsWhere[], select: FindOptionsSelect | FindOptionsSelectByString)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Find a single user using Where and Select query\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                select\n                                            \n                                                            FindOptionsSelect | FindOptionsSelectByString\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, soft: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Find and Delete a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Find and Update a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(id: string, undefined: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Update user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  FindOptionsSelect,\n  FindOptionsSelectByString,\n  FindOptionsWhere,\n  Repository\n} from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserChangePasswordDto } from '../core/common/dto/user-change-password.dto';\nimport { HashingService } from 'core/common/hashing/hashing.service';\n\n/**\n * Class to connect to Users table and preform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the class, which injects the User repository.\n   * The @InjectRepository(User) decorator is used to get an instance of the\n   * User repository from the dependency injection container. This allows\n   * the class to interact with the database using the userRepository\n   * instance, enabling operations such as creating, retrieving,\n   * updating, or deleting User entities.\n   * @param userRepository - An instance of the Repository that provides\n   * access to user-related database operations.\n   * @param hashingService HashingService for password hashing and compare password\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    // Injecting the HashingService for password hashing\n    private readonly hashingService: HashingService\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...createUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find a single user using Where and Select query\n   */\n  async findOne(\n    where: FindOptionsWhere | FindOptionsWhere[],\n    select: FindOptionsSelect | FindOptionsSelectByString = [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n  ) {\n    // Find user\n    const user = await this.userRepository.findOne({ where, select });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  async findOneById(id: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find and Update a single user using the ID of user\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      // Find user with id and update data\n      const user = await this.userRepository.preload({\n        id,\n        ...updateUserDto\n      });\n\n      // If doesn't exists, throw error\n      if (!user) {\n        throw new NotFoundException('user not found');\n      }\n\n      // Otherwise save and return user\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update user's password\n   * @param id\n   * @param UserChangePasswordDto\n   */\n  async updatePassword(\n    id: string,\n    { currentPassword, newPassword }: UserChangePasswordDto\n  ) {\n    // Finds the user by their ID, only retrieving the password\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['password']\n    });\n\n    /**\n     * Compares the provided current password with the stored password hash using the HashingService\n     */\n    const isMatch = await this.hashingService.compare(\n      currentPassword,\n      user.password\n    );\n\n    // Throws an UnauthorizedException if the current password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // If the new password is different from the current password, updates the user's password in the database\n    if (currentPassword !== newPassword)\n      await this.userRepository.update({ id }, { password: newPassword });\n  }\n\n  /**\n   * Find and Delete a single user using the ID of user\n   */\n  async remove(id: string, soft: boolean) {\n    const user = await this.findOneById(id);\n    return soft\n      ? await this.userRepository.softRemove(user)\n      : await this.userRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersSubscriber.html":{"url":"classes/UsersSubscriber.html","title":"class - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/subscribers/users.subscriber.ts\n        \n\n\n            \n                Description\n            \n            \n                Decorator that marks the class as a subscriber for entity events\n\n            \n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeInsert\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/subscribers/users.subscriber.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the data source and hashing service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeInsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeInsert(event: InsertEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:45\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is inserted into the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            InsertEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(event: UpdateEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:57\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is updated in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UpdateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:36\n                        \n                    \n\n\n            \n                \n                        This method specifies the entity that this subscriber listens to\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashingService } from 'core/common/hashing/hashing.service';\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  UpdateEvent\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Decorator that marks the class as a subscriber for entity events\n */\n@EventSubscriber()\nexport class UsersSubscriber implements EntitySubscriberInterface {\n  /**\n   * Constructor to initialize the data source and hashing service\n   * @param dataSource\n   * @param hashingService\n   */\n  constructor(\n    // Injecting DataSource for database operations\n    private readonly dataSource: DataSource,\n\n    // Injecting HashingService for password hashing\n    private readonly hashingService: HashingService\n  ) {\n    // Register the subscriber with the data source, allowing it to listen to events\n    dataSource.subscribers.push(this);\n  }\n\n  /**\n   * This method specifies the entity that this subscriber listens to\n   * @returns User entity\n   */\n  listenTo() {\n    // Listen to User entity events\n    return User;\n  }\n\n  /**\n   * Method to handle actions before a user entity is inserted into the database\n   * @param event\n   */\n  async beforeInsert(event: InsertEvent) {\n    // Destructure user entity from the event\n    const { entity: user } = event;\n\n    // Hash the user's password before inserting it into the database\n    user.password = await this.hashingService.hash(user.password);\n  }\n\n  /**\n   * Method to handle actions before a user entity is updated in the database\n   * @param event\n   */\n  async beforeUpdate(event: UpdateEvent) {\n    // Destructure the entity from the event\n    const { entity } = event;\n\n    // Explicitly cast the entity to User type\n    const user = entity as User;\n\n    // Hash the user's password before updating it in the database\n    user.password = await this.hashingService.hash(user.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                commitlint.config.ts\n            \n            variable\n            Configuration\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/ipAddress.decorator.ts\n            \n            variable\n            IpAddress\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user-agent.decorator.ts\n            \n            variable\n            UserAgent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/middlewares/login-validation.middleware.ts\n            \n            injectable\n            LoginValidationMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            toBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            ToBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-boolean.decorator.ts\n            \n            variable\n            IsBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IS_PASSWORD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            isPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IsPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IS_USERNAME_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            isUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IsUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            usernameRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/remove.dto.ts\n            \n            class\n            RemoveDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/user-change-password.dto.ts\n            \n            class\n            UserChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/embedded/registry-dates.embedded.ts\n            \n            class\n            RegistryDates\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/common/hashing/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomUser\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/device.interface.ts\n            \n            interface\n            Device\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/pagination/dto/pagination-query.dto.ts\n            \n            class\n            PaginationQueryDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/pagination/interfaces/paginated.interface.ts\n            \n            interface\n            Paginated\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/common/pagination/pagination.service.ts\n            \n            injectable\n            PaginationService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/util/common.constants.ts\n            \n            variable\n            VALIDATION_PIPE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1725986093329-generate-tables.ts\n            \n            class\n            GenerateTables1725986093329\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/env/env.constants.ts\n            \n            variable\n            ENV_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.controller.ts\n            \n            controller\n            SessionsController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.service.ts\n            \n            injectable\n            SessionsService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/subscribers/users.subscriber.ts\n            \n            class\n            UsersSubscriber\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport : ^1.0.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            This enum defines the different roles a user can have in the application.\n\nADMIN: Represents a user with administrative privileges, allowing full access to the system.\nAUTHOR: Represents a user who can create and manage content, but with limited permissions compared to an admin.\nUSER: Represents a regular user with basic access, mainly for viewing content and participating in the application.\n\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 AUTHOR\n                            \n                        \n                        \n                            \n                                Value : AUTHOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/core/common/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                    \n                        \n                            Define an enumeration for user status in the application\n\nACTIVATE: Represents a user who is currently active and has access to the system\nDEACTIVATE: Represents a user who has been deactivated and no longer has access to the system\nSUSPEND: Represents a user whose access is temporarily suspended, possibly due to violations or other reasons\n\n\n                        \n                    \n                        \n                            \n                                 ACTIVATE\n                            \n                        \n                        \n                            \n                                Value : ACTIVATE\n                            \n                        \n                        \n                            \n                                 DEACTIVATE\n                            \n                        \n                        \n                            \n                                Value : DEACTIVATE\n                            \n                        \n                        \n                            \n                                 SUSPEND\n                            \n                        \n                        \n                            \n                                Value : SUSPEND\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function is an asynchronous function that initializes and starts the application.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nStay in touch\n\nAuthor - Mohamadreza Mosalli\nWebsite - https://minidocs.com\n\nLicense\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnvModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        PaginationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_imports\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\ncluster_PaginationModule\n\n\n\ncluster_PaginationModule_exports\n\n\n\ncluster_PaginationModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\nUsersModule -->\n\nCommonModule->UsersModule\n\n\n\n\n\nHashingService \n\nHashingService \n\nHashingService  -->\n\nCommonModule->HashingService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nAuthModule -->\n\nSessionsService->AuthModule\n\n\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nPaginationModule\n\nPaginationModule\n\nCommonModule -->\n\nPaginationModule->CommonModule\n\n\n\n\n\nPaginationService \n\nPaginationService \n\nPaginationService  -->\n\nPaginationModule->PaginationService \n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\nPaginationService\n\nPaginationService\n\nPaginationModule -->\n\nPaginationService->PaginationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Mohamadreza Mosalli\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Configuration   (commitlint.config.ts)\n                        \n                        \n                            ENV_VALIDATION_SCHEMA   (src/.../env.constants.ts)\n                        \n                        \n                            IpAddress   (src/.../ipAddress.decorator.ts)\n                        \n                        \n                            IS_PASSWORD_KEY   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            IS_USERNAME_KEY   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsBoolean   (src/.../is-boolean.decorator.ts)\n                        \n                        \n                            isPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            isUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            passwordRegex   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            ToBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserAgent   (src/.../user-agent.decorator.ts)\n                        \n                        \n                            usernameRegex   (src/.../is-username.decorator.ts)\n                        \n                        \n                            VALIDATION_PIPE_OPTIONS   (src/.../common.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    commitlint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  extends: ['@commitlint/config-conventional'],\n  parserPreset: 'conventional-changelog-atom',\n  formatter: '@commitlint/format',\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // New feature\n        'fix', // Bug fix\n        'docs', // Documentation changes\n        'style', // Changes that do not affect the meaning of the code (white-space, formatting, etc.)\n        'refactor', // Code changes that neither fix a bug nor add a feature\n        'perf', // Performance improvement\n        'test', // Adding missing tests or correcting existing tests\n        'build', // Changes that affect the build system or external dependencies (example scopes: npm)\n        'ci', // Changes to CI configuration files and scripts\n        'chore', // Other changes that don't modify src or test files\n        'revert' // Reverts a previous commit\n      ]\n    ],\n    'scope-enum': [\n      2,\n      'always',\n      [\n        'setup', // Project setup\n        'config', // Configuration files\n        'deps', // Dependency updates\n        'feature', // Feature-specific changes\n        'bug', // Bug fixes\n        'docs', // Documentation\n        'style', // Code style/formatting\n        'refactor', // Code refactoring\n        'test', // Tests\n        'build', // Build scripts or configuration\n        'ci', // Continuous integration\n        'release', // Release related changes\n        'other' // Other changes\n      ]\n    ]\n  }\n}\n                    \n                \n\n            \n                \n                    Check messages of commit with this format\n\n                \n            \n\n        \n    \n\n    src/core/env/env.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  // Database username, must be a string and is required.\n  DATA_SOURCE_USERNAME: Joi.string().required(),\n\n  // Database password, must be a string and is required.\n  DATA_SOURCE_PASSWORD: Joi.string().required(),\n\n  // Host address for the database, must be a string and is required.\n  DATA_SOURCE_HOST: Joi.string().required(),\n\n  // Port number for the database connection, must be a number and is required.\n  DATA_SOURCE_PORT: Joi.number().required(),\n\n  // Name of the database to connect to, must be a string and is required.\n  DATA_SOURCE_DATABASE: Joi.string().required(),\n\n  // Connection URL for the database, must be a string and is required.\n  DATA_SOURCE_URL: Joi.string().required(),\n\n  // Secret key for JSON Web Token encryption, must be a string and is required.\n  JWT_SECRET_KEY: Joi.string().required(),\n\n  // Current environment (e.g., development, production), must be a string and is required.\n  NODE_ENV: Joi.string().required()\n})\n                    \n                \n\n            \n                \n                    Defines a validation schema for environment variables using Joi.\nThis schema specifies the required fields for the application to run properly.\nEach field must meet the specified type requirements:\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/ipAddress.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IpAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get ip address\n    const ip = request.headers['x-forwarded-for'] as string;\n\n    if (ip && process.env.NODE_ENV === 'production') {\n      ip.split(',')[0].replace(',', '');\n    }\n\n    // Set ip address\n    return ip ?? '127.0.0.1';\n  }\n)\n                    \n                \n\n            \n                \n                    IpAddress is a custom parameter decorator for use in NestJS controllers.\nIt extracts the client's IP address from the request object. The decorator will primarily\nbe used to inject the IP address into controller methods as a parameter.\nThe decorator performs the following operations:\n\nIt uses the ExecutionContext to access the HTTP request object.\nIt attempts to read the IP address from the 'x-forwarded-for' header, which is typically\nused in a proxied environment (like behind a load balancer).\nIf the application is running in a production environment and the 'x-forwarded-for' header\nis present, it splits the header value (which may contain multiple IPs) and keeps the first one,\nensuring that any extra spaces or commas are removed.\nIf no valid IP address is found, it defaults to returning '127.0.0.1', which is the localhost address.\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PASSWORD_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPassword'\n                    \n                \n\n            \n                \n                    A unique key identifier for the custom password validator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, passwordRegex)\n                    \n                \n\n            \n                \n                    A helper function that checks if the given value matches the password regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_PASSWORD_KEY, // Name of the custom validation rule\n    validator: {\n      // Implementation of the validation logic, using the isPassword helper\n      validate: (value): boolean => isPassword(value),\n      // Custom default error message returned when validation fails\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom decorator function for validating passwords on class properties.\nIt utilizes the 'class-validator' library to create a validation rule for password strength.\nIt takes an optional validationOptions parameter for customizing error messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n            \n                \n                    Regular expression for validating a password.\nThe password must contain:\n\nAt least one lowercase letter\nAt least one uppercase letter\nAt least one special character from the specified set (@$!%*?&)\nLength between 8 to 20 characters\n\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Defining a constant key for identifying public routes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    The Public decorator function sets metadata on a route handler to indicate\nthat the route should be treated as public, meaning it does not require authentication.\nBy calling SetMetadata with the IS_PUBLIC_KEY and a value of true,\nthis decorator can be used to easily mark controller methods for public access.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_USERNAME_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isUsername'\n                    \n                \n\n            \n                \n                    Key to identify the custom validation rule\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, usernameRegex)\n                    \n                \n\n            \n                \n                    Function to determine if a value matches the username regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions // Optional object for additional validation options\n): PropertyDecorator => {\n  return ValidateBy({\n    // Name of the validation rule\n    name: IS_USERNAME_KEY,\n\n    // Validator object containing the validation logic\n    validator: {\n      // Validation function that returns true if value is a valid username\n      validate: (value): boolean => isUsername(value),\n\n      // Default error message if validation fails\n      defaultMessage: buildMessage(\n        // Custom message format, indicating which property failed validation\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom validation decorator for username validation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{3,30}$/\n                    \n                \n\n            \n                \n                    Define a regular expression for validating usernames\nUsername must:\n\nNot contain two consecutive dots\nNot end with a dot\nStart with a word character (not a special character)\nHave a length between 4 to 30 characters\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) =>\n  applyDecorators(DefaultIsBoolean(validationOptions), ToBoolean())\n                    \n                \n\n            \n                \n                    Create a custom decorator 'IsBoolean' that combines the default class-validator\n'IsBoolean' validation with a custom transformation decorator 'ToBoolean'.\nThis allows for both validation of boolean values and automatic conversion\nof input values into booleans before validation occurs.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/transforms/to-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown) => {\n  // Using switch statement to handle different input cases.\n  switch (value) {\n    // If the input value is null, return 'failure'.\n    case null:\n      return 'failure';\n\n    // When the input value is the string 'true', return a boolean true.\n    case 'true':\n      return true;\n\n    // When the input value is the string 'false', return a boolean false.\n    case 'false':\n      return false;\n\n    // For any other value, return the value unchanged.\n    default:\n      return value;\n  }\n}\n                    \n                \n\n            \n                \n                    A utility function that converts various input values to a boolean type.\nThe function returns either a boolean (true or false), a string 'failure', or the original value based on the input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ToBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Transform(({ obj, key }) => toBoolean(obj[key]))\n                    \n                \n\n            \n                \n                    A decorator function ToBoolean that applies the custom transformation logic to class properties.\nThis decorator uses the Transform decorator to map the relevant property value to its boolean representation\nusing the toBoolean function. It extracts the value from the object using the given key.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    // Retrieve the request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get the user object from the request\n    const user = request.user;\n\n    // Log the user object for debugging purposes\n    console.log('user', user);\n\n    // If a specific field is requested, return that field; otherwise, return the whole user object\n    return data ? user?.[data] : user;\n  }\n)\n                    \n                \n\n            \n                \n                    User decorator that extracts user information from the request object.\nThis custom decorator can be used in NestJS route handlers to easily access\nuser data stored in the request object. It leverages the createParamDecorator\nfunction provided by NestJS to create a parameter decorator that can be used in\ncontroller methods.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user-agent.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Device => {\n    // Retrieve the HTTP request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Obtain the 'User-Agent' header from the request headers\n    const userAgent = request.headers['user-agent'];\n\n    // Initialize the device object with a default name of 'unknown'\n    let device: Device = {\n      name: 'unknown'\n    };\n\n    // If a User-Agent string is present, start pattern matching to identify the device\n    if (userAgent) {\n      // Check if the User-Agent indicates an iOS device\n      if (/like Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'iOS',\n          // Extract the version number using a regex pattern and replace underscores with dots\n          version: /CPU( iPhone)? OS ([0-9\\._]+) like Mac OS X/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates an Android device\n      } else if (/Android/.test(userAgent)) {\n        device = {\n          name: 'Android',\n          // Extract the version number of Android from the User-Agent string\n          version: /Android ([0-9\\.]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a macOS device\n      } else if (/(Intel|PPC) Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'macOS',\n          // Extract the version number of macOS from the User-Agent string, replacing underscores with dots\n          version: /(Intel|PPC) Mac OS X ?([0-9\\._]*)[\\)\\;]/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates a Windows device\n      } else if (/Windows NT/.test(userAgent)) {\n        device = {\n          name: 'Windows',\n          // Extract the version number of Windows from the User-Agent string\n          version: /Windows NT ([0-9\\._]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a Linux operating system\n      } else if (/Linux/i.test(userAgent) && /X11/i.test(userAgent)) {\n        device = {\n          name: 'Linux'\n          // Version detection can be added here if needed\n        };\n      }\n    }\n\n    // Return the parsed device information\n    return device;\n  }\n)\n                    \n                \n\n            \n                \n                    This decorator extracts and parses the 'User-Agent' header from the HTTP request,\nallowing the identification of the client's device type and version.\nIt is created using NestJS's createParamDecorator function.\n\n                \n            \n\n        \n    \n\n    src/core/common/util/common.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_PIPE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * 'whitelist' option ensures that only properties that are defined in the DTO\n   * are allowed in the incoming request. Any properties that are not in the\n   * DTO will be stripped from the request object.\n   */\n  whitelist: true,\n\n  /**\n   * 'forbidNonWhitelisted' option throws an error if any non-whitelisted\n   * properties are present in the incoming request. This is useful for\n   * enforcing strict validation and preventing unexpected data from being processed.\n   */\n  forbidNonWhitelisted: true,\n\n  /**\n   * 'transform' option enables automatic transformation of incoming request\n   * data into the specified DTO types. This way, data will be automatically\n   * converted to the types defined in the DTO (e.g., string to number).\n   */\n  transform: true,\n\n  // 'transformOptions' allows for additional settings for the transformation process.\n  transformOptions: {\n    /**\n     * 'enableImplicitConversion' allows for automatic type conversion of properties\n     * to their respective types as defined in the DTO. For example, if a property\n     * is defined as a number in the DTO, a string representation of that number\n     * in the incoming request will be converted to a number automatically.\n     */\n    enableImplicitConversion: true\n  }\n}\n                    \n                \n\n            \n                \n                    Configuration object for the validation pipe in a NestJS application.\nThe validation pipe is used to automatically validate incoming requests and\ntransform DTOs (Data Transfer Objects) to the specified types.\nThe options set here enhance the validation and transformation process.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
