var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,0.956,1,2.406]],["body/modules/AppModule.html",[0,1.795,1,4.817,2,2.322,3,1.548,4,2.018,5,2.018,6,1.758,7,2.018,8,2.018,9,3.226,10,3.226,11,4.195,12,0.023,13,4.195,14,4.045,15,4.195,16,2.691,17,2.018,18,1.88,19,0.248,20,0.248,21,0.219,22,3.787,23,0.34,24,4.302,25,5.051,26,2.195,27,3.229,28,5.051,29,4.302,30,3.44,31,3.44,32,5.051,33,3.808,34,3.808,35,2.507,36,4.302,37,6.061,38,2.344,39,3.146,40,1.153,41,1.724,42,3.481,43,3.808,44,2.477,45,2.901,46,1.724,47,4.302,48,2.691,49,3.146,50,5.051,51,5.051,52,5.051,53,5.051,54,3.808,55,3.44,56,4.302,57,0.514,58,0.81,59,3.787,60,3.787,61,3.787,62,3.787,63,0.248,64,0.012,65,0.016,66,0.016]],["title/controllers/AuthController.html",[67,1.754,68,2.406]],["body/controllers/AuthController.html",[12,0.023,19,0.191,20,0.191,21,0.169,23,0.486,26,1.525,38,1.955,40,1.236,44,1.721,57,0.55,58,0.624,63,0.191,64,0.009,65,0.013,66,0.013,67,1.448,68,3.688,69,1.448,70,2.484,71,1.986,72,2.917,73,1.955,74,3.176,75,2.244,76,0.339,77,1.28,78,4.211,79,3.588,80,4.33,81,3.11,82,2.917,83,1.443,84,3.628,85,2.082,86,2.917,87,1.961,88,0.842,89,2.917,90,3.079,91,1.849,92,1.466,93,0.629,94,1.383,95,4.927,96,2.688,97,2.885,98,1.919,99,2.917,100,2.917,101,2.917,102,3.588,103,2.484,104,5.415,105,3.063,106,2.704,107,2.917,108,2.917,109,3.176,110,2.513,111,2.091,112,1.438,113,2.484,114,3.843,115,2.917,116,2.917,117,1.721,118,3.176,119,2.917,120,2.917,121,2.484,122,2.917,123,1.554,124,2.455,125,2.484,126,3.176,127,2.917,128,3.079,129,2.917,130,3.176,131,2.917,132,2.917,133,2.917,134,2.484,135,1.675,136,1.817,137,2.484,138,3.588,139,1.986,140,2.917,141,2.484,142,1.554,143,1.986,144,2.199,145,2.199,146,2.917,147,2.917,148,1.986,149,0.703,150,2.372,151,2.917,152,2.917,153,2.082,154,2.917,155,4.212,156,2.917,157,2.917,158,2.917,159,4.212,160,2.917,161,2.917,162,2.917,163,2.917,164,2.917,165,2.917,166,2.917]],["title/modules/AuthModule.html",[0,0.956,11,2.201]],["body/modules/AuthModule.html",[0,1.66,2,1.282,3,1.282,4,1.671,5,1.671,6,1.456,7,2.982,8,1.671,11,4.393,12,0.023,16,2.364,17,1.671,18,1.557,19,0.206,20,0.206,21,0.182,23,0.282,27,2.364,34,2.365,38,2.846,40,1.048,41,1.758,42,1.802,44,2.104,48,1.671,49,2.764,57,0.575,58,0.671,63,0.206,64,0.01,65,0.014,66,0.014,68,3.506,69,2.556,73,2.06,75,2.364,77,0.953,81,1.802,88,0.488,91,1.071,92,0.849,93,0.364,94,0.801,98,0.953,123,1.671,124,3.044,125,2.672,136,3.207,137,2.672,138,2.672,167,2.672,168,2.672,169,2.672,170,3.267,171,3.819,172,3.819,173,3.267,174,3.044,175,3.137,176,4.437,177,4.437,178,5.597,179,3.137,180,3.137,181,3.137,182,5.149,183,2.672,184,2.136,185,4.437,186,2.136,187,3.137,188,2.365,189,2.136,190,1.671,191,2.672,192,3.137,193,3.779,194,3.137,195,3.022,196,3.137,197,3.137,198,3.137,199,3.137,200,2.672,201,2.672,202,2.672,203,1.206,204,1.557,205,2.365,206,2.364,207,2.672,208,1.282,209,2.743,210,3.137,211,2.136,212,2.364,213,2.136,214,3.137,215,1.206,216,3.137,217,3.137,218,2.556,219,2.743,220,3.137,221,3.022,222,2.136,223,3.137,224,4.437,225,2.672,226,2.365,227,3.137,228,2.365,229,2.672,230,2.764,231,1.365,232,3.779,233,3.137,234,1.802,235,3.137]],["title/injectables/AuthService.html",[124,1.754,236,0.802]],["body/injectables/AuthService.html",[3,1.136,12,0.023,18,0.845,19,0.112,20,0.112,21,0.099,23,0.316,26,1.007,30,1.894,34,2.097,35,0.845,38,1.636,40,1.26,41,1.87,42,1.597,44,1.136,46,1.808,48,2.389,49,1.732,55,1.894,57,0.47,58,0.364,63,0.112,64,0.005,65,0.009,66,0.009,73,1.291,76,0.198,77,0.845,78,3.465,79,2.368,80,3.628,81,1.597,83,1.382,84,3.146,87,2.258,88,0.79,90,1.06,91,1.733,92,1.374,93,0.59,94,1.296,95,2.097,96,1.38,97,1.481,98,1.872,102,3.465,103,2.368,105,2.388,106,2.303,111,0.845,112,2.076,113,2.368,114,3.298,117,2.358,123,0.907,124,2.02,134,1.45,135,0.978,143,1.16,144,1.284,145,1.284,149,0.98,150,2.338,153,1.85,173,2.168,174,2.02,188,1.284,200,1.45,202,1.45,203,1.069,206,3.282,208,1.832,212,0.907,218,1.38,236,0.631,237,0.696,238,1.45,239,3.524,240,2.781,241,1.597,242,2.368,243,2.781,244,1.75,245,1.291,246,2.368,247,1.533,248,1.894,249,3.388,250,3.524,251,2.368,252,2.168,253,1.703,254,2.304,255,3.827,256,5.886,257,1.703,258,3.054,259,2.097,260,4.484,261,3.002,262,3.524,263,3.524,264,1.703,265,1.703,266,2.097,267,3.298,268,2.397,269,2.997,270,2.781,271,1.703,272,4.068,273,1.703,274,2.657,275,2.822,276,1.703,277,1.703,278,2.534,279,4.484,280,1.703,281,3.819,282,2.368,283,2.226,284,2.781,285,1.703,286,2.368,287,2.52,288,1.888,289,2.368,290,4.323,291,1.284,292,1.45,293,1.45,294,2.337,295,1.45,296,1.45,297,2.534,298,0.978,299,2.368,300,3.068,301,1.45,302,2.821,303,1.703,304,2.368,305,2.763,306,2.781,307,2.368,308,2.368,309,3.457,310,2.097,311,2.097,312,2.628,313,2.368,314,2.781,315,1.703,316,1.703,317,2.657,318,2.781,319,2.781,320,2.781,321,2.368,322,1.894,323,1.703,324,1.284,325,1.284,326,1.703,327,1.16,328,0.907,329,2.771,330,2.195,331,1.45,332,1.894,333,4.068,334,1.703,335,1.703,336,1.703,337,1.703,338,1.703,339,1.703,340,1.703,341,1.703,342,1.703,343,1.45,344,1.703,345,1.45,346,1.284,347,1.06,348,2.368,349,1.703,350,2.097,351,2.368,352,1.45,353,1.284,354,1.284,355,1.703,356,1.45,357,1.703,358,2.368]],["title/injectables/BcryptService.html",[236,0.802,359,2.406]],["body/injectables/BcryptService.html",[12,0.023,19,0.226,20,0.226,21,0.2,23,0.31,46,2.334,57,0.442,58,0.739,63,0.226,64,0.017,65,0.015,66,0.015,73,2.202,76,0.401,77,1.442,83,1.462,88,0.738,91,1.62,92,1.284,93,0.551,94,1.212,98,1.921,150,2.244,153,2.084,208,2.215,218,2.356,230,2.151,236,1.325,237,1.412,245,2.202,248,3.232,249,2.888,254,2.065,269,2.151,298,2.725,302,1.84,312,1.715,347,4.107,359,3.975,360,2.942,361,3.578,362,4.042,363,4.971,364,4.745,365,2.528,366,2.528,367,4.745,368,3.975,369,4.042,370,5.616,371,5.698,372,3.454,373,2.897,374,4.745,375,4.745,376,3.352,377,2.955,378,4.042,379,3.232,380,4.042,381,5.836,382,5.383,383,3.454,384,3.578,385,4.087,386,5.836,387,5.421,388,3.113,389,4.971,390,1.84,391,4.745,392,3.454,393,2.604,394,4.745,395,3.454,396,2.942,397,3.454,398,3.454,399,3.454]],["title/modules/CommonModule.html",[0,0.956,170,1.882]],["body/modules/CommonModule.html",[0,1.765,2,2.203,3,1.71,4,2.229,5,2.229,6,1.942,7,2.872,8,3.178,12,0.023,16,2.872,17,2.229,18,2.077,19,0.274,20,0.274,21,0.242,23,0.376,26,2.282,57,0.531,58,0.895,63,0.353,64,0.013,65,0.017,66,0.017,88,0.839,117,2.438,170,3.618,186,2.849,215,2.073,225,4.592,228,4.751,229,3.563,241,3.096,245,2.502,254,3.05,359,4.063,400,3.563,401,3.563,402,4.184,403,4.592,404,4.592,405,4.592,406,4.065,407,3.618,408,3.096,409,5.965,410,4.065,411,3.096,412,4.498,413,5.391,414,4.184,415,4.184,416,4.184,417,3.563,418,4.184,419,4.184]],["title/modules/CoreModule.html",[0,0.956,13,2.201]],["body/modules/CoreModule.html",[0,1.76,2,2.722,3,1.696,4,2.211,5,2.211,6,1.927,7,2.211,8,2.211,12,0.023,13,4.416,16,2.858,17,2.211,18,2.061,19,0.272,20,0.272,21,0.24,23,0.373,24,4.568,26,1.942,27,2.858,44,2.192,49,2.585,56,4.568,57,0.512,58,0.888,63,0.272,64,0.013,65,0.017,66,0.017,73,2.49,170,3.549,209,2.211,211,2.827,228,3.13,247,1.806,420,3.535,421,3.535,422,4.149,423,4.149,424,4.151,425,5.364,426,5.943,427,5.364,428,3.653,429,5.364,430,4.568,431,4.044,432,5.364,433,5.364,434,4.568,435,5.364,436,4.568,437,4.568,438,5.364,439,5.364,440,4.151,441,4.151,442,4.151,443,4.151,444,3.535,445,2.211]],["title/classes/CreateUserDto.html",[64,0.011,446,2.029]],["body/classes/CreateUserDto.html",[12,0.023,19,0.187,20,0.187,21,0.165,23,0.55,40,0.735,46,1.414,57,0.464,63,0.187,64,0.013,65,0.013,66,0.013,76,0.331,83,1.342,85,2.188,87,2.219,88,0.953,92,1.658,93,0.661,94,1.603,97,2.207,111,2.056,112,1.414,117,1.693,142,1.518,149,1.644,212,2.854,287,3.177,288,2.844,328,3.032,446,2.379,447,1.165,448,5.056,449,1.775,450,2.58,451,3.123,452,1.058,453,3.679,454,3.336,455,4.427,456,2.85,457,2.85,458,3.41,459,4.043,460,3.017,461,2.427,462,3.528,463,4.562,464,4.733,465,5.848,466,4.142,467,2.85,468,2.85,469,4.965,470,3.123,471,5.357,472,4.562,473,5.357,474,4.562,475,3.123,476,3.528,477,2.85,478,2.85,479,3.528,480,3.528,481,4.619,482,2.85,483,4.142,484,4.562,485,4.156,486,2.821,487,3.123,488,2.85,489,2.85,490,4.142,491,3.323,492,3.528,493,3.528,494,2.85,495,2.85,496,4.142,497,3.528,498,3.528,499,4.142,500,4.039,501,4.156,502,3.528,503,2.85,504,4.156,505,1.323,506,2.379,507,2.821,508,1.941,509,2.821,510,2.427,511,2.427,512,2.427,513,2.85,514,2.85,515,2.85,516,2.85,517,2.149,518,2.85]],["title/interfaces/CustomRequest.html",[519,1.444,520,2.406]],["body/interfaces/CustomRequest.html",[12,0.023,19,0.251,20,0.251,21,0.222,23,0.344,40,1.279,41,2.356,57,0.414,63,0.333,65,0.016,66,0.016,76,0.445,83,1.355,93,0.664,105,2.525,106,2.335,111,2.525,112,2.305,149,1.376,231,1.666,268,2.556,275,2.361,283,1.901,294,3.878,452,1.555,460,3.024,470,4.308,519,2.821,520,4.146,521,2.384,522,2.887,523,2.887,524,4.333,525,4.333,526,3.3,527,3.558,528,2.361,529,3.836,530,3.465,531,3.836,532,2.525,533,3.742,534,2.607,535,2.887,536,3.261,537,3.261,538,2.887,539,4.333,540,3.168]],["title/interfaces/CustomUser.html",[294,2.029,519,1.444]],["body/interfaces/CustomUser.html",[12,0.023,19,0.247,20,0.247,21,0.218,23,0.338,40,1.274,41,2.442,57,0.41,63,0.33,65,0.016,66,0.016,76,0.438,83,1.416,93,0.658,105,2.813,106,2.472,111,2.813,112,2.326,149,1.365,231,2.19,268,2.668,275,2.63,283,2.498,294,3.803,452,1.447,460,2.926,470,4.273,519,2.784,520,3.428,521,2.346,522,2.841,523,2.841,524,3.208,525,3.208,526,3.003,527,3.134,528,1.749,529,2.841,530,2.566,531,2.841,532,1.87,533,3.803,534,2.566,535,3.795,536,4.286,537,4.286,538,3.795,539,4.827,540,3.134]],["title/modules/DatabaseModule.html",[0,0.956,422,2.201]],["body/modules/DatabaseModule.html",[0,1.814,2,1.737,12,0.023,19,0.279,20,0.279,21,0.246,23,0.382,27,3.202,42,3.128,57,0.49,58,0.909,63,0.279,64,0.013,65,0.017,66,0.017,73,2.528,87,1.972,88,0.847,93,0.633,189,4.093,190,2.265,203,2.094,207,4.639,208,2.226,209,3.377,213,3.709,244,2.704,245,2.528,247,2.917,288,2.528,366,2.902,411,3.128,422,3.947,541,4.251,542,5.447,543,4.639,544,5.398,545,4.107,546,4.639,547,5.447,548,6.01,549,4.639,550,5.447,551,4.639,552,5.447,553,4.639,554,5.447,555,3.709,556,5.447,557,3.709,558,4.107,559,5.447,560,4.107,561,4.251,562,4.251]],["title/interfaces/Device.html",[106,1.444,519,1.444]],["body/interfaces/Device.html",[12,0.023,19,0.291,20,0.291,21,0.257,23,0.398,63,0.291,65,0.017,66,0.017,76,0.516,83,1.489,92,1.916,93,0.65,94,1.731,106,2.91,149,1.348,212,2.982,231,1.931,452,1.43,458,3.215,460,2.989,519,1.814,521,2.764,540,4.376,551,3.78,557,4.385,563,3.78,564,2.764,565,4.438,566,3.78,567,3.78,568,3.78,569,4.438,570,4.767,571,4.767,572,5.598,573,4.176,574,5.598,575,5.598,576,5.598]],["title/modules/EnvModule.html",[0,0.956,423,2.201]],["body/modules/EnvModule.html",[0,1.887,2,2.376,12,0.023,19,0.309,20,0.309,21,0.273,23,0.423,27,2.512,57,0.513,58,1.008,63,0.309,64,0.015,65,0.018,66,0.018,117,2.376,183,4.951,184,3.211,208,2.576,209,2.512,211,3.959,215,2.235,241,2.707,365,3.097,407,2.707,411,2.707,423,3.62,557,3.211,577,4.714,578,4.383,579,4.714,580,4.015,581,4.714,582,3.555,583,4.015,584,4.714,585,3.555,586,4.714,587,4.383,588,4.714,589,4.714,590,2.34,591,4.015,592,2.512,593,4.714]],["title/classes/GenerateTables1725986093329.html",[64,0.011,594,2.664]],["body/classes/GenerateTables1725986093329.html",[12,0.023,19,0.217,20,0.217,21,0.191,40,1.016,41,1.955,57,0.269,63,0.217,64,0.01,65,0.014,66,0.014,76,0.384,77,1.398,83,0.706,87,1.196,88,0.824,91,1.571,92,1.687,93,0.743,94,1.175,96,2.628,98,1.398,105,1.64,106,1.35,128,3.882,203,1.27,230,2.866,249,3.321,268,2.201,275,2.136,287,2.284,288,2.136,302,3.575,322,2.25,327,2.25,328,1.76,388,3.673,390,1.76,393,4.317,428,3.606,447,1.35,452,1.175,486,3.134,487,2.491,528,2.658,543,3.919,594,4.317,595,4.877,596,2.813,597,5.294,598,4.601,599,3.303,600,4.601,601,6.626,602,3.303,603,3.9,604,4.601,605,3.303,606,6.71,607,4.7,608,5.231,609,4.601,610,5.309,611,5.726,612,2.25,613,2.491,614,5.726,615,4.601,616,6.396,617,3.303,618,3.297,619,3.303,620,4.601,621,5.294,622,3.303,623,5.294,624,3.303,625,3.303,626,3.303,627,2.491,628,3.919,629,2.491,630,2.491,631,3.303,632,3.303,633,3.303,634,4.601,635,2.813,636,4.601,637,3.303,638,3.303,639,3.303,640,4.601,641,2.25,642,6.02]],["title/injectables/HashingService.html",[236,0.802,254,1.537]],["body/injectables/HashingService.html",[12,0.023,19,0.234,20,0.234,21,0.207,23,0.321,46,2.396,57,0.291,58,0.765,63,0.234,64,0.019,65,0.015,66,0.015,76,0.415,77,1.477,83,1.508,88,0.921,91,1.659,92,1.315,93,0.565,94,1.241,98,2.02,150,2.122,218,2.412,236,1.103,237,1.462,245,2.256,254,2.577,298,3.401,347,3.688,361,3.664,368,4.033,369,4.139,370,5.662,371,5.44,373,3.301,376,3.401,377,3.027,378,4.139,379,3.31,380,4.139,396,5.44,431,3.664,519,1.986,603,4.642,643,3.046,644,6.978,645,3.31,646,4.859,647,4.859,648,4.859,649,4.859,650,3.576,651,4.465,652,5.044,653,4.139,654,6.387,655,3.576]],["title/classes/IdDto.html",[64,0.011,656,2.406]],["body/classes/IdDto.html",[12,0.023,19,0.287,20,0.287,21,0.254,23,0.498,46,1.896,57,0.452,63,0.287,64,0.02,65,0.017,66,0.017,76,0.509,83,1.485,85,1.685,88,0.682,93,0.645,96,3.283,97,2.335,112,1.896,142,2.335,149,1.468,268,2.639,390,2.335,447,1.791,450,3.459,452,1.418,453,3.305,454,2.73,460,2.83,500,4.188,505,2.034,529,4.188,531,4.188,564,3.459,618,3.459,656,3.782,657,3.733,658,3.459,659,3.459,660,2.959,661,5.554,662,4.366,663,5.554,664,4.383,665,4.383,666,4.188,667,4.73,668,2.73,669,3.733,670,3.733,671,3.305]],["title/injectables/JwtAuthGuard.html",[136,2.201,236,0.802]],["body/injectables/JwtAuthGuard.html",[0,1.212,12,0.023,19,0.208,20,0.208,21,0.184,23,0.402,30,3.532,35,2.224,38,3.154,39,3.697,57,0.459,58,0.68,63,0.208,64,0.02,65,0.014,66,0.014,75,3,76,0.369,77,1.361,88,0.924,91,1.529,92,1.212,93,0.52,94,1.144,98,1.804,128,4.024,136,3.507,148,2.165,149,0.766,150,1.722,153,1.722,186,2.165,206,2.387,208,1.831,226,4.246,231,1.949,234,3.772,236,1.017,237,1.299,244,2.224,245,2.079,252,2.763,312,1.578,332,3.051,353,3.911,373,1.578,388,3.234,406,4.246,407,1.826,410,3.378,445,2.387,497,3.815,526,3.057,532,2.795,533,2.979,590,2.575,645,3.051,672,4.417,673,2.397,674,5.055,675,3.051,676,3.815,677,3.378,678,4.476,679,4.479,680,4.479,681,4.479,682,4.479,683,3.179,684,6.657,685,3.179,686,3.815,687,3.815,688,4.479,689,5.245,690,3.179,691,4.479,692,3.815,693,4.479,694,2.79,695,4.246,696,4.246,697,5.186,698,3.507,699,3.23,700,1.98,701,2.397,702,3.179,703,2.397,704,2.397,705,3.815,706,3.179,707,3.179,708,4.479,709,3.179,710,3.179,711,2.708,712,3.179,713,2.708,714,3.179]],["title/interfaces/JwtPayload.html",[278,2.201,519,1.444]],["body/interfaces/JwtPayload.html",[12,0.022,19,0.315,20,0.315,21,0.279,23,0.432,31,3.276,40,1.129,63,0.315,65,0.018,66,0.018,76,0.559,83,1.479,93,0.559,96,2.922,97,3.135,110,2.233,149,1.418,206,3.135,268,2.718,275,2.732,278,3.665,310,4.438,434,4.097,452,1.503,460,2.233,519,2.405,521,2.996,564,2.996,566,4.097,612,3.276,668,2.996,715,4.097,716,4.097,717,4.097,718,4.097,719,3.627,720,4.81,721,4.097,722,4.81,723,4.097,724,3.627,725,4.81,726,4.81,727,4.81,728,4.81]],["title/injectables/JwtStrategy.html",[171,2.201,236,0.802]],["body/injectables/JwtStrategy.html",[12,0.023,19,0.276,20,0.191,21,0.169,23,0.444,35,2.093,38,1.957,39,2.626,40,1.02,46,1.439,57,0.539,58,0.625,63,0.191,64,0.018,65,0.013,66,0.013,73,1.957,76,0.339,77,1.281,88,0.843,91,1.439,92,1.141,93,0.629,94,1.077,98,1.281,112,2.107,124,3.321,149,1.016,150,2.083,153,1.123,171,3.729,184,1.989,193,4.214,206,3.691,208,2.214,209,3.19,212,2.246,213,2.872,215,1.123,218,2.093,219,2.246,221,3.69,236,0.957,237,1.194,241,3.629,252,3.061,258,1.989,275,1.957,278,3.375,283,2.093,292,2.488,293,2.488,297,2.626,305,2.422,310,4.854,311,4.086,329,2.872,373,2.69,408,2.422,411,1.677,428,1.989,430,3.591,445,2.246,519,1.194,526,3.245,527,2.626,532,2.69,585,2.202,590,1.45,592,3.061,660,2.246,675,3.69,686,2.488,687,2.488,698,2.626,700,1.819,703,2.202,729,2.488,730,5.418,731,4.216,732,4.216,733,4.216,734,3.591,735,2.921,736,5.418,737,2.921,738,4.948,739,4.615,740,4.216,741,4.216,742,2.921,743,4.948,744,3.591,745,2.626,746,3.591,747,4.216,748,3.179,749,3.179,750,2.488,751,2.488,752,2.921,753,2.921,754,2.921,755,2.921,756,3.179,757,2.921,758,2.921,759,2.921,760,2.202,761,2.921,762,2.488,763,2.921,764,2.921,765,2.921,766,2.202,767,2.921,768,2.921,769,2.921,770,2.202,771,2.488,772,2.921,773,2.921]],["title/injectables/LocalAuthGuard.html",[139,2.406,236,0.802]],["body/injectables/LocalAuthGuard.html",[12,0.023,19,0.305,20,0.305,21,0.269,23,0.418,33,4.347,35,2.862,38,3.04,57,0.47,58,0.995,63,0.305,64,0.019,65,0.018,66,0.018,75,3.072,139,4.46,221,4.46,222,4.672,226,4.347,236,1.309,237,1.901,458,3.311,532,3.251,673,3.508,674,5.336,676,4.91,677,4.347,700,3.902,774,3.962,775,4.347,776,3.591,777,5.765,778,5.765,779,4.347,780,4.91,781,5.765,782,5.765]],["title/injectables/LocalStrategy.html",[172,2.201,236,0.802]],["body/injectables/LocalStrategy.html",[12,0.023,19,0.226,20,0.226,21,0.2,23,0.31,26,1.717,31,3.228,38,2.2,40,1.17,54,3.574,57,0.475,58,0.737,63,0.226,64,0.019,65,0.015,66,0.015,76,0.401,77,1.772,83,1.351,87,2.422,88,0.737,91,1.618,92,1.283,93,0.551,94,1.211,98,1.44,112,1.991,124,3.32,148,2.349,149,0.831,150,2.082,153,2.082,172,3.632,221,4.164,222,3.689,236,1.076,237,1.409,244,2.353,245,2.2,251,4.037,252,3.257,286,4.967,287,3.32,288,2.2,305,2.722,309,3.228,366,2.525,373,2.895,403,4.037,407,2.722,408,2.722,411,2.722,454,2.952,532,2.895,592,3.107,603,3.228,651,3.574,660,2.525,675,4.407,694,2.952,698,2.952,700,2.148,703,4.084,704,3.574,734,4.037,748,3.574,750,5.207,751,2.937,770,3.574,776,2.952,783,2.937,784,4.74,785,4.037,786,3.448,787,3.448,788,3.574,789,4.74,790,3.448,791,4.74,792,4.74,793,4.74,794,3.448,795,3.448]],["title/classes/LoginUserDto.html",[64,0.011,796,2.406]],["body/classes/LoginUserDto.html",[12,0.023,19,0.321,20,0.321,21,0.284,57,0.485,63,0.321,64,0.018,65,0.018,66,0.018,76,0.569,83,1.426,85,2.288,87,2.321,88,0.926,93,0.691,149,1.673,287,3.182,447,2.002,449,3.051,452,1.52,505,2.274,506,3.681,507,3.337,508,3.337,666,4.487,796,4.053,797,5.459,798,4.899,799,4.173,800,4.173,801,5.951]],["title/injectables/LoginValidationMiddleware.html",[195,2.406,236,0.802]],["body/injectables/LoginValidationMiddleware.html",[12,0.023,19,0.233,20,0.233,21,0.206,23,0.434,40,0.859,46,1.651,57,0.503,58,0.76,63,0.233,64,0.02,65,0.015,66,0.015,76,0.413,77,1.47,80,3.647,88,0.856,91,1.213,92,0.962,93,0.413,94,0.907,98,1.47,117,1.452,118,2.679,135,2.04,150,2.115,195,3.295,208,1.452,215,1.86,219,2.577,230,2.212,232,5.262,234,2.04,236,1.098,237,1.452,241,3.661,249,2.93,302,1.893,305,3.159,309,4.022,312,2.401,330,3.426,358,5.03,407,2.778,408,2.04,452,1.235,505,2.245,526,3.341,527,4.062,538,4.147,590,2.932,592,2.577,659,3.013,660,2.577,669,3.026,696,2.679,711,3.026,744,4.12,745,3.013,748,4.147,796,3.295,802,4.12,803,3.026,804,4.837,805,4.806,806,6.807,807,5.905,808,3.552,809,3.295,810,3.013,811,5.905,812,5.905,813,4.837,814,3.552,815,3.552,816,3.026,817,3.552,818,4.837,819,3.552,820,3.552,821,4.12,822,4.12,823,3.552,824,3.552,825,3.552,826,3.552]],["title/classes/RegisterUserDto.html",[64,0.011,114,2.201]],["body/classes/RegisterUserDto.html",[12,0.023,19,0.306,20,0.306,21,0.271,57,0.511,63,0.306,64,0.018,65,0.018,66,0.018,76,0.543,83,1.468,85,2.413,87,2.273,88,0.977,93,0.729,114,3.6,149,1.707,287,3.116,288,2.914,447,1.91,449,2.91,452,1.476,502,5.346,505,2.169,506,3.605,507,3.937,508,3.182,509,4.275,510,3.98,799,3.98,800,3.98,827,5.586,828,4.673]],["title/classes/RegistryDates.html",[64,0.011,829,2.201]],["body/classes/RegistryDates.html",[12,0.023,19,0.243,20,0.243,21,0.214,23,0.332,57,0.302,63,0.243,64,0.019,65,0.015,66,0.015,76,0.43,85,2.409,88,0.874,93,0.653,110,3.301,203,2.534,231,2.164,247,2.613,248,3.387,325,3.75,353,3.75,431,3.75,444,4.236,447,1.513,452,1.27,627,4.235,629,4.235,630,4.235,641,3.387,678,3.75,723,4.236,766,3.75,788,4.865,829,3.098,830,5.115,831,3.152,832,4.236,833,4.802,834,5.707,835,5.115,836,5.115,837,4.236,838,5.617,839,3.701,840,5.495,841,3.387,842,6.006,843,4.974,844,5.617,845,3.701,846,3.74,847,5.115,848,4.236,849,4.974,850,5.617,851,3.701,852,4.974,853,4.528,854,4.974]],["title/classes/RemoveDto.html",[64,0.011,855,2.406]],["body/classes/RemoveDto.html",[12,0.023,19,0.288,20,0.288,21,0.254,23,0.499,33,4.193,46,1.898,57,0.497,63,0.288,64,0.02,65,0.017,66,0.017,76,0.51,85,1.689,88,0.683,93,0.769,94,1.69,112,1.898,142,2.34,149,1.47,215,2.466,244,2.18,376,3.883,390,2.34,447,1.795,450,3.463,452,1.42,460,3.187,461,3.74,501,4.736,504,4.736,505,2.038,526,2.18,592,2.34,659,3.463,670,3.74,671,3.311,846,4.368,848,4.736,855,3.787,856,3.74,857,4.392,858,4.392,859,4.193,860,4.392,861,4.392,862,3.74]],["title/entities/Session.html",[41,1.206,110,1.64]],["body/entities/Session.html",[12,0.023,19,0.23,20,0.23,21,0.203,23,0.315,26,1.738,40,1.242,41,2.413,57,0.445,63,0.23,64,0.011,65,0.015,66,0.015,76,0.408,83,1.358,85,2.442,88,0.988,93,0.755,96,2.382,105,3.055,106,2.705,110,2.728,111,2.382,112,1.638,123,1.871,143,2.391,203,1.35,204,1.743,206,2.557,215,1.845,247,2.088,268,2.102,274,3.619,275,2.856,283,2.382,308,4.087,313,4.087,452,1.226,564,2.989,590,2.382,612,4.002,613,4.123,618,3.832,668,2.989,699,2.989,721,4.087,833,4.002,840,4.087,863,2.991,864,4.657,865,2.991,866,3.511,867,4.799,868,5.538,869,3.511,870,4.799,871,4.087,872,3.511,873,4.431,874,3.511,875,3.511,876,4.087,877,3.511,878,4.799,879,2.991,880,3.511,881,4.799,882,2.991]],["title/controllers/SessionsController.html",[67,1.754,883,2.406]],["body/controllers/SessionsController.html",[12,0.022,19,0.308,20,0.308,21,0.272,23,0.421,41,1.979,42,3.329,43,4.371,44,2.369,48,3.595,57,0.382,58,1.004,63,0.308,64,0.02,65,0.018,66,0.018,67,3.35,69,2.33,71,3.196,73,2.691,74,4.371,75,3.088,77,1.762,212,3.088,215,2.229,234,3.329,245,2.691,365,3.088,377,3.61,530,3.948,745,3.61,810,3.61,883,3.948,884,3.997,885,4.937,886,5.797,887,5.797,888,4.371,889,4.937,890,4.371,891,4.693]],["title/modules/SessionsModule.html",[0,0.956,14,2.201]],["body/modules/SessionsModule.html",[0,1.798,2,1.817,3,1.817,4,2.369,5,2.369,6,2.064,7,3.27,8,2.369,12,0.023,14,4.224,16,2.986,17,2.369,18,2.208,19,0.292,20,0.292,21,0.258,23,0.399,27,2.369,40,0.789,41,1.914,44,1.817,47,4.774,48,2.369,57,0.553,58,0.951,63,0.292,64,0.014,65,0.017,66,0.017,69,2.783,81,3.219,123,2.369,173,3.613,189,3.029,190,2.369,203,1.71,204,2.208,205,3.353,208,2.291,215,2.155,219,2.369,255,3.353,259,3.353,365,2.986,580,3.788,745,2.77,810,2.77,883,4.18,885,3.788,892,4.447,893,4.447,894,4.447,895,4.447,896,4.447,897,4.447,898,3.788,899,4.447,900,3.353]],["title/injectables/SessionsService.html",[173,1.882,236,0.802]],["body/injectables/SessionsService.html",[12,0.023,19,0.164,20,0.164,21,0.144,23,0.337,26,1.359,40,1.193,41,2.399,43,2.83,44,2.052,45,2.883,48,3.292,57,0.478,58,0.533,63,0.164,64,0.014,65,0.012,66,0.012,76,0.29,77,1.141,83,1.427,88,0.781,91,1.714,92,1.359,93,0.583,94,1.282,95,4.265,98,1.835,105,2.808,106,2.573,111,1.238,112,1.281,117,2.312,123,1.329,143,1.699,149,1.087,150,2.42,153,1.443,173,2,190,1.329,191,2.125,203,0.959,204,2.492,218,1.863,236,1.14,237,1.019,244,1.238,247,1.963,249,3.292,252,2,255,2.83,268,2.376,269,1.554,275,3.07,281,3.197,282,3.197,283,1.238,294,2.883,295,2.125,296,2.125,297,2.811,300,3.403,301,2.125,302,2.404,312,1.863,317,1.881,324,2.83,330,2.338,332,1.699,354,1.881,361,1.881,366,2,379,1.699,384,2.83,385,2.83,405,3.197,408,2.592,445,2,451,2.83,458,1.433,528,1.742,533,1.433,545,2.83,592,2,603,2.556,608,1.881,613,2.83,628,3.197,652,2.125,660,2,668,1.554,678,2.83,694,2.338,780,3.197,833,3.419,841,1.699,864,3.197,901,2.125,902,3.197,903,2.125,904,5.263,905,5.02,906,5.446,907,4.276,908,2.494,909,3.197,910,3.753,911,2.494,912,2.494,913,2.494,914,3.753,915,3.753,916,2.494,917,2.125,918,2.494,919,2.125,920,2.125,921,4.513,922,2.494,923,2.494,924,2.494,925,2.494,926,2.494,927,2.494,928,3.753,929,2.494,930,2.494,931,2.494,932,3.753,933,2.494,934,2.494,935,2.494,936,2.494,937,2.494,938,2.494,939,2.125,940,2.494,941,2.494]],["title/classes/UpdateUserDto.html",[64,0.011,942,2.201]],["body/classes/UpdateUserDto.html",[12,0.023,19,0.269,20,0.269,21,0.238,23,0.478,35,2.646,40,1.179,46,2.137,57,0.482,63,0.269,64,0.021,65,0.017,66,0.017,76,0.478,83,1.387,85,1.58,88,0.64,93,0.619,96,2.646,109,4.019,112,1.82,135,2.361,142,2.19,149,1.425,268,2.6,446,3.397,447,1.68,449,2.56,450,3.32,452,1.361,453,3.099,454,3.32,455,3.63,459,3.63,460,2.474,500,4.019,505,1.908,528,1.908,532,3.107,659,3.32,660,2.84,666,4.019,667,4.54,717,4.54,853,4.46,942,3.898,943,4.54,944,5.33,945,5.33,946,4.54,947,4.019,948,5.33,949,6.258,950,4.111,951,4.111,952,4.111,953,4.111,954,4.111,955,4.111,956,4.111,957,4.111]],["title/entities/User.html",[40,0.627,110,1.64]],["body/entities/User.html",[12,0.023,19,0.18,20,0.18,21,0.159,23,0.247,40,1.212,41,2.121,48,2.804,57,0.457,63,0.18,64,0.015,65,0.013,66,0.013,71,2.746,76,0.319,83,1.378,85,2.437,87,2.03,88,0.986,92,1.517,93,0.759,94,1.03,98,0.835,110,2.72,153,1.056,203,1.056,204,1.364,215,1.55,267,3.278,268,1.837,274,3.04,287,2.783,288,2.602,327,3.818,328,2.987,366,1.463,377,1.711,388,3.568,452,1.03,463,3.434,464,3.969,469,4.227,481,4.227,486,2.746,491,4.231,511,3.434,512,2.339,534,1.871,573,3.254,590,3.007,618,3.869,627,3.04,629,3.04,630,2.071,658,2.511,662,2.746,694,1.711,699,3.65,724,2.071,829,3.772,832,3.434,833,1.871,836,2.339,837,3.434,846,1.711,847,3.434,865,3.434,868,5.291,871,3.434,873,3.04,876,3.434,879,3.434,882,2.339,958,2.339,959,3.04,960,2.747,961,2.747,962,2.747,963,4.032,964,4.069,965,2.747,966,5.263,967,2.747,968,2.747,969,4.032,970,2.747,971,2.747,972,4.032,973,4.032,974,4.032,975,4.775,976,2.747,977,4.483,978,2.747,979,4.032,980,4.032,981,2.747,982,3.434,983,4.032,984,4.032,985,2.747,986,2.747,987,2.747,988,2.747,989,2.747,990,4.032,991,2.747,992,2.747,993,2.747,994,2.339,995,2.747,996,2.071,997,2.747,998,2.747,999,2.339,1000,2.747,1001,2.747,1002,2.747]],["title/classes/UserChangePasswordDto.html",[64,0.011,84,2.029]],["body/classes/UserChangePasswordDto.html",[12,0.022,19,0.325,20,0.325,21,0.287,57,0.404,63,0.325,64,0.015,65,0.019,66,0.019,76,0.576,83,1.431,84,3.442,85,2.304,88,0.933,90,4.012,93,0.696,149,1.678,447,2.026,452,1.531,506,3.936,507,3.376,508,3.376,1003,5.487,1004,4.222,1005,5.487,1006,5.487,1007,4.957,1008,4.957]],["title/controllers/UsersController.html",[67,1.754,1009,2.406]],["body/controllers/UsersController.html",[12,0.023,19,0.141,20,0.141,21,0.125,23,0.616,26,1.215,40,1.238,46,2.067,57,0.454,58,0.461,63,0.141,64,0.007,65,0.01,66,0.01,67,2.046,69,1.07,71,1.467,76,0.25,77,1.02,81,1.927,83,1.142,85,1.938,88,0.784,91,1.721,92,1.56,93,0.728,94,1.188,96,2.046,97,2.844,98,1.84,112,1.145,117,1.901,118,2.53,121,2.858,135,1.927,141,1.835,142,1.148,148,1.467,149,0.519,150,2.47,153,1.938,174,2.502,218,2.502,234,1.927,267,2.09,268,2.602,283,1.666,300,2.53,322,4.123,328,2.685,354,3.107,373,2.502,376,1.927,446,3.201,459,3.926,526,2.046,528,2.34,553,2.858,573,1.467,590,2.65,641,4.123,656,4.123,699,2.09,719,4.565,749,1.625,756,3.507,760,3.107,770,3.801,776,3.901,805,2.53,835,1.835,841,2.285,846,3.471,855,3.168,898,2.858,942,3.688,946,2.858,996,3.107,1009,2.285,1010,1.835,1011,3.355,1012,3.355,1013,3.355,1014,2.53,1015,3.961,1016,2.858,1017,1.835,1018,2.155,1019,2.155,1020,4.651,1021,6.054,1022,2.155,1023,6.054,1024,2.155,1025,4.651,1026,3.355,1027,5.764,1028,4.651,1029,2.155,1030,2.155,1031,2.155,1032,3.355,1033,3.355,1034,2.155,1035,2.155,1036,2.155,1037,2.155,1038,3.961,1039,2.155,1040,2.155,1041,2.155,1042,3.355,1043,2.155,1044,2.155,1045,2.155,1046,1.835,1047,1.835,1048,1.835,1049,5.338,1050,4.651,1051,3.355,1052,5.338,1053,2.155,1054,2.155,1055,2.155,1056,2.155,1057,2.155,1058,2.155,1059,2.155,1060,2.155,1061,2.155,1062,2.155,1063,1.835,1064,2.155,1065,2.155,1066,2.155,1067,2.155,1068,2.155,1069,2.155,1070,2.155,1071,2.155,1072,2.155]],["title/modules/UsersModule.html",[0,0.956,15,2.201]],["body/modules/UsersModule.html",[0,1.733,2,2.167,3,1.354,4,1.765,5,1.765,6,1.538,7,2.825,8,1.765,12,0.023,15,4.182,16,2.457,17,1.765,18,1.645,19,0.217,20,0.217,21,0.192,23,0.297,26,2.076,27,3.055,30,3.905,31,3.14,39,2.872,40,1.224,41,2.13,42,3.584,44,2.744,45,3.293,49,3.571,55,3.14,57,0.532,58,0.709,63,0.217,64,0.01,65,0.014,66,0.014,69,2.289,73,2.14,74,3.477,75,2.457,87,2.076,170,3.478,174,3.241,189,3.612,190,1.765,201,2.822,204,2.289,205,2.498,219,2.457,231,2.006,247,2.495,254,2.006,261,4.883,266,3.477,298,2.648,368,3.14,436,3.927,534,2.257,585,3.477,645,3.14,658,2.872,775,3.477,776,3.571,785,3.927,805,3.477,810,2.872,890,3.477,902,3.927,909,3.927,1009,4.105,1048,2.822,1073,3.314,1074,3.314,1075,3.314,1076,3.314,1077,4.611,1078,4.611,1079,3.927,1080,3.927,1081,4.611,1082,3.905,1083,3.927,1084,3.927,1085,3.927,1086,4.611,1087,4.611,1088,4.611,1089,4.611,1090,4.611,1091,4.611,1092,2.822,1093,3.314,1094,3.314]],["title/injectables/UsersService.html",[174,1.754,236,0.802]],["body/injectables/UsersService.html",[12,0.023,19,0.125,20,0.125,21,0.11,23,0.273,35,1.511,40,1.262,44,1.554,45,3.053,46,0.65,57,0.45,58,0.407,63,0.125,64,0.017,65,0.009,66,0.009,76,0.221,77,0.925,83,1.298,84,2.727,87,2.372,88,0.859,90,1.186,91,1.815,92,1.541,93,0.618,94,1.358,98,1.615,117,2.173,135,1.748,144,1.436,145,1.436,149,0.733,150,1.67,153,2.245,174,1.511,190,1.015,203,0.732,204,1.511,208,2.437,236,0.691,237,0.778,244,0.946,246,2.593,247,2.541,249,3.536,252,2.314,254,2.642,258,1.297,259,2.295,267,2.368,268,2.552,269,3.154,287,1.511,288,1.413,289,1.622,290,2.593,291,1.436,297,1.896,298,2.184,299,2.593,302,3.285,304,2.593,305,3.053,309,3.878,312,2.639,317,1.436,322,2.073,324,2.867,327,2.073,328,1.622,329,1.297,330,2.368,331,3.239,345,1.622,346,1.436,347,1.186,348,2.593,350,1.436,351,1.622,352,1.622,365,1.622,366,1.622,368,2.073,373,2.156,376,2.184,388,1.094,390,1.015,408,2.908,445,2.026,446,2.908,451,2.295,528,2.204,533,2.184,545,2.295,555,1.297,573,1.297,607,2.295,641,3.621,645,2.073,698,2.368,719,4.164,776,2.705,829,1.896,846,2.705,900,2.295,906,4.973,907,4.045,917,1.622,919,3.239,939,2.593,942,3.439,947,2.295,964,4.528,996,2.295,1005,3.239,1006,3.239,1015,3.7,1016,3.239,1017,2.593,1038,2.593,1046,1.622,1047,1.622,1063,5.079,1080,2.593,1092,1.622,1095,1.622,1096,2.593,1097,3.044,1098,3.044,1099,3.803,1100,1.905,1101,1.905,1102,3.044,1103,3.044,1104,3.044,1105,3.044,1106,1.905,1107,1.905,1108,1.905,1109,5.316,1110,4.344,1111,4.344,1112,1.905,1113,3.044,1114,1.905,1115,3.044,1116,1.905,1117,3.044,1118,1.905,1119,1.905,1120,1.905,1121,1.905,1122,3.044,1123,3.044,1124,1.905,1125,3.803,1126,3.803,1127,1.905,1128,1.905,1129,1.905,1130,1.622,1131,1.905,1132,1.905,1133,1.905,1134,1.905]],["title/classes/UsersSubscriber.html",[64,0.011,1082,2.406]],["body/classes/UsersSubscriber.html",[12,0.023,19,0.207,20,0.368,21,0.183,23,0.284,40,1.223,45,1.815,46,1.765,57,0.421,63,0.207,64,0.016,65,0.014,66,0.014,76,0.367,77,1.355,81,1.815,87,1.872,88,0.874,91,1.765,92,1.399,93,0.652,94,1.32,98,1.707,110,3.25,123,1.684,149,1.074,150,2.159,153,1.215,203,1.215,218,2.214,219,2.992,230,2.778,231,1.375,247,2.748,249,3.275,252,2.992,254,2.854,258,3.038,267,2.778,291,2.383,297,2.778,298,2.969,302,2.376,312,2.566,347,2.778,350,3.363,365,2.376,373,3.051,447,1.292,458,2.562,582,3.363,779,4.634,853,3.363,890,4.234,903,2.692,904,5.494,947,2.383,1082,3.038,1083,3.799,1085,4.783,1135,2.692,1136,4.461,1137,5.922,1138,5.169,1139,4.461,1140,4.461,1141,5.616,1142,3.16,1143,4.461,1144,5.616,1145,3.16,1146,4.461,1147,6.451,1148,4.461,1149,5.616,1150,3.16,1151,3.16,1152,4.461,1153,4.461,1154,3.16,1155,4.461,1156,3.16,1157,4.461,1158,3.16,1159,3.16]],["title/coverage.html",[1160,3.634]],["body/coverage.html",[6,1.406,12,0.023,21,0.175,40,0.768,41,1.034,64,0.02,65,0.013,66,0.013,67,2.507,68,2.063,70,2.58,84,1.74,90,1.887,93,0.352,106,1.238,110,2.009,114,1.887,117,1.238,124,1.504,126,2.284,128,1.887,130,2.284,136,1.887,139,2.063,171,1.887,172,1.887,173,1.614,174,1.504,195,2.063,209,1.614,236,1.496,238,2.58,254,1.318,278,1.887,294,1.74,359,2.063,360,2.58,393,2.284,412,2.284,446,1.74,448,2.58,449,3.432,506,2.486,509,2.948,519,2.252,520,2.063,522,3.264,523,3.264,563,2.58,578,2.284,594,2.284,595,2.58,596,2.58,607,2.284,643,2.58,656,2.063,657,2.58,662,2.063,672,2.58,673,3.264,701,2.284,715,2.58,716,2.58,729,2.58,774,2.58,783,2.58,796,2.063,797,2.58,802,2.58,803,2.58,809,2.063,827,2.58,829,1.887,830,2.58,831,2.58,855,2.063,856,2.58,859,2.284,863,2.58,883,2.063,884,2.58,901,2.58,942,1.887,943,2.58,958,2.58,1003,2.58,1004,2.58,1009,2.063,1010,2.58,1014,2.284,1082,2.063,1095,2.58,1135,2.58,1160,2.284,1161,3.029,1162,2.58,1163,7.023,1164,7.328,1165,7.132,1166,4.328,1167,3.029,1168,2.58,1169,3.687,1170,2.58,1171,2.58,1172,2.58,1173,4.693,1174,4.328,1175,4.328,1176,6.24,1177,6.061,1178,3.687,1179,4.301,1180,3.687,1181,5.532,1182,4.693,1183,2.58,1184,2.58,1185,4.693,1186,2.58,1187,2.58,1188,3.029,1189,2.58,1190,2.58,1191,2.58,1192,3.029,1193,3.029,1194,4.328,1195,3.029,1196,3.029]],["title/dependencies.html",[3,1.736,1197,2.514]],["body/dependencies.html",[3,1.922,12,0.023,58,1.006,64,0.018,65,0.018,66,0.018,142,2.506,184,3.204,186,3.204,188,3.547,190,2.506,203,1.808,206,3.093,222,3.204,363,4.006,505,2.183,527,2.93,675,4.288,695,3.547,700,2.93,816,4.006,1198,4.704,1199,4.704,1200,6.296,1201,4.704,1202,4.704,1203,4.704,1204,4.006,1205,4.704,1206,4.704,1207,4.704,1208,4.704,1209,4.704,1210,4.704,1211,5.805,1212,4.704,1213,5.805,1214,4.704,1215,4.704,1216,4.704,1217,4.006,1218,4.704,1219,4.704,1220,4.704,1221,4.704,1222,4.704,1223,4.704,1224,4.704,1225,4.704,1226,4.704,1227,4.704]],["title/miscellaneous/enumerations.html",[1228,1.695,1229,3.619]],["body/miscellaneous/enumerations.html",[12,0.022,26,2.227,40,1.265,65,0.017,66,0.017,76,0.519,215,1.717,231,1.943,248,3.042,328,2.379,356,3.804,390,3.617,445,3.544,462,3.804,479,4.786,481,4.238,485,5.238,486,4.188,487,4.637,491,3.042,528,2.073,555,3.042,564,4.229,658,2.781,771,3.804,959,4.637,975,4.786,1228,2.565,1229,3.804,1230,4.786,1231,5.62,1232,5.62,1233,5.62,1234,4.466,1235,6.454,1236,4.466,1237,4.466,1238,4.466,1239,4.637,1240,4.466,1241,4.466,1242,3.804,1243,4.466,1244,4.466,1245,4.466,1246,4.466,1247,4.466,1248,4.466,1249,4.466,1250,4.466,1251,4.466,1252,4.466,1253,4.466,1254,4.466,1255,4.466,1256,4.466]],["title/miscellaneous/functions.html",[1228,1.695,1257,3.619]],["body/miscellaneous/functions.html",[6,3.216,12,0.02,26,1.996,65,0.02,66,0.02,76,0.64,809,4.346,1191,4.694,1228,3.165,1257,4.694,1258,5.511,1259,5.511,1260,5.511,1261,5.511]],["title/index.html",[76,0.343,1262,2.952,1263,2.952]],["body/index.html",[12,0.023,36,4.232,65,0.019,66,0.019,455,4.392,517,4.526,558,3.746,560,3.746,888,3.746,1160,3.746,1239,3.746,1264,4.968,1265,7.049,1266,4.968,1267,5.935,1268,4.968,1269,6.002,1270,4.968,1271,4.968,1272,4.968,1273,5.112,1274,4.968,1275,4.968,1276,4.968,1277,4.968,1278,4.968,1279,4.232,1280,4.232,1281,4.968,1282,4.968,1283,4.232]],["title/modules.html",[2,1.97]],["body/modules.html",[1,3.533,2,2.12,11,3.231,12,0.019,13,3.231,14,3.231,15,3.231,65,0.019,66,0.019,170,2.764,343,5.994,422,3.231,423,3.231,1284,7.038,1285,7.038,1286,7.165,1287,6.159,1288,6.159]],["title/overview.html",[1289,4.105]],["body/overview.html",[0,1.151,1,4.787,2,1.737,3,1.737,4,2.265,5,2.265,6,1.973,7,2.265,8,2.265,9,3.62,10,3.62,11,4.486,12,0.023,13,4.342,14,4.081,15,4.245,16,2.902,17,2.265,18,2.11,65,0.017,66,0.017,69,2.11,124,2.984,167,3.62,168,3.62,169,3.62,170,3.572,171,3.743,172,3.743,173,3.377,174,3.146,204,2.11,237,1.737,254,2.758,389,4.639,400,3.62,401,3.62,420,3.62,421,3.62,422,3.743,423,3.743,447,1.737,475,3.205,493,3.62,521,2.647,1289,3.62,1290,3.62,1291,3.62]],["title/properties.html",[452,1.085,1197,2.514]],["body/properties.html",[12,0.022,23,0.497,65,0.02,66,0.02,452,1.415,540,3.45,1239,4.177,1279,4.718,1280,4.718,1283,4.718,1292,5.54,1293,5.54]],["title/miscellaneous/variables.html",[587,3.204,1228,1.695]],["body/miscellaneous/variables.html",[3,0.483,12,0.023,26,0.979,29,2.745,35,1.979,38,0.549,39,1.684,40,1.08,44,0.483,45,0.679,46,1.616,54,0.892,55,0.806,64,0.01,65,0.006,66,0.008,67,1.343,69,0.587,75,0.63,76,0.137,77,0.822,83,1.323,87,1.444,88,0.501,92,1.414,93,0.571,94,0.523,97,1.09,98,0.622,105,2.35,106,2.35,109,0.892,111,2.245,112,1.902,117,0.483,126,2.039,128,2.483,130,2.43,153,2.178,208,1.747,209,2.124,211,2.195,212,1.09,213,0.806,215,0.455,219,0.63,231,0.515,234,1.553,241,3.461,242,1.007,244,0.587,245,1.496,247,1.734,266,3.57,269,2.007,275,0.549,283,1.016,288,1.69,305,1.851,307,1.007,311,0.892,312,1.979,321,1.007,325,0.892,329,0.806,330,0.737,332,0.806,346,0.892,362,1.007,365,3.018,366,1.441,376,2.825,377,0.737,379,1.394,382,4.189,384,1.543,385,2.43,388,3.552,390,3.546,404,1.743,406,1.543,407,0.679,410,3.939,411,1.175,412,1.543,417,1.007,428,2.715,437,1.743,445,1.441,450,0.737,452,1.018,454,2.007,455,1.394,458,0.679,459,3.224,460,1.69,464,0.892,465,1.743,469,1.543,472,1.743,474,1.743,475,0.892,476,1.007,480,1.007,484,2.303,491,1.394,492,1.007,498,1.007,505,1.85,506,2.289,509,2.48,517,2.039,526,2.854,528,1.255,530,1.394,532,0.587,533,0.679,535,0.892,540,3.063,544,1.743,546,1.007,549,1.743,555,0.806,557,1.394,558,0.892,560,2.039,567,1.743,568,1.007,570,1.007,571,2.745,578,1.543,582,0.892,583,1.007,587,1.543,590,2.594,591,1.743,592,1.441,608,1.543,610,2.303,612,0.806,618,0.737,635,1.007,651,0.892,653,1.007,658,0.737,659,2.483,660,1.441,662,0.806,668,0.737,671,0.892,677,0.892,689,2.745,692,1.007,694,0.737,695,0.892,696,0.892,698,0.737,699,2.268,701,2.039,704,3.006,705,1.007,713,1.743,718,1.007,724,2.039,739,1.007,745,2.268,746,1.007,749,0.892,756,1.543,760,2.43,762,3.101,766,1.543,775,0.892,779,0.892,788,2.039,809,3.46,810,0.737,821,1.743,822,1.743,834,2.303,841,0.806,859,2.43,862,1.007,873,0.892,888,1.543,889,1.007,900,0.892,920,1.007,959,1.543,977,1.007,982,2.745,994,1.007,999,1.007,1014,1.543,1079,2.303,1084,1.007,1096,1.007,1130,1.007,1162,1.743,1168,1.007,1169,1.007,1170,1.007,1171,1.743,1172,1.007,1173,2.745,1178,1.007,1179,3.101,1180,3.851,1181,2.303,1182,3.101,1183,2.303,1184,2.303,1185,3.101,1186,2.303,1187,2.303,1189,1.007,1190,1.007,1204,2.745,1217,1.007,1228,0.679,1230,1.007,1242,1.743,1267,1.007,1273,2.303,1290,1.743,1291,1.007,1294,1.183,1295,1.183,1296,4.734,1297,2.046,1298,2.046,1299,1.183,1300,1.183,1301,1.183,1302,1.183,1303,2.046,1304,1.183,1305,1.183,1306,1.183,1307,1.183,1308,1.183,1309,1.183,1310,2.046,1311,1.183,1312,2.704,1313,3.222,1314,2.046,1315,2.046,1316,2.046,1317,2.046,1318,3.222,1319,1.183,1320,1.183,1321,1.183,1322,2.046,1323,1.183,1324,1.183,1325,1.183,1326,1.183,1327,1.183,1328,1.183,1329,3.222,1330,1.183,1331,1.183,1332,1.183,1333,2.704,1334,2.704,1335,2.046,1336,1.183,1337,1.183,1338,1.183,1339,1.183,1340,1.183,1341,1.183,1342,1.183,1343,2.046,1344,1.183,1345,1.183,1346,1.183,1347,1.183,1348,1.183,1349,1.183,1350,1.183,1351,1.183,1352,2.046,1353,2.046,1354,1.183,1355,1.183,1356,4.276,1357,1.183,1358,1.183,1359,1.183,1360,1.183,1361,1.183,1362,1.183,1363,1.183,1364,1.183,1365,1.183,1366,1.183,1367,1.183,1368,1.183,1369,1.183,1370,3.641,1371,2.704,1372,2.704,1373,1.183,1374,2.704,1375,1.183,1376,1.183,1377,2.046,1378,3.222,1379,2.046,1380,1.183,1381,1.183,1382,1.183,1383,3.222,1384,1.183,1385,1.183,1386,1.183,1387,1.183,1388,1.183,1389,1.183,1390,2.704,1391,1.183,1392,2.704,1393,1.183,1394,1.183,1395,1.183,1396,1.183,1397,1.183,1398,1.183,1399,1.183,1400,1.183,1401,2.046,1402,2.046,1403,2.704,1404,4.734,1405,2.046,1406,2.046,1407,3.222,1408,1.183,1409,2.704,1410,1.183,1411,2.046,1412,2.046,1413,2.046,1414,3.222,1415,1.183,1416,1.183,1417,1.183,1418,1.183,1419,1.183,1420,1.183,1421,1.183,1422,2.046,1423,2.046,1424,1.183,1425,1.183,1426,1.183,1427,1.183,1428,1.183,1429,1.183,1430,1.183,1431,1.183,1432,1.183,1433,1.183,1434,1.183,1435,1.183,1436,1.183,1437,1.183,1438,2.704,1439,1.183,1440,1.183,1441,1.183,1442,1.183,1443,1.183,1444,3.641,1445,1.183,1446,2.704,1447,2.046,1448,4.276,1449,1.183,1450,2.046,1451,1.183,1452,2.704,1453,2.704,1454,1.183,1455,1.183,1456,1.183,1457,1.183,1458,3.641,1459,1.183,1460,1.183,1461,1.183,1462,1.183,1463,2.046,1464,2.046,1465,1.183,1466,1.183,1467,1.183,1468,1.183,1469,1.183,1470,1.183,1471,1.183,1472,1.183,1473,1.183,1474,1.183,1475,1.183,1476,5.224,1477,1.183,1478,2.046,1479,3.641,1480,2.046,1481,3.222,1482,3.641,1483,2.046,1484,3.222,1485,1.183,1486,2.046,1487,1.183,1488,2.046,1489,2.046,1490,2.046,1491,1.183,1492,1.183,1493,2.704,1494,2.046,1495,1.183,1496,3.641,1497,1.183,1498,1.183,1499,1.183,1500,2.046,1501,1.183,1502,1.183,1503,1.183,1504,1.183,1505,2.046,1506,1.183,1507,1.183,1508,1.183,1509,1.183,1510,1.183,1511,2.704,1512,1.183,1513,1.183,1514,1.183,1515,1.183,1516,1.183,1517,1.183,1518,1.183,1519,1.183,1520,1.183,1521,1.183,1522,1.183,1523,1.183,1524,2.046,1525,2.046,1526,2.046,1527,1.183,1528,1.183,1529,1.183,1530,1.183]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1173,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":1292,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":1216,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":1224,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":1227,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":1215,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":1219,"title":{},"body":{"dependencies.html":{}}}],["0/3",{"_index":1174,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1175,"title":{},"body":{"coverage.html":{}}}],["1.0",{"_index":575,"title":{},"body":{"interfaces/Device.html":{}}}],["1.0.0",{"_index":1220,"title":{},"body":{"dependencies.html":{}}}],["1.0.16",{"_index":1212,"title":{},"body":{"dependencies.html":{}}}],["1.1.25",{"_index":1199,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":1165,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":389,"title":{},"body":{"injectables/BcryptService.html":{},"overview.html":{}}}],["10.0.0",{"_index":1200,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":1208,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":1205,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":1202,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":1164,"title":{},"body":{"coverage.html":{}}}],["1000",{"_index":929,"title":{},"body":{"injectables/SessionsService.html":{}}}],["127.0.0.1",{"_index":1377,"title":{},"body":{"miscellaneous/variables.html":{}}}],["17.13.3",{"_index":1218,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":1290,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["2.1.5",{"_index":576,"title":{},"body":{"interfaces/Device.html":{}}}],["2/2",{"_index":1177,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":476,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["200",{"_index":1027,"title":{},"body":{"controllers/UsersController.html":{}}}],["201",{"_index":1020,"title":{},"body":{"controllers/UsersController.html":{}}}],["24",{"_index":927,"title":{},"body":{"injectables/SessionsService.html":{}}}],["2bdd",{"_index":954,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["3",{"_index":493,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{}}}],["3.2.2",{"_index":1201,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":1176,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["31",{"_index":922,"title":{},"body":{"injectables/SessionsService.html":{}}}],["4",{"_index":1291,"title":{},"body":{"overview.html":{},"miscellaneous/variables.html":{}}}],["4.0.1",{"_index":1213,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":1188,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":1193,"title":{},"body":{"coverage.html":{}}}],["4e7b",{"_index":955,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["5.0.2",{"_index":1210,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":1214,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":1166,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":963,"title":{},"body":{"entities/User.html":{}}}],["6/6",{"_index":1194,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":928,"title":{},"body":{"injectables/SessionsService.html":{}}}],["7.4.0",{"_index":1207,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":1226,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":475,"title":{},"body":{"classes/CreateUserDto.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["8.12.0",{"_index":1222,"title":{},"body":{"dependencies.html":{}}}],["8/8",{"_index":1167,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1192,"title":{},"body":{"coverage.html":{}}}],["8721c3c99ea4",{"_index":957,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["9/9",{"_index":1195,"title":{},"body":{"coverage.html":{}}}],["9\\.]+)[\\);]/.exec(useragent)?.[1",{"_index":1492,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._",{"_index":1488,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9\\._]+)[\\);]/.exec(useragent)?.[1",{"_index":1499,"title":{},"body":{"miscellaneous/variables.html":{}}}],["9f53",{"_index":956,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["_",{"_index":473,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["abstract",{"_index":644,"title":{},"body":{"injectables/HashingService.html":{}}}],["access",{"_index":445,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["accessible",{"_index":680,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["accessing",{"_index":780,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/SessionsService.html":{}}}],["account",{"_index":333,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":640,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["actions",{"_index":890,"title":{},"body":{"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["activate",{"_index":485,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["activate'})@isoptional()@isenum(userstatus",{"_index":488,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["activated",{"_index":334,"title":{},"body":{"injectables/AuthService.html":{}}}],["activation",{"_index":338,"title":{},"body":{"injectables/AuthService.html":{}}}],["active",{"_index":356,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/enumerations.html":{}}}],["adapt",{"_index":554,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["add",{"_index":635,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["added",{"_index":889,"title":{},"body":{"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":1326,"title":{},"body":{"miscellaneous/variables.html":{}}}],["additional",{"_index":530,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["address",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["adhere",{"_index":496,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["adheres",{"_index":663,"title":{},"body":{"classes/IdDto.html":{}}}],["admin",{"_index":1235,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["administrative",{"_index":1236,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["affect",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent",{"_index":1476,"title":{},"body":{"miscellaneous/variables.html":{}}}],["agent.decorator",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{}}}],["agent.decorator.ts",{"_index":1171,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["aggregating",{"_index":427,"title":{},"body":{"modules/CoreModule.html":{}}}],["algorithm",{"_index":364,"title":{},"body":{"injectables/BcryptService.html":{}}}],["alias",{"_index":936,"title":{},"body":{"injectables/SessionsService.html":{}}}],["allow",{"_index":710,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["allowed",{"_index":692,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["allowing",{"_index":231,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["allows",{"_index":366,"title":{},"body":{"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["along",{"_index":938,"title":{},"body":{"injectables/SessionsService.html":{}}}],["alter",{"_index":634,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["always",{"_index":1310,"title":{},"body":{"miscellaneous/variables.html":{}}}],["android",{"_index":571,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["android/.test(useragent",{"_index":1491,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api",{"_index":946,"title":{},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiparam",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiproperty",{"_index":500,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiproperty({description",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["apipropertyoptional",{"_index":501,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({description",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["apipropertyoptional({enum",{"_index":482,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apiquery",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiresponse",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["apitags('auth",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('users",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["app_guard",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{}}}],["app_pipe",{"_index":413,"title":{},"body":{"modules/CommonModule.html":{}}}],["applicable",{"_index":574,"title":{},"body":{"interfaces/Device.html":{}}}],["application",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"injectables/LocalStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["application's",{"_index":430,"title":{},"body":{"modules/CoreModule.html":{},"injectables/JwtStrategy.html":{}}}],["application'})@apiresponse({status",{"_index":1026,"title":{},"body":{"controllers/UsersController.html":{}}}],["applies",{"_index":1461,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apply",{"_index":224,"title":{},"body":{"modules/AuthModule.html":{}}}],["applydecorators(defaultisboolean(validationoptions",{"_index":1442,"title":{},"body":{"miscellaneous/variables.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["architecture",{"_index":436,"title":{},"body":{"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["associated",{"_index":721,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/Session.html":{}}}],["async",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["asynchronous",{"_index":1259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asynchronously",{"_index":207,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{}}}],["atom",{"_index":1306,"title":{},"body":{"miscellaneous/variables.html":{}}}],["attempts",{"_index":1382,"title":{},"body":{"miscellaneous/variables.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":192,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.guard",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.guard.ts",{"_index":673,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:14",{"_index":685,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.guard.ts:33",{"_index":690,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth.service",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":751,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["auth/config/jwt.config",{"_index":752,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["auth/decorators/public.decorator",{"_index":702,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["auth/dto/login",{"_index":814,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["auth/login",{"_index":233,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":220,"title":{},"body":{"modules/AuthModule.html":{}}}],["authenticated",{"_index":777,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authenticating",{"_index":784,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["authentication",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["authguard",{"_index":674,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":681,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":782,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1239,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{},"properties.html":{}}}],["authorization",{"_index":761,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["authservice",{"_index":124,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authservice's",{"_index":793,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["automatic",{"_index":1446,"title":{},"body":{"miscellaneous/variables.html":{}}}],["automatically",{"_index":834,"title":{},"body":{"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["available",{"_index":1288,"title":{},"body":{"modules.html":{}}}],["await",{"_index":302,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["badrequestexception",{"_index":812,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["badrequestexception(errors",{"_index":826,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["balancer",{"_index":1388,"title":{},"body":{"miscellaneous/variables.html":{}}}],["based",{"_index":694,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["basic",{"_index":1243,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bcrypt",{"_index":363,"title":{},"body":{"injectables/BcryptService.html":{},"dependencies.html":{}}}],["bcrypt.compare(data",{"_index":399,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.gensalt(roundssalt",{"_index":395,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcrypt.hash(data",{"_index":398,"title":{},"body":{"injectables/BcryptService.html":{}}}],["bcryptservice",{"_index":359,"title":{"injectables/BcryptService.html":{}},"body":{"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"coverage.html":{}}}],["bearer",{"_index":763,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["before",{"_index":779,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["beforeinsert",{"_index":1139,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeinsert(event",{"_index":1143,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate",{"_index":1140,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["beforeupdate(event",{"_index":1148,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["behind",{"_index":1386,"title":{},"body":{"miscellaneous/variables.html":{}}}],["being",{"_index":1520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["better",{"_index":550,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["between",{"_index":474,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["body",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":376,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["boolean'})@isoptional()@isboolean",{"_index":857,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator",{"_index":861,"title":{},"body":{"classes/RemoveDto.html":{}}}],["boolean.decorator.ts",{"_index":1179,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["booleans",{"_index":1449,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["both",{"_index":1445,"title":{},"body":{"miscellaneous/variables.html":{}}}],["browse",{"_index":1286,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1284,"title":{},"body":{"modules.html":{}}}],["buffer",{"_index":370,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["bug",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":1329,"title":{},"body":{"miscellaneous/variables.html":{}}}],["buildmessage",{"_index":1413,"title":{},"body":{"miscellaneous/variables.html":{}}}],["built",{"_index":525,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["business",{"_index":1080,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["call",{"_index":686,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["callback",{"_index":769,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["called",{"_index":403,"title":{},"body":{"modules/CommonModule.html":{},"injectables/LocalStrategy.html":{}}}],["calling",{"_index":1429,"title":{},"body":{"miscellaneous/variables.html":{}}}],["calls",{"_index":770,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["canactivate",{"_index":682,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["canactivate(context",{"_index":688,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["cascade",{"_index":980,"title":{},"body":{"entities/User.html":{}}}],["case",{"_index":1453,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cases",{"_index":568,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["cast",{"_index":1159,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["catch",{"_index":304,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["central",{"_index":425,"title":{},"body":{"modules/CoreModule.html":{}}}],["certain",{"_index":497,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/JwtAuthGuard.html":{}}}],["change",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changelog",{"_index":1305,"title":{},"body":{"miscellaneous/variables.html":{}}}],["changepassword",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["changepassword(id",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["changepassword(userid",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{}}}],["changepassworddto",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["changes",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["character",{"_index":610,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"miscellaneous/variables.html":{}}}],["characters",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":704,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["checks",{"_index":332,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["chore",{"_index":1336,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ci",{"_index":1333,"title":{},"body":{"miscellaneous/variables.html":{}}}],["class",{"_index":64,"title":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"classes/UsersSubscriber.html":{},"overview.html":{}}}],["clean",{"_index":1089,"title":{},"body":{"modules/UsersModule.html":{}}}],["client's",{"_index":1379,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_commonmodule",{"_index":400,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_commonmodule_exports",{"_index":401,"title":{},"body":{"modules/CommonModule.html":{},"overview.html":{}}}],["cluster_coremodule",{"_index":420,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_coremodule_imports",{"_index":421,"title":{},"body":{"modules/CoreModule.html":{},"overview.html":{}}}],["cluster_sessionsmodule",{"_index":892,"title":{},"body":{"modules/SessionsModule.html":{}}}],["cluster_sessionsmodule_providers",{"_index":893,"title":{},"body":{"modules/SessionsModule.html":{}}}],["cluster_usersmodule",{"_index":1073,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_imports",{"_index":1075,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1074,"title":{},"body":{"modules/UsersModule.html":{}}}],["code",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["column",{"_index":868,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column(undefined",{"_index":970,"title":{},"body":{"entities/User.html":{}}}],["column({length",{"_index":962,"title":{},"body":{"entities/User.html":{}}}],["column({select",{"_index":967,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":865,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["column({unique",{"_index":879,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["combines",{"_index":1443,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commas",{"_index":1399,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commented",{"_index":336,"title":{},"body":{"injectables/AuthService.html":{}}}],["commit",{"_index":1343,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint.config.ts",{"_index":1162,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["commitlint/config",{"_index":1302,"title":{},"body":{"miscellaneous/variables.html":{}}}],["commitlint/format",{"_index":1308,"title":{},"body":{"miscellaneous/variables.html":{}}}],["common",{"_index":444,"title":{},"body":{"modules/CoreModule.html":{},"classes/RegistryDates.html":{}}}],["common/common.module",{"_index":440,"title":{},"body":{"modules/CoreModule.html":{}}}],["commonmodule",{"_index":170,"title":{"modules/CommonModule.html":{}},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["compare",{"_index":368,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["compare(data",{"_index":369,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["compared",{"_index":1241,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compares",{"_index":345,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["comparing",{"_index":361,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionsService.html":{}}}],["compodoc/compodoc",{"_index":1198,"title":{},"body":{"dependencies.html":{}}}],["components",{"_index":902,"title":{},"body":{"injectables/SessionsService.html":{},"modules/UsersModule.html":{}}}],["concerns",{"_index":1091,"title":{},"body":{"modules/UsersModule.html":{}}}],["concrete",{"_index":647,"title":{},"body":{"injectables/HashingService.html":{}}}],["config",{"_index":1346,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config/database.config",{"_index":561,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["config/jwt.config",{"_index":194,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{}}}],["configmodule.forfeature(jwtconfig",{"_index":214,"title":{},"body":{"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":584,"title":{},"body":{"modules/EnvModule.html":{}}}],["configtype",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configuration",{"_index":209,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configure",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["configure(consumer",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{}}}],["conforms",{"_index":531,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["connect",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["connection",{"_index":544,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["consecutive",{"_index":1437,"title":{},"body":{"miscellaneous/variables.html":{}}}],["considered",{"_index":1000,"title":{},"body":{"entities/User.html":{}}}],["console.log('user",{"_index":1469,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":312,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["constant",{"_index":1425,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constraint",{"_index":616,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["constraints",{"_index":499,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["constructor",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(authservice",{"_index":786,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(datasource",{"_index":903,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["constructor(jwtconfiguration",{"_index":735,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(private",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(reflector",{"_index":683,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["constructor(userrepository",{"_index":1100,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["consumer",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["consumer.apply(loginvalidationmiddleware).forroutes('auth/login",{"_index":235,"title":{},"body":{"modules/AuthModule.html":{}}}],["contain",{"_index":1392,"title":{},"body":{"miscellaneous/variables.html":{}}}],["container",{"_index":1103,"title":{},"body":{"injectables/UsersService.html":{}}}],["containing",{"_index":311,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["contains",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["content",{"_index":479,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["context",{"_index":406,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["context.getclass",{"_index":709,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["context.gethandler",{"_index":707,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["continuous",{"_index":1351,"title":{},"body":{"miscellaneous/variables.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["controller('auth",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('sessions",{"_index":891,"title":{},"body":{"controllers/SessionsController.html":{}}}],["controller('users",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["conventional",{"_index":1303,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conversion",{"_index":1447,"title":{},"body":{"miscellaneous/variables.html":{}}}],["convert",{"_index":817,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["converted",{"_index":1524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["converts",{"_index":1456,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core/common/common.module",{"_index":201,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["core/common/decorators/validators/is",{"_index":507,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["core/common/dto/id.dto",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/remove.dto",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["core/common/dto/user",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["core/common/embedded/registry",{"_index":987,"title":{},"body":{"entities/User.html":{}}}],["core/common/enums/user",{"_index":511,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["core/common/hashing/hashing.service",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["core/common/interfaces/custom",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/device.interface",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["core/common/interfaces/jwt",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["core/core.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["coremodule",{"_index":13,"title":{"modules/CoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{},"modules.html":{},"overview.html":{}}}],["correcting",{"_index":1328,"title":{},"body":{"miscellaneous/variables.html":{}}}],["corresponding",{"_index":781,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["coverage",{"_index":1160,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["cpu",{"_index":1487,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":528,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["create(@body",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["create(createuserdto",{"_index":1017,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["create(userid",{"_index":910,"title":{},"body":{"injectables/SessionsService.html":{}}}],["created",{"_index":841,"title":{},"body":{"classes/RegistryDates.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["createdat",{"_index":627,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["createdatecolumn",{"_index":838,"title":{},"body":{"classes/RegistryDates.html":{}}}],["createparamdecorator",{"_index":1370,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":300,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["createuserdto",{"_index":446,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["creating",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["creation",{"_index":835,"title":{},"body":{"classes/RegistryDates.html":{},"controllers/UsersController.html":{}}}],["credentials",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["crud",{"_index":909,"title":{},"body":{"injectables/SessionsService.html":{},"modules/UsersModule.html":{}}}],["cryptographic",{"_index":649,"title":{},"body":{"injectables/HashingService.html":{}}}],["ctx",{"_index":1371,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.switchtohttp().getrequest",{"_index":1372,"title":{},"body":{"miscellaneous/variables.html":{}}}],["current",{"_index":533,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":1248,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["currentpassword",{"_index":1005,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["custom",{"_index":410,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["customizing",{"_index":1417,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customrequest",{"_index":520,"title":{"interfaces/CustomRequest.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["customuser",{"_index":294,"title":{"interfaces/CustomUser.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/SessionsService.html":{},"coverage.html":{}}}],["data",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["data'})@apiparam({name",{"_index":1043,"title":{},"body":{"controllers/UsersController.html":{}}}],["data_source_database",{"_index":1362,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_host",{"_index":1358,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_password",{"_index":1357,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_port",{"_index":1360,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_url",{"_index":1364,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_source_username",{"_index":1355,"title":{},"body":{"miscellaneous/variables.html":{}}}],["database",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["database/database.module",{"_index":441,"title":{},"body":{"modules/CoreModule.html":{}}}],["databaseconfig",{"_index":548,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["databasemodule",{"_index":422,"title":{"modules/DatabaseModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules.html":{},"overview.html":{}}}],["datasource",{"_index":904,"title":{},"body":{"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["datasource.subscribers.push(this",{"_index":1154,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["date",{"_index":833,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["date().setmilliseconds(31",{"_index":926,"title":{},"body":{"injectables/SessionsService.html":{}}}],["date(new",{"_index":925,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dates",{"_index":837,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dates.embedded",{"_index":988,"title":{},"body":{"entities/User.html":{}}}],["dates.embedded.ts",{"_index":831,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["dates.embedded.ts:14",{"_index":839,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:21",{"_index":851,"title":{},"body":{"classes/RegistryDates.html":{}}}],["dates.embedded.ts:29",{"_index":845,"title":{},"body":{"classes/RegistryDates.html":{}}}],["days",{"_index":923,"title":{},"body":{"injectables/SessionsService.html":{}}}],["dcbec18c",{"_index":953,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["deactivate",{"_index":486,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["deactivated",{"_index":1249,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["debugging",{"_index":1467,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["declare",{"_index":670,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{}}}],["declares",{"_index":1078,"title":{},"body":{"modules/UsersModule.html":{}}}],["decoded",{"_index":747,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["decorated",{"_index":886,"title":{},"body":{"controllers/SessionsController.html":{}}}],["decorator",{"_index":365,"title":{},"body":{"injectables/BcryptService.html":{},"modules/EnvModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["decorators",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{}}}],["decorators/ipaddress.decorator",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/public.decorator",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/user.decorator",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{}}}],["decorators/validators/is",{"_index":860,"title":{},"body":{"classes/RemoveDto.html":{}}}],["default",{"_index":388,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultmessage",{"_index":1412,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defaults",{"_index":977,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["define",{"_index":215,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["defines",{"_index":658,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["defining",{"_index":535,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"miscellaneous/variables.html":{}}}],["delegate",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["delete",{"_index":322,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete(':id",{"_index":1069,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(':id')@apioperation({description",{"_index":1036,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteat",{"_index":630,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deleted",{"_index":847,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["deletedat",{"_index":974,"title":{},"body":{"entities/User.html":{}}}],["deletedatecolumn",{"_index":844,"title":{},"body":{"classes/RegistryDates.html":{}}}],["deleting",{"_index":1105,"title":{},"body":{"injectables/UsersService.html":{}}}],["deletion",{"_index":836,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dependency",{"_index":900,"title":{},"body":{"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["deps",{"_index":1347,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describing",{"_index":661,"title":{},"body":{"classes/IdDto.html":{}}}],["description",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"properties.html":{}}}],["destructure",{"_index":1155,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["details",{"_index":538,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["detection",{"_index":1504,"title":{},"body":{"miscellaneous/variables.html":{}}}],["determine",{"_index":999,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":691,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["development",{"_index":558,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["device",{"_index":106,"title":{"interfaces/Device.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":555,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["docs",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":1014,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["documenting",{"_index":944,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["doesn't",{"_index":1125,"title":{},"body":{"injectables/UsersService.html":{}}}],["don't",{"_index":1337,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dot",{"_index":1440,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dots",{"_index":1438,"title":{},"body":{"miscellaneous/variables.html":{}}}],["down",{"_index":598,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["down(queryrunner",{"_index":600,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["drop",{"_index":642,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["dto",{"_index":659,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["dto/create",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/register",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/update",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dtos",{"_index":1528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["due",{"_index":1254,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["during",{"_index":308,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["e.g",{"_index":557,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["e2e",{"_index":1274,"title":{},"body":{"index.html":{}}}],["each",{"_index":873,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["eachprefix",{"_index":1414,"title":{},"body":{"miscellaneous/variables.html":{}}}],["easier",{"_index":553,"title":{},"body":{"modules/DatabaseModule.html":{},"controllers/UsersController.html":{}}}],["easily",{"_index":437,"title":{},"body":{"modules/CoreModule.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["embedded",{"_index":972,"title":{},"body":{"entities/User.html":{}}}],["enable",{"_index":585,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{}}}],["enableimplicitconversion",{"_index":1526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enables",{"_index":1522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enabling",{"_index":1104,"title":{},"body":{"injectables/UsersService.html":{}}}],["encapsulates",{"_index":1088,"title":{},"body":{"modules/UsersModule.html":{}}}],["encapsulating",{"_index":432,"title":{},"body":{"modules/CoreModule.html":{}}}],["encrypted",{"_index":371,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["encryption",{"_index":1365,"title":{},"body":{"miscellaneous/variables.html":{}}}],["end",{"_index":1439,"title":{},"body":{"miscellaneous/variables.html":{}}}],["endpoint",{"_index":1023,"title":{},"body":{"controllers/UsersController.html":{}}}],["endpoints",{"_index":1012,"title":{},"body":{"controllers/UsersController.html":{}}}],["enforces",{"_index":669,"title":{},"body":{"classes/IdDto.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["enforcing",{"_index":1516,"title":{},"body":{"miscellaneous/variables.html":{}}}],["enhance",{"_index":1530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ensures",{"_index":668,"title":{},"body":{"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["ensuring",{"_index":775,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["entities",{"_index":204,"title":{},"body":{"modules/AuthModule.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["entities/session.entity",{"_index":895,"title":{},"body":{"modules/SessionsModule.html":{}}}],["entities/user.entity",{"_index":1092,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["entity",{"_index":110,"title":{"entities/Session.html":{},"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"entities/User.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["entitysubscriberinterface",{"_index":1138,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["entry",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["enum",{"_index":491,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["enum('activate",{"_index":622,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enum('admin",{"_index":624,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["enumeration",{"_index":1247,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":1229,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env.constants",{"_index":579,"title":{},"body":{"modules/EnvModule.html":{}}}],["env/env.module",{"_index":442,"title":{},"body":{"modules/CoreModule.html":{}}}],["env_validation_schema",{"_index":578,"title":{},"body":{"modules/EnvModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["environment",{"_index":211,"title":{},"body":{"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["environments",{"_index":556,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["envmodule",{"_index":423,"title":{"modules/EnvModule.html":{}},"body":{"modules/CoreModule.html":{},"modules/EnvModule.html":{},"modules.html":{},"overview.html":{}}}],["error",{"_index":305,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["errors",{"_index":811,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["errors.length",{"_index":825,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["essential",{"_index":443,"title":{},"body":{"modules/CoreModule.html":{}}}],["etc",{"_index":1321,"title":{},"body":{"miscellaneous/variables.html":{}}}],["event",{"_index":1147,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["events",{"_index":1085,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["eventsubscriber",{"_index":1152,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["example",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["exec(useragent)?.[2",{"_index":1489,"title":{},"body":{"miscellaneous/variables.html":{}}}],["execution",{"_index":1464,"title":{},"body":{"miscellaneous/variables.html":{}}}],["executioncontext",{"_index":689,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["existing",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["exists",{"_index":1126,"title":{},"body":{"injectables/UsersService.html":{}}}],["expandvariables",{"_index":589,"title":{},"body":{"modules/EnvModule.html":{}}}],["expansion",{"_index":586,"title":{},"body":{"modules/EnvModule.html":{}}}],["expirationdate",{"_index":539,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["expire",{"_index":870,"title":{},"body":{"entities/Session.html":{}}}],["expired",{"_index":932,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expiry",{"_index":921,"title":{},"body":{"injectables/SessionsService.html":{}}}],["expirydate",{"_index":613,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["explicitly",{"_index":1158,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["export",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":527,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["expression",{"_index":1422,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extending",{"_index":524,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["extends",{"_index":532,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["external",{"_index":1330,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":1397,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extract",{"_index":1484,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extracting",{"_index":757,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extraction",{"_index":754,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt",{"_index":753,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":759,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":760,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["failed",{"_index":1433,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1411,"title":{},"body":{"miscellaneous/variables.html":{}}}],["failure",{"_index":1452,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":699,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["feat",{"_index":1311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["feature",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["features",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["fetch",{"_index":1028,"title":{},"body":{"controllers/UsersController.html":{}}}],["fetched",{"_index":940,"title":{},"body":{"injectables/SessionsService.html":{}}}],["fetches",{"_index":937,"title":{},"body":{"injectables/SessionsService.html":{}}}],["field",{"_index":788,"title":{},"body":{"injectables/LocalStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["fields",{"_index":325,"title":{},"body":{"injectables/AuthService.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["files",{"_index":1334,"title":{},"body":{"miscellaneous/variables.html":{}}}],["find",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findall",{"_index":1015,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone",{"_index":1016,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(undefined",{"_index":1030,"title":{},"body":{"controllers/UsersController.html":{}}}],["findone(where",{"_index":1108,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["findonebyid(id",{"_index":1113,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionsselect",{"_index":1110,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionsselectbystring",{"_index":1111,"title":{},"body":{"injectables/UsersService.html":{}}}],["findoptionswhere",{"_index":1109,"title":{},"body":{"injectables/UsersService.html":{}}}],["finds",{"_index":317,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["first",{"_index":1396,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fix",{"_index":1312,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fixes",{"_index":1348,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fk_e1dde0bd0402cc9b1967c40a1b3",{"_index":636,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["flag",{"_index":1071,"title":{},"body":{"controllers/UsersController.html":{}}}],["flexibility",{"_index":551,"title":{},"body":{"modules/DatabaseModule.html":{},"interfaces/Device.html":{}}}],["following",{"_index":583,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["forbidnonwhitelisted",{"_index":822,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["foreign",{"_index":637,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["format",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["format'})@isstring()@isuuid",{"_index":664,"title":{},"body":{"classes/IdDto.html":{}}}],["formatter",{"_index":1307,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formatting",{"_index":498,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["forwarded",{"_index":1374,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":330,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["foundation",{"_index":429,"title":{},"body":{"modules/CoreModule.html":{}}}],["full",{"_index":1238,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["function",{"_index":809,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["functionalities",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"modules/UsersModule.html":{}}}],["functionality",{"_index":431,"title":{},"body":{"modules/CoreModule.html":{},"injectables/HashingService.html":{},"classes/RegistryDates.html":{}}}],["functions",{"_index":1257,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["future",{"_index":934,"title":{},"body":{"injectables/SessionsService.html":{}}}],["generate",{"_index":393,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generated",{"_index":397,"title":{},"body":{"injectables/BcryptService.html":{}}}],["generates",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{},"entities/User.html":{}}}],["generatetables1725986093329",{"_index":594,"title":{"classes/GenerateTables1725986093329.html":{}},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["generating",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["get(':id",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["get(':id')@apioperation({description",{"_index":1031,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('profile",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@apioperation({description",{"_index":1024,"title":{},"body":{"controllers/UsersController.html":{}}}],["getprofile",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@user('id",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["getprofile(id",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["getprofile(userid",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["getsalt",{"_index":394,"title":{},"body":{"injectables/BcryptService.html":{}}}],["getter",{"_index":998,"title":{},"body":{"entities/User.html":{}}}],["getting",{"_index":1262,"title":{"index.html":{}},"body":{}}],["given",{"_index":384,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["global",{"_index":225,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["graph",{"_index":1287,"title":{},"body":{"modules.html":{}}}],["grouping",{"_index":1013,"title":{},"body":{"controllers/UsersController.html":{}}}],["guard",{"_index":226,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["guards",{"_index":217,"title":{},"body":{"modules/AuthModule.html":{}}}],["guards/jwt",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["guards/local",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["handle",{"_index":219,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["handler",{"_index":696,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["handlers",{"_index":1473,"title":{},"body":{"miscellaneous/variables.html":{}}}],["handles",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{}}}],["handling",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["hash",{"_index":347,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hash(data",{"_index":380,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashed",{"_index":396,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["hashing",{"_index":298,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["hashing.service",{"_index":392,"title":{},"body":{"injectables/BcryptService.html":{}}}],["hashing/bcrypt.service",{"_index":416,"title":{},"body":{"modules/CommonModule.html":{}}}],["hashing/hashing.service",{"_index":415,"title":{},"body":{"modules/CommonModule.html":{}}}],["hashingservice",{"_index":254,"title":{"injectables/HashingService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"injectables/HashingService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"overview.html":{}}}],["header",{"_index":762,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["headers",{"_index":746,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":1402,"title":{},"body":{"miscellaneous/variables.html":{}}}],["helping",{"_index":726,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["here",{"_index":1505,"title":{},"body":{"miscellaneous/variables.html":{}}}],["host",{"_index":546,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":1079,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["httpcode",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok",{"_index":155,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpcode(httpstatus.ok)@useguards(jwtauthguard)@post('change",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://minidocs.com",{"_index":1282,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["i.e",{"_index":679,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["id",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["id'})@apiparam({name",{"_index":1032,"title":{},"body":{"controllers/UsersController.html":{}}}],["iddto",{"_index":656,"title":{"classes/IdDto.html":{}},"body":{"classes/IdDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["identification",{"_index":1508,"title":{},"body":{"miscellaneous/variables.html":{}}}],["identifier",{"_index":662,"title":{},"body":{"classes/IdDto.html":{},"entities/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["identifies",{"_index":720,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["identify",{"_index":567,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["identifying",{"_index":1426,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immutability",{"_index":725,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["implement",{"_index":337,"title":{},"body":{"injectables/AuthService.html":{}}}],["implementation",{"_index":417,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["implemented",{"_index":646,"title":{},"body":{"injectables/HashingService.html":{}}}],["implements",{"_index":230,"title":{},"body":{"modules/AuthModule.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UsersSubscriber.html":{}}}],["import",{"_index":57,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["imported",{"_index":581,"title":{},"body":{"modules/EnvModule.html":{}}}],["importing",{"_index":426,"title":{},"body":{"modules/CoreModule.html":{}}}],["imports",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["improvement",{"_index":1325,"title":{},"body":{"miscellaneous/variables.html":{}}}],["includes",{"_index":470,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["including",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{}}}],["incoming",{"_index":745,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"miscellaneous/variables.html":{}}}],["index",{"_index":76,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["indicate",{"_index":862,"title":{},"body":{"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":1479,"title":{},"body":{"miscellaneous/variables.html":{}}}],["indicating",{"_index":377,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["information",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["initialize",{"_index":582,"title":{},"body":{"modules/EnvModule.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["initializes",{"_index":1260,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":749,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["inject(jwtconfig.key",{"_index":755,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":236,"title":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injected",{"_index":405,"title":{},"body":{"modules/CommonModule.html":{},"injectables/SessionsService.html":{}}}],["injecting",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["injection",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{}}}],["injectrepository",{"_index":917,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(session",{"_index":918,"title":{},"body":{"injectables/SessionsService.html":{}}}],["injectrepository(user",{"_index":919,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["injects",{"_index":1102,"title":{},"body":{"injectables/UsersService.html":{}}}],["input",{"_index":1448,"title":{},"body":{"miscellaneous/variables.html":{}}}],["inserted",{"_index":1146,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["insertevent",{"_index":1144,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["inserting",{"_index":1156,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["installation",{"_index":1264,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1266,"title":{},"body":{"index.html":{}}}],["instance",{"_index":408,"title":{},"body":{"modules/CommonModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["integrate",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["integration",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["integrity",{"_index":728,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["intel|ppc",{"_index":1494,"title":{},"body":{"miscellaneous/variables.html":{}}}],["interact",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["interface",{"_index":519,"title":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"injectables/HashingService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["interfaces",{"_index":521,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["invalid",{"_index":351,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["invokes",{"_index":792,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["ios",{"_index":1480,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ip",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["ip.split(',')[0].replace",{"_index":1376,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ipaddress",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iphone",{"_index":570,"title":{},"body":{"interfaces/Device.html":{},"miscellaneous/variables.html":{}}}],["ips",{"_index":1394,"title":{},"body":{"miscellaneous/variables.html":{}}}],["is_password_key",{"_index":1183,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_public_key",{"_index":701,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["is_username_key",{"_index":1186,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["isboolean",{"_index":859,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isdeleted",{"_index":1001,"title":{},"body":{"entities/User.html":{}}}],["isemail",{"_index":502,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["isenum",{"_index":503,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum(userstatus",{"_index":516,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["ismatch",{"_index":348,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["isnotempty",{"_index":801,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isnotempty()@isstring",{"_index":798,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["isoptional",{"_index":504,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RemoveDto.html":{}}}],["ispassword",{"_index":506,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ispassword(value",{"_index":1408,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ispublic",{"_index":705,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["isstring",{"_index":666,"title":{},"body":{"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{}}}],["isusername",{"_index":509,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["isusername(value",{"_index":1432,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isuuid",{"_index":667,"title":{},"body":{"classes/IdDto.html":{},"classes/UpdateUserDto.html":{}}}],["it's",{"_index":320,"title":{},"body":{"injectables/AuthService.html":{}}}],["joi",{"_index":1217,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["joi.number().required",{"_index":1361,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.object",{"_index":1354,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joi.string().required",{"_index":1356,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json",{"_index":612,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":206,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"dependencies.html":{}}}],["jwt_secret_key",{"_index":1366,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jwtauthguard",{"_index":136,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtconfig",{"_index":193,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["jwtconfiguration",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtconfiguration.secret",{"_index":765,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtfromrequest",{"_index":758,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync(jwtconfig.asprovider",{"_index":210,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":278,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwts",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtservice",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":171,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwttoken",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["keeps",{"_index":1395,"title":{},"body":{"miscellaneous/variables.html":{}}}],["key",{"_index":428,"title":{},"body":{"modules/CoreModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["last",{"_index":852,"title":{},"body":{"classes/RegistryDates.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":469,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["length(0",{"_index":518,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["letter",{"_index":1423,"title":{},"body":{"miscellaneous/variables.html":{}}}],["level",{"_index":708,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["leverages",{"_index":1474,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":1415,"title":{},"body":{"miscellaneous/variables.html":{}}}],["license",{"_index":1283,"title":{},"body":{"index.html":{},"properties.html":{}}}],["lifecycle",{"_index":367,"title":{},"body":{"injectables/BcryptService.html":{}}}],["limited",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/enumerations.html":{}}}],["linux",{"_index":1500,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linux/i.test(useragent",{"_index":1502,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":1025,"title":{},"body":{"controllers/UsersController.html":{}}}],["listen",{"_index":1153,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["listens",{"_index":1083,"title":{},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{}}}],["listento",{"_index":1141,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["lists",{"_index":914,"title":{},"body":{"injectables/SessionsService.html":{}}}],["load",{"_index":1387,"title":{},"body":{"miscellaneous/variables.html":{}}}],["local",{"_index":222,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":139,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localhost",{"_index":1400,"title":{},"body":{"miscellaneous/variables.html":{}}}],["localstrategy",{"_index":172,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":1466,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logic",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["login",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["login(user",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["logindto",{"_index":818,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["loginuserdto",{"_index":796,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["loginvalidationmiddleware",{"_index":195,"title":{"injectables/LoginValidationMiddleware.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["longer",{"_index":1250,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lowercase",{"_index":492,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["mac",{"_index":1481,"title":{},"body":{"miscellaneous/variables.html":{}}}],["macos",{"_index":1493,"title":{},"body":{"miscellaneous/variables.html":{}}}],["main",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["mainly",{"_index":1244,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["maintain",{"_index":727,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["maintained",{"_index":439,"title":{},"body":{"modules/CoreModule.html":{}}}],["making",{"_index":552,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["manage",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/RegistryDates.html":{},"miscellaneous/enumerations.html":{}}}],["managed",{"_index":438,"title":{},"body":{"modules/CoreModule.html":{}}}],["management",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["manages",{"_index":37,"title":{},"body":{"modules/AppModule.html":{}}}],["managing",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"modules/UsersModule.html":{}}}],["mandatory",{"_index":565,"title":{},"body":{"interfaces/Device.html":{}}}],["many",{"_index":983,"title":{},"body":{"entities/User.html":{}}}],["manytoone",{"_index":881,"title":{},"body":{"entities/Session.html":{}}}],["manytoone(undefined",{"_index":875,"title":{},"body":{"entities/Session.html":{}}}],["map",{"_index":1462,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mark",{"_index":1431,"title":{},"body":{"miscellaneous/variables.html":{}}}],["marked",{"_index":678,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{},"injectables/SessionsService.html":{}}}],["marks",{"_index":1136,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["matches",{"_index":379,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["matches(value",{"_index":1401,"title":{},"body":{"miscellaneous/variables.html":{}}}],["matching",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["meaning",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["meet",{"_index":1369,"title":{},"body":{"miscellaneous/variables.html":{}}}],["message",{"_index":1409,"title":{},"body":{"miscellaneous/variables.html":{}}}],["messages",{"_index":1353,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metadata",{"_index":695,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":373,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["methods",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["middleware",{"_index":232,"title":{},"body":{"modules/AuthModule.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["middlewareconsumer",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["middlewares/login",{"_index":196,"title":{},"body":{"modules/AuthModule.html":{}}}],["migrationinterface",{"_index":597,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["miscellaneous",{"_index":1228,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":1327,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":1269,"title":{},"body":{"index.html":{}}}],["modified",{"_index":723,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/RegistryDates.html":{}}}],["modifier",{"_index":722,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["modify",{"_index":1338,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modular",{"_index":435,"title":{},"body":{"modules/CoreModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mohamadreza",{"_index":1279,"title":{},"body":{"index.html":{},"properties.html":{}}}],["mohmadreza",{"_index":466,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["mosalli",{"_index":1280,"title":{},"body":{"index.html":{},"properties.html":{}}}],["multiple",{"_index":1393,"title":{},"body":{"miscellaneous/variables.html":{}}}],["name",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":1077,"title":{},"body":{"modules/UsersModule.html":{}}}],["needed",{"_index":321,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["needs",{"_index":949,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["nestjs",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["nestjs's",{"_index":1509,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nestjs/common",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"injectables/JwtAuthGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1203,"title":{},"body":{"dependencies.html":{}}}],["nestjs/passport",{"_index":700,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1206,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":190,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestmiddleware",{"_index":813,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nestmodule",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["new",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"classes/CreateUserDto.html":{},"modules/EnvModule.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":930,"title":{},"body":{"injectables/SessionsService.html":{}}}],["newpassword",{"_index":1006,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{}}}],["next",{"_index":806,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["nextfunction",{"_index":807,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["node_env",{"_index":1367,"title":{},"body":{"miscellaneous/variables.html":{}}}],["non",{"_index":1513,"title":{},"body":{"miscellaneous/variables.html":{}}}],["normal",{"_index":712,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["notfoundexception",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["notfoundexception('user",{"_index":331,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["now",{"_index":628,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{}}}],["npm",{"_index":1332,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt",{"_index":1498,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nt/.test(useragent",{"_index":1497,"title":{},"body":{"miscellaneous/variables.html":{}}}],["null",{"_index":608,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":876,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["number",{"_index":382,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":471,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["obj",{"_index":1459,"title":{},"body":{"miscellaneous/variables.html":{}}}],["object",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":1529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["obtain",{"_index":1475,"title":{},"body":{"miscellaneous/variables.html":{}}}],["occurs",{"_index":307,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["one",{"_index":982,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":990,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":978,"title":{},"body":{"entities/User.html":{}}}],["operating",{"_index":1501,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["option",{"_index":1511,"title":{},"body":{"miscellaneous/variables.html":{}}}],["optional",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["options",{"_index":411,"title":{},"body":{"modules/CommonModule.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["orchestrates",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["organizing",{"_index":433,"title":{},"body":{"modules/CoreModule.html":{}}}],["original",{"_index":1457,"title":{},"body":{"miscellaneous/variables.html":{}}}],["os",{"_index":1482,"title":{},"body":{"miscellaneous/variables.html":{}}}],["others",{"_index":547,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["otherwise",{"_index":698,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overall",{"_index":1087,"title":{},"body":{"modules/UsersModule.html":{}}}],["overrides",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["overview",{"_index":1289,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":864,"title":{},"body":{"entities/Session.html":{},"injectables/SessionsService.html":{}}}],["ownerid",{"_index":615,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["owns",{"_index":878,"title":{},"body":{"entities/Session.html":{}}}],["package",{"_index":1197,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["param0",{"_index":354,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{}}}],["param1",{"_index":1068,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameter",{"_index":1378,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parameters",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["parent",{"_index":687,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["parsed",{"_index":1506,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parserpreset",{"_index":1304,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parses",{"_index":1507,"title":{},"body":{"miscellaneous/variables.html":{}}}],["part",{"_index":335,"title":{},"body":{"injectables/AuthService.html":{}}}],["partialtype",{"_index":952,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["partialtype(createuserdto",{"_index":948,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["participating",{"_index":1246,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["passes",{"_index":697,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["passing",{"_index":768,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passport",{"_index":675,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passport's",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy",{"_index":750,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":767,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["password.decorator",{"_index":508,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UserChangePasswordDto.html":{}}}],["password.decorator.ts",{"_index":1182,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["password.dto",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":1004,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:5",{"_index":1007,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["password.dto.ts:8",{"_index":1008,"title":{},"body":{"classes/UserChangePasswordDto.html":{}}}],["passwordregex",{"_index":1184,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["passwords",{"_index":362,"title":{},"body":{"injectables/BcryptService.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":1065,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id')@apioperation({description",{"_index":1041,"title":{},"body":{"controllers/UsersController.html":{}}}],["pattern",{"_index":1478,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":310,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":716,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["perf",{"_index":1323,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performance",{"_index":1324,"title":{},"body":{"miscellaneous/variables.html":{}}}],["performs",{"_index":1381,"title":{},"body":{"miscellaneous/variables.html":{}}}],["permissions",{"_index":1240,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["pg",{"_index":1221,"title":{},"body":{"dependencies.html":{}}}],["pipe",{"_index":404,"title":{},"body":{"modules/CommonModule.html":{},"miscellaneous/variables.html":{}}}],["pk_cace4a159ff9f2512dd42373760",{"_index":633,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["pk_f55da76ac1c3ac420f444d2ff11",{"_index":619,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["plain",{"_index":374,"title":{},"body":{"injectables/BcryptService.html":{}}}],["plaintoinstance",{"_index":815,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["plaintoinstance(loginuserdto",{"_index":819,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["point",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["populated",{"_index":842,"title":{},"body":{"classes/RegistryDates.html":{}}}],["port",{"_index":1359,"title":{},"body":{"miscellaneous/variables.html":{}}}],["possible",{"_index":483,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["possibly",{"_index":771,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/enumerations.html":{}}}],["post",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["post('change",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('login",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('register",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apioperation({description",{"_index":1018,"title":{},"body":{"controllers/UsersController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/SessionsController.html":{},"entities/User.html":{},"controllers/UsersController.html":{}}}],["preform",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{}}}],["present",{"_index":1390,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preventing",{"_index":1518,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":1342,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarily",{"_index":1380,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primary",{"_index":620,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["primarygeneratedcolumn",{"_index":882,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":871,"title":{},"body":{"entities/Session.html":{},"entities/User.html":{}}}],["private",{"_index":297,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["privileges",{"_index":1237,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["proceed",{"_index":711,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["process",{"_index":713,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["process.env.node_env",{"_index":1375,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processed",{"_index":1521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["processes",{"_index":1081,"title":{},"body":{"modules/UsersModule.html":{}}}],["processing",{"_index":887,"title":{},"body":{"controllers/SessionsController.html":{}}}],["production",{"_index":560,"title":{},"body":{"modules/DatabaseModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["profile",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["project",{"_index":1345,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":603,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{}}}],["promoting",{"_index":434,"title":{},"body":{"modules/CoreModule.html":{},"interfaces/JwtPayload.html":{}}}],["properly",{"_index":1368,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":452,"title":{"properties.html":{}},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["propertydecorator",{"_index":1405,"title":{},"body":{"miscellaneous/variables.html":{}}}],["protect",{"_index":676,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["protecting",{"_index":227,"title":{},"body":{"modules/AuthModule.html":{}}}],["provide",{"_index":228,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{}}}],["provided",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":899,"title":{},"body":{"modules/SessionsModule.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":645,"title":{},"body":{"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["proxied",{"_index":1385,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["public\".\"user_role_enum",{"_index":623,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public\".\"user_status_enum",{"_index":621,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["public()@httpcode(httpstatus.ok)@useguards(localauthguard)@post('login",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["public()@post('register",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["purposes",{"_index":1468,"title":{},"body":{"miscellaneous/variables.html":{}}}],["query",{"_index":1038,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["queryrunner",{"_index":601,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["queryrunner.query",{"_index":606,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["raw",{"_index":652,"title":{},"body":{"injectables/HashingService.html":{},"injectables/SessionsService.html":{}}}],["raw((alias",{"_index":935,"title":{},"body":{"injectables/SessionsService.html":{}}}],["read",{"_index":671,"title":{},"body":{"classes/IdDto.html":{},"classes/RemoveDto.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["reasons",{"_index":1256,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["receives",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["record",{"_index":849,"title":{},"body":{"classes/RegistryDates.html":{}}}],["recover",{"_index":997,"title":{},"body":{"entities/User.html":{}}}],["recovered",{"_index":995,"title":{},"body":{"entities/User.html":{}}}],["refactor",{"_index":1322,"title":{},"body":{"miscellaneous/variables.html":{}}}],["refactoring",{"_index":1350,"title":{},"body":{"miscellaneous/variables.html":{}}}],["references",{"_index":638,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["reflect",{"_index":1223,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":684,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["regex",{"_index":1403,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"controllers/UsersController.html":{},"classes/UsersSubscriber.html":{}}}],["register(@body",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(registeruserdto",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["registered",{"_index":898,"title":{},"body":{"modules/SessionsModule.html":{},"controllers/UsersController.html":{}}}],["registers",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["registeruserdto",{"_index":114,"title":{"classes/RegisterUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["registration",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["registry",{"_index":973,"title":{},"body":{"entities/User.html":{}}}],["registrydates",{"_index":829,"title":{"classes/RegistryDates.html":{}},"body":{"classes/RegistryDates.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["regular",{"_index":1242,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["rejects",{"_index":823,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["related",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CoreModule.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["relation",{"_index":984,"title":{},"body":{"entities/User.html":{}}}],["relations",{"_index":941,"title":{},"body":{"injectables/SessionsService.html":{}}}],["release",{"_index":1352,"title":{},"body":{"miscellaneous/variables.html":{}}}],["relevant",{"_index":1084,"title":{},"body":{"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["remove",{"_index":996,"title":{},"body":{"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["remove(@param('id",{"_index":1070,"title":{},"body":{"controllers/UsersController.html":{}}}],["remove(id",{"_index":1115,"title":{},"body":{"injectables/UsersService.html":{}}}],["remove(undefined",{"_index":1035,"title":{},"body":{"controllers/UsersController.html":{}}}],["removed",{"_index":994,"title":{},"body":{"entities/User.html":{},"miscellaneous/variables.html":{}}}],["removedto",{"_index":855,"title":{"classes/RemoveDto.html":{}},"body":{"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["removes",{"_index":319,"title":{},"body":{"injectables/AuthService.html":{}}}],["removing",{"_index":848,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{}}}],["replace",{"_index":1485,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replace(/_/g",{"_index":1490,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replacing",{"_index":1495,"title":{},"body":{"miscellaneous/variables.html":{}}}],["report",{"_index":569,"title":{},"body":{"interfaces/Device.html":{}}}],["repositories",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["repository",{"_index":906,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["represent",{"_index":536,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["representation",{"_index":1463,"title":{},"body":{"miscellaneous/variables.html":{}}}],["representing",{"_index":832,"title":{},"body":{"classes/RegistryDates.html":{},"entities/User.html":{}}}],["represents",{"_index":564,"title":{},"body":{"interfaces/Device.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"miscellaneous/enumerations.html":{}}}],["req",{"_index":744,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["req.body",{"_index":820,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["req.headers?.authorization.replace('bearer",{"_index":773,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request",{"_index":526,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["request.headers['user",{"_index":1477,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.headers['x",{"_index":1373,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request.interface",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["request.interface.ts",{"_index":523,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["request.user",{"_index":1465,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requested",{"_index":1470,"title":{},"body":{"miscellaneous/variables.html":{}}}],["requests",{"_index":810,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":677,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["required",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["requirements",{"_index":480,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["requires",{"_index":648,"title":{},"body":{"injectables/HashingService.html":{}}}],["res",{"_index":358,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["reset",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolves",{"_index":654,"title":{},"body":{"injectables/HashingService.html":{}}}],["resources",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"injectables/LocalAuthGuard.html":{},"classes/RemoveDto.html":{}}}],["respective",{"_index":1527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["response",{"_index":805,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["responsible",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CoreModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{}}}],["results",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["rethrows",{"_index":306,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieval",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["retrieve",{"_index":756,"title":{},"body":{"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["retrieving",{"_index":324,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1410,"title":{},"body":{"miscellaneous/variables.html":{}}}],["returning",{"_index":653,"title":{},"body":{"injectables/HashingService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["revert",{"_index":1340,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reverts",{"_index":1341,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reviewing",{"_index":344,"title":{},"body":{"injectables/AuthService.html":{}}}],["role",{"_index":327,"title":{},"body":{"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"injectables/UsersService.html":{}}}],["role.enum",{"_index":989,"title":{},"body":{"entities/User.html":{}}}],["role.enum.ts",{"_index":1231,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["roles",{"_index":1234,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["root",{"_index":25,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":387,"title":{},"body":{"injectables/BcryptService.html":{}}}],["roundssalt",{"_index":381,"title":{},"body":{"injectables/BcryptService.html":{}}}],["route",{"_index":234,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LoginValidationMiddleware.html":{},"controllers/SessionsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["routes",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"controllers/SessionsController.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["rule",{"_index":1407,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rules",{"_index":1309,"title":{},"body":{"miscellaneous/variables.html":{}}}],["run",{"_index":1267,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["running",{"_index":1389,"title":{},"body":{"miscellaneous/variables.html":{}}}],["rxjs",{"_index":1225,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":386,"title":{},"body":{"injectables/BcryptService.html":{}}}],["save",{"_index":1122,"title":{},"body":{"injectables/UsersService.html":{}}}],["saves",{"_index":301,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["schema",{"_index":591,"title":{},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["scope",{"_index":1344,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scopes",{"_index":1331,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scripts",{"_index":1335,"title":{},"body":{"miscellaneous/variables.html":{}}}],["secret",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["secretorkey",{"_index":764,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["security",{"_index":969,"title":{},"body":{"entities/User.html":{}}}],["see",{"_index":342,"title":{},"body":{"injectables/AuthService.html":{}}}],["select",{"_index":964,"title":{},"body":{"entities/User.html":{},"injectables/UsersService.html":{}}}],["selected",{"_index":966,"title":{},"body":{"entities/User.html":{}}}],["send",{"_index":1042,"title":{},"body":{"controllers/UsersController.html":{}}}],["sent",{"_index":945,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["separation",{"_index":1090,"title":{},"body":{"modules/UsersModule.html":{}}}],["serves",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/CoreModule.html":{}}}],["service",{"_index":218,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/HashingService.html":{},"injectables/JwtStrategy.html":{},"injectables/SessionsService.html":{},"controllers/UsersController.html":{},"classes/UsersSubscriber.html":{}}}],["services",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["session",{"_index":41,"title":{"entities/Session.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["session.owner",{"_index":979,"title":{},"body":{"entities/User.html":{}}}],["session/entities/session.entity",{"_index":534,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"entities/User.html":{},"modules/UsersModule.html":{}}}],["sessioncontroller",{"_index":885,"title":{},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{}}}],["sessionmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/SessionsModule.html":{}}}],["sessionrepository",{"_index":905,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{}}}],["sessions(undefined",{"_index":912,"title":{},"body":{"injectables/SessionsService.html":{}}}],["sessions.controller",{"_index":897,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions.service",{"_index":896,"title":{},"body":{"modules/SessionsModule.html":{}}}],["sessions/entities/session.entity",{"_index":191,"title":{},"body":{"modules/AuthModule.html":{},"injectables/SessionsService.html":{}}}],["sessions/sessions.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["sessions/sessions.service",{"_index":200,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["sessionscontroller",{"_index":883,"title":{"controllers/SessionsController.html":{}},"body":{"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"coverage.html":{}}}],["sessionservice",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{}}}],["sessionsmodule",{"_index":14,"title":{"modules/SessionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SessionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sessionsservice",{"_index":173,"title":{"injectables/SessionsService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"coverage.html":{},"overview.html":{}}}],["set",{"_index":724,"title":{},"body":{"interfaces/JwtPayload.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["setmetadata",{"_index":1430,"title":{},"body":{"miscellaneous/variables.html":{}}}],["setmetadata(is_public_key",{"_index":1427,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sets",{"_index":920,"title":{},"body":{"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["setting",{"_index":542,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["settings",{"_index":213,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"injectables/JwtStrategy.html":{},"miscellaneous/variables.html":{}}}],["setup",{"_index":549,"title":{},"body":{"modules/DatabaseModule.html":{},"miscellaneous/variables.html":{}}}],["several",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["shared",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["single",{"_index":719,"title":{},"body":{"interfaces/JwtPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["soft",{"_index":846,"title":{},"body":{"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["softly",{"_index":993,"title":{},"body":{"entities/User.html":{}}}],["source",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"modules/EnvModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"controllers/SessionsController.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["space",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["spaces",{"_index":1398,"title":{},"body":{"miscellaneous/variables.html":{}}}],["special",{"_index":472,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["specific",{"_index":212,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/JwtStrategy.html":{},"controllers/SessionsController.html":{},"miscellaneous/variables.html":{}}}],["specified",{"_index":385,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["specifies",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"interfaces/Device.html":{},"injectables/LocalAuthGuard.html":{},"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{},"miscellaneous/variables.html":{}}}],["specify",{"_index":580,"title":{},"body":{"modules/EnvModule.html":{},"modules/SessionsModule.html":{}}}],["splits",{"_index":1391,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src",{"_index":1339,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../common.constants.ts",{"_index":1300,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../env.constants.ts",{"_index":1294,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../ipaddress.decorator.ts",{"_index":1295,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../is",{"_index":1296,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../public.decorator.ts",{"_index":1297,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../to",{"_index":1298,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user",{"_index":1230,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.decorator.ts",{"_index":1299,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:53",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:81",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.module.ts:68",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:102",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:120",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:155",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:64",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:86",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/ipaddress.decorator.ts",{"_index":1168,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/public.decorator.ts",{"_index":1169,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user",{"_index":1170,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/user.decorator.ts",{"_index":1172,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/dto/login",{"_index":797,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/auth/dto/register",{"_index":827,"title":{},"body":{"classes/RegisterUserDto.html":{},"coverage.html":{}}}],["src/auth/guards/jwt",{"_index":672,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":774,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/middlewares/login",{"_index":802,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:42",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":783,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:12",{"_index":787,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:30",{"_index":790,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/core/common/common.module.ts",{"_index":402,"title":{},"body":{"modules/CommonModule.html":{}}}],["src/core/common/decorators/transforms/to",{"_index":1178,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/decorators/validators/is",{"_index":1181,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/common/dto/id.dto.ts",{"_index":657,"title":{},"body":{"classes/IdDto.html":{},"coverage.html":{}}}],["src/core/common/dto/id.dto.ts:23",{"_index":665,"title":{},"body":{"classes/IdDto.html":{}}}],["src/core/common/dto/remove.dto.ts",{"_index":856,"title":{},"body":{"classes/RemoveDto.html":{},"coverage.html":{}}}],["src/core/common/dto/remove.dto.ts:23",{"_index":858,"title":{},"body":{"classes/RemoveDto.html":{}}}],["src/core/common/dto/user",{"_index":1003,"title":{},"body":{"classes/UserChangePasswordDto.html":{},"coverage.html":{}}}],["src/core/common/embedded/registry",{"_index":830,"title":{},"body":{"classes/RegistryDates.html":{},"coverage.html":{}}}],["src/core/common/enums/user",{"_index":1233,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/core/common/hashing/bcrypt.service.ts",{"_index":360,"title":{},"body":{"injectables/BcryptService.html":{},"coverage.html":{}}}],["src/core/common/hashing/bcrypt.service.ts:17",{"_index":383,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/core/common/hashing/bcrypt.service.ts:32",{"_index":372,"title":{},"body":{"injectables/BcryptService.html":{}}}],["src/core/common/hashing/hashing.service.ts",{"_index":643,"title":{},"body":{"injectables/HashingService.html":{},"coverage.html":{}}}],["src/core/common/hashing/hashing.service.ts:16",{"_index":655,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/core/common/hashing/hashing.service.ts:26",{"_index":650,"title":{},"body":{"injectables/HashingService.html":{}}}],["src/core/common/interfaces/custom",{"_index":522,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"coverage.html":{}}}],["src/core/common/interfaces/device.interface.ts",{"_index":563,"title":{},"body":{"interfaces/Device.html":{},"coverage.html":{}}}],["src/core/common/interfaces/jwt",{"_index":715,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/core/common/util/common.constants.ts",{"_index":1189,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/core.module.ts",{"_index":424,"title":{},"body":{"modules/CoreModule.html":{}}}],["src/core/database/database.module.ts",{"_index":541,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["src/core/database/migrations/1725986093329",{"_index":595,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["src/core/env/env.constants.ts",{"_index":1190,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/core/env/env.module.ts",{"_index":577,"title":{},"body":{"modules/EnvModule.html":{}}}],["src/main.ts",{"_index":1191,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/sessions/entities/session.entity.ts",{"_index":863,"title":{},"body":{"entities/Session.html":{},"coverage.html":{}}}],["src/sessions/entities/session.entity.ts:14",{"_index":872,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:20",{"_index":880,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:26",{"_index":866,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:32",{"_index":874,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:38",{"_index":869,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/entities/session.entity.ts:47",{"_index":877,"title":{},"body":{"entities/Session.html":{}}}],["src/sessions/sessions.controller.ts",{"_index":884,"title":{},"body":{"controllers/SessionsController.html":{},"coverage.html":{}}}],["src/sessions/sessions.module.ts",{"_index":894,"title":{},"body":{"modules/SessionsModule.html":{}}}],["src/sessions/sessions.service.ts",{"_index":901,"title":{},"body":{"injectables/SessionsService.html":{},"coverage.html":{}}}],["src/sessions/sessions.service.ts:16",{"_index":908,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:38",{"_index":911,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:63",{"_index":916,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/sessions/sessions.service.ts:88",{"_index":913,"title":{},"body":{"injectables/SessionsService.html":{}}}],["src/users/dto/create",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":943,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts",{"_index":958,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/users/entities/user.entity.ts:16",{"_index":961,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:22",{"_index":965,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:28",{"_index":960,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:34",{"_index":986,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:40",{"_index":968,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:46",{"_index":985,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:52",{"_index":976,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:58",{"_index":971,"title":{},"body":{"entities/User.html":{}}}],["src/users/entities/user.entity.ts:69",{"_index":981,"title":{},"body":{"entities/User.html":{}}}],["src/users/subscribers/users.subscriber.ts",{"_index":1135,"title":{},"body":{"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["src/users/subscribers/users.subscriber.ts:15",{"_index":1142,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:36",{"_index":1151,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:45",{"_index":1145,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/subscribers/users.subscriber.ts:57",{"_index":1150,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["src/users/users.controller.ts",{"_index":1010,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:122",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:156",{"_index":1039,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1022,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1029,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:94",{"_index":1034,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module.ts",{"_index":1076,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service.ts",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:109",{"_index":1118,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:134",{"_index":1120,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:163",{"_index":1116,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:23",{"_index":1101,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:45",{"_index":1106,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:62",{"_index":1107,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:69",{"_index":1112,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:95",{"_index":1114,"title":{},"body":{"injectables/UsersService.html":{}}}],["standard",{"_index":529,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/IdDto.html":{}}}],["start",{"_index":888,"title":{},"body":{"controllers/SessionsController.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["start:dev",{"_index":1270,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1271,"title":{},"body":{"index.html":{}}}],["started",{"_index":1263,"title":{"index.html":{}},"body":{}}],["starts",{"_index":1261,"title":{},"body":{"miscellaneous/functions.html":{}}}],["statement",{"_index":1451,"title":{},"body":{"miscellaneous/variables.html":{}}}],["statements",{"_index":1161,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":328,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{}}}],["status.enum",{"_index":512,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["status.enum.ts",{"_index":1232,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["stay",{"_index":1277,"title":{},"body":{"index.html":{}}}],["still",{"_index":355,"title":{},"body":{"injectables/AuthService.html":{}}}],["stored",{"_index":346,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stores",{"_index":867,"title":{},"body":{"entities/Session.html":{}}}],["storing",{"_index":315,"title":{},"body":{"injectables/AuthService.html":{}}}],["strategies",{"_index":216,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/jwt.strategy",{"_index":198,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":199,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":221,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{}}}],["strength",{"_index":1416,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strict",{"_index":1517,"title":{},"body":{"miscellaneous/variables.html":{}}}],["string",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["stringhash",{"_index":391,"title":{},"body":{"injectables/BcryptService.html":{}}}],["stripped",{"_index":1512,"title":{},"body":{"miscellaneous/variables.html":{}}}],["structure",{"_index":717,"title":{},"body":{"interfaces/JwtPayload.html":{},"classes/UpdateUserDto.html":{}}}],["structured",{"_index":537,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{}}}],["style",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["style/formatting",{"_index":1349,"title":{},"body":{"miscellaneous/variables.html":{}}}],["submits",{"_index":791,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["subscriber",{"_index":1137,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["subscribers/users.subscriber",{"_index":1093,"title":{},"body":{"modules/UsersModule.html":{}}}],["successful",{"_index":748,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{}}}],["successfully",{"_index":1021,"title":{},"body":{"controllers/UsersController.html":{}}}],["such",{"_index":545,"title":{},"body":{"modules/DatabaseModule.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":703,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":714,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["support",{"_index":343,"title":{},"body":{"injectables/AuthService.html":{},"modules.html":{}}}],["suspend",{"_index":487,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/GenerateTables1725986093329.html":{},"miscellaneous/enumerations.html":{}}}],["suspended",{"_index":1253,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["svg",{"_index":1285,"title":{},"body":{"modules.html":{}}}],["switch",{"_index":1450,"title":{},"body":{"miscellaneous/variables.html":{}}}],["system",{"_index":959,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":607,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["tables.ts",{"_index":596,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"coverage.html":{}}}],["tables.ts:4",{"_index":599,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:48",{"_index":602,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tables.ts:6",{"_index":605,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1196,"title":{},"body":{"coverage.html":{}}}],["tablet",{"_index":572,"title":{},"body":{"interfaces/Device.html":{}}}],["tags",{"_index":1011,"title":{},"body":{"controllers/UsersController.html":{}}}],["take",{"_index":490,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["taken",{"_index":1086,"title":{},"body":{"modules/UsersModule.html":{}}}],["takes",{"_index":651,"title":{},"body":{"injectables/HashingService.html":{},"injectables/LocalStrategy.html":{},"miscellaneous/variables.html":{}}}],["temporarily",{"_index":1252,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["test",{"_index":517,"title":{},"body":{"classes/CreateUserDto.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["test'})@isoptional()@length(0",{"_index":467,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test:covsupport",{"_index":1276,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1275,"title":{},"body":{"index.html":{}}}],["test@1234",{"_index":515,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@1234'})@ispassword",{"_index":477,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com",{"_index":513,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test@gmail.com'})@isemail",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122",{"_index":514,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["test_122'})@isusername",{"_index":494,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["testing",{"_index":559,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["tests",{"_index":1273,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["text",{"_index":375,"title":{},"body":{"injectables/BcryptService.html":{}}}],["this.authservice.changepassword(userid",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.getprofile(userid",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login(user",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(registeruserdto",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validatejwt",{"_index":772,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.authservice.validatelocal(email",{"_index":795,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.datasource.getrepository(session).findone",{"_index":933,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.findonebyid(id",{"_index":1132,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare",{"_index":1129,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.hashingservice.compare(password",{"_index":349,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.hashingservice.hash(user.password",{"_index":1157,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["this.jwtservice.sign(payload",{"_index":314,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.reflector.getallandoverride(is_public_key",{"_index":706,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["this.registrydates.deleteat",{"_index":1002,"title":{},"body":{"entities/User.html":{}}}],["this.sessionrepository.create",{"_index":924,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionrepository.save(session",{"_index":931,"title":{},"body":{"injectables/SessionsService.html":{}}}],["this.sessionservice.create(user.id",{"_index":316,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.sessionservice.validate(user.id",{"_index":357,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.create",{"_index":1121,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.find",{"_index":1124,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":939,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["this.userrepository.findoneby",{"_index":1127,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.preload",{"_index":1128,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.remove(user",{"_index":1134,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.save(user",{"_index":1123,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.softremove(user",{"_index":1133,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.update",{"_index":1131,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.create",{"_index":303,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findone",{"_index":326,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findonebyid(id",{"_index":318,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.updatepassword(id",{"_index":323,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.create(createuserdto",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findall",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findonebyid(id",{"_index":1064,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.remove(id",{"_index":1072,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.update(id",{"_index":1067,"title":{},"body":{"controllers/UsersController.html":{}}}],["through",{"_index":693,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["throw",{"_index":309,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":329,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["time",{"_index":840,"title":{},"body":{"classes/RegistryDates.html":{},"entities/Session.html":{}}}],["timestamp",{"_index":614,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["toboolean",{"_index":1180,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["toboolean(obj[key",{"_index":1460,"title":{},"body":{"miscellaneous/variables.html":{}}}],["token",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["tokens",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":1278,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["transform",{"_index":1458,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":1444,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformer",{"_index":816,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"dependencies.html":{}}}],["transformoptions",{"_index":1525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["treated",{"_index":1428,"title":{},"body":{"miscellaneous/variables.html":{}}}],["true",{"_index":590,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["try",{"_index":299,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["two",{"_index":1436,"title":{},"body":{"miscellaneous/variables.html":{}}}],["type",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"modules/DatabaseModule.html":{},"interfaces/Device.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/HashingService.html":{},"classes/IdDto.html":{},"injectables/JwtAuthGuard.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RegistryDates.html":{},"classes/RemoveDto.html":{},"entities/Session.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"classes/UserChangePasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":203,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{},"modules/DatabaseModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":205,"title":{},"body":{"modules/AuthModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forrootasync(databaseconfig.asprovider",{"_index":562,"title":{},"body":{"modules/DatabaseModule.html":{}}}],["types",{"_index":1204,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["types/bcrypt",{"_index":1209,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":1211,"title":{},"body":{"dependencies.html":{}}}],["typically",{"_index":1384,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unauthorizedexception",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unauthorizedexception('invalid",{"_index":352,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["unchanged",{"_index":1454,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":573,"title":{},"body":{"interfaces/Device.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["underscores",{"_index":1486,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unexpected",{"_index":1519,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":618,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"entities/Session.html":{},"entities/User.html":{},"miscellaneous/variables.html":{}}}],["uniquely",{"_index":566,"title":{},"body":{"interfaces/Device.html":{},"interfaces/JwtPayload.html":{}}}],["unit",{"_index":1272,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"injectables/SessionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":1293,"title":{},"body":{"properties.html":{}}}],["up",{"_index":543,"title":{},"body":{"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{}}}],["up(queryrunner",{"_index":604,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["update",{"_index":641,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["update(@param('id",{"_index":1066,"title":{},"body":{"controllers/UsersController.html":{}}}],["update(id",{"_index":1117,"title":{},"body":{"injectables/UsersService.html":{}}}],["update(undefined",{"_index":1040,"title":{},"body":{"controllers/UsersController.html":{}}}],["updated",{"_index":853,"title":{},"body":{"classes/RegistryDates.html":{},"classes/UpdateUserDto.html":{},"classes/UsersSubscriber.html":{}}}],["updated.'})@isstring()@isuuid",{"_index":950,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["updatedat",{"_index":629,"title":{},"body":{"classes/GenerateTables1725986093329.html":{},"classes/RegistryDates.html":{},"entities/User.html":{}}}],["updatedatecolumn",{"_index":850,"title":{},"body":{"classes/RegistryDates.html":{}}}],["updateevent",{"_index":1149,"title":{},"body":{"classes/UsersSubscriber.html":{}}}],["updatepassword",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["updatepassword(id",{"_index":1119,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":1130,"title":{},"body":{"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["updateuserdto",{"_index":942,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updating",{"_index":947,"title":{},"body":{"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["upon",{"_index":843,"title":{},"body":{"classes/RegistryDates.html":{}}}],["uppercase",{"_index":1424,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uq_232f8e85d7633bd6ddfad421696",{"_index":617,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_78a916df40e02a9deb1c4b75edb",{"_index":632,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["uq_e12875dfb3b1d92d7d7c5377e22",{"_index":631,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["url",{"_index":1363,"title":{},"body":{"miscellaneous/variables.html":{}}}],["use",{"_index":407,"title":{},"body":{"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["use(req",{"_index":804,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["useclass",{"_index":229,"title":{},"body":{"modules/AuthModule.html":{},"modules/CommonModule.html":{}}}],["used",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"classes/UpdateUserDto.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["useful",{"_index":1515,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(jwtauthguard)@get('profile",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":40,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"classes/GenerateTables1725986093329.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["user\"(\"id",{"_index":639,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["user's",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user'})@apiresponse({status",{"_index":1019,"title":{},"body":{"controllers/UsersController.html":{}}}],["user('id",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["user.dto",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":800,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.dto.ts:13",{"_index":828,"title":{},"body":{"classes/RegisterUserDto.html":{}}}],["user.dto.ts:19",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":951,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:31",{"_index":495,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:42",{"_index":478,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:54",{"_index":489,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:65",{"_index":468,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":799,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["user.id",{"_index":313,"title":{},"body":{"injectables/AuthService.html":{},"entities/Session.html":{}}}],["user.password",{"_index":350,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"classes/UsersSubscriber.html":{}}}],["user.status",{"_index":339,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.status.tolowercase",{"_index":341,"title":{},"body":{"injectables/AuthService.html":{}}}],["user?.[data",{"_index":1472,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useragent",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userchangepassworddto",{"_index":84,"title":{"classes/UserChangePasswordDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserChangePasswordDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userconfig",{"_index":1301,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userentity",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["userid",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["username",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"modules/DatabaseModule.html":{},"classes/GenerateTables1725986093329.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterUserDto.html":{},"entities/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["username.decorator",{"_index":510,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/RegisterUserDto.html":{}}}],["username.decorator.ts",{"_index":1185,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["username/password",{"_index":223,"title":{},"body":{"modules/AuthModule.html":{}}}],["usernamefield",{"_index":794,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["usernameregex",{"_index":1187,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["usernames",{"_index":1435,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":907,"title":{},"body":{"injectables/SessionsService.html":{},"injectables/UsersService.html":{}}}],["userrole",{"_index":975,"title":{},"body":{"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userrole.user",{"_index":992,"title":{},"body":{"entities/User.html":{}}}],["users",{"_index":776,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["users.controller",{"_index":1094,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/user.entity",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"entities/Session.html":{},"modules/SessionsModule.html":{},"injectables/SessionsService.html":{},"classes/UsersSubscriber.html":{}}}],["users/users.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["users/users.service",{"_index":202,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["userscontroller",{"_index":1009,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["usersmodule",{"_index":15,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":174,"title":{"injectables/UsersService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["userssubscriber",{"_index":1082,"title":{"classes/UsersSubscriber.html":{}},"body":{"modules/UsersModule.html":{},"classes/UsersSubscriber.html":{},"coverage.html":{}}}],["userstatus",{"_index":481,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["userstatus.activate",{"_index":340,"title":{},"body":{"injectables/AuthService.html":{}}}],["userstatus.deactivate",{"_index":991,"title":{},"body":{"entities/User.html":{}}}],["uses",{"_index":766,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/RegistryDates.html":{},"miscellaneous/variables.html":{}}}],["usevalue",{"_index":418,"title":{},"body":{"modules/CommonModule.html":{}}}],["using",{"_index":208,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/BcryptService.html":{},"modules/DatabaseModule.html":{},"modules/EnvModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"modules/SessionsModule.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["util/common.constants",{"_index":414,"title":{},"body":{"modules/CommonModule.html":{}}}],["utility",{"_index":1455,"title":{},"body":{"miscellaneous/variables.html":{}}}],["utilizes",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["uuid",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"interfaces/JwtPayload.html":{},"entities/Session.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["uuid'})@apiquery({name",{"_index":1037,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid'})@apiresponse({status",{"_index":1033,"title":{},"body":{"controllers/UsersController.html":{}}}],["uuid_generate_v4",{"_index":609,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["valid",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"injectables/LocalStrategy.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validate",{"_index":592,"title":{},"body":{"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RemoveDto.html":{},"injectables/SessionsService.html":{},"miscellaneous/variables.html":{}}}],["validate(email",{"_index":789,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(logindto",{"_index":824,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validate(req",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(userid",{"_index":915,"title":{},"body":{"injectables/SessionsService.html":{}}}],["validateby",{"_index":1406,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validatejwt",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatejwt(undefined",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["validatelocal",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{}}}],["validatelocal(email",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{}}}],["validates",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/SessionsService.html":{}}}],["validating",{"_index":660,"title":{},"body":{"classes/IdDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"injectables/SessionsService.html":{},"classes/UpdateUserDto.html":{},"miscellaneous/variables.html":{}}}],["validation",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{},"modules/CommonModule.html":{},"modules/EnvModule.html":{},"injectables/JwtStrategy.html":{},"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["validation.middleware",{"_index":197,"title":{},"body":{"modules/AuthModule.html":{}}}],["validation.middleware.ts",{"_index":803,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"coverage.html":{}}}],["validation.middleware.ts:23",{"_index":808,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{}}}],["validation_pipe_options",{"_index":412,"title":{},"body":{"modules/CommonModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["validationoptions",{"_index":1404,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationpipe",{"_index":409,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipe(validation_pipe_options",{"_index":419,"title":{},"body":{"modules/CommonModule.html":{}}}],["validationpipeoptions",{"_index":1510,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validationschema",{"_index":593,"title":{},"body":{"modules/EnvModule.html":{}}}],["validator",{"_index":505,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/IdDto.html":{},"classes/LoginUserDto.html":{},"injectables/LoginValidationMiddleware.html":{},"classes/RegisterUserDto.html":{},"classes/RemoveDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":390,"title":{},"body":{"injectables/BcryptService.html":{},"classes/GenerateTables1725986093329.html":{},"classes/IdDto.html":{},"classes/RemoveDto.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":484,"title":{},"body":{"classes/CreateUserDto.html":{},"miscellaneous/variables.html":{}}}],["var_name",{"_index":588,"title":{},"body":{"modules/EnvModule.html":{}}}],["variable",{"_index":1163,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":587,"title":{"miscellaneous/variables.html":{}},"body":{"modules/EnvModule.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["varying",{"_index":611,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(30",{"_index":626,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["varying(50",{"_index":625,"title":{},"body":{"classes/GenerateTables1725986093329.html":{}}}],["verification",{"_index":743,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["version",{"_index":540,"title":{},"body":{"interfaces/CustomRequest.html":{},"interfaces/CustomUser.html":{},"interfaces/Device.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["via",{"_index":778,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["viewing",{"_index":1245,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["violations",{"_index":1255,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["void",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["w][\\w.]{3,30",{"_index":1434,"title":{},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1268,"title":{},"body":{"index.html":{}}}],["way",{"_index":1523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["web",{"_index":718,"title":{},"body":{"interfaces/JwtPayload.html":{},"miscellaneous/variables.html":{}}}],["website",{"_index":1281,"title":{},"body":{"index.html":{}}}],["whenever",{"_index":854,"title":{},"body":{"classes/RegistryDates.html":{}}}],["whether",{"_index":378,"title":{},"body":{"injectables/BcryptService.html":{},"injectables/HashingService.html":{}}}],["white",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whitelist",{"_index":821,"title":{},"body":{"injectables/LoginValidationMiddleware.html":{},"miscellaneous/variables.html":{}}}],["whitelisted",{"_index":1514,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whole",{"_index":1471,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whose",{"_index":1251,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["windows",{"_index":1496,"title":{},"body":{"miscellaneous/variables.html":{}}}],["within",{"_index":785,"title":{},"body":{"injectables/LocalStrategy.html":{},"modules/UsersModule.html":{}}}],["without",{"_index":353,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"classes/RegistryDates.html":{}}}],["word",{"_index":1441,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":1383,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x/.test(useragent",{"_index":1483,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x11/i.test(useragent",{"_index":1503,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yarn",{"_index":1265,"title":{},"body":{"index.html":{}}}],["z\\d@$!%*?&]{8,20",{"_index":1421,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[@$!%*?&])[a",{"_index":1419,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z])(?=.*[a",{"_index":1418,"title":{},"body":{"miscellaneous/variables.html":{}}}],["za",{"_index":1420,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zoom",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CommonModule.html":{},"modules/CoreModule.html":{},"modules/SessionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AppModule serves as the root module for the application.\nIt imports several feature modules, including:\n\nCoreModule: Contains shared resources and services used across the app.\nAuthModule: Manages authentication logic and user session management.\nUsersModule: Handles user-related operations and data management.\nSessionModule: Manages user sessions and related functionalities.\n\nThis module is the main entry point for the application and orchestrates\nthe integration of various features.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CoreModule\n                        \n                        \n                            SessionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AuthModule } from './auth/auth.module';\nimport { UsersModule } from './users/users.module';\nimport { SessionsModule } from './sessions/sessions.module';\nimport { CoreModule } from './core/core.module';\n\n/**\n * AppModule serves as the root module for the application.\n * It imports several feature modules, including:\n * - CoreModule: Contains shared resources and services used across the app.\n * - AuthModule: Manages authentication logic and user session management.\n * - UsersModule: Handles user-related operations and data management.\n * - SessionModule: Manages user sessions and related functionalities.\n *\n * This module is the main entry point for the application and orchestrates\n * the integration of various features.\n */\n@Module({\n  imports: [CoreModule, AuthModule, UsersModule, SessionsModule]\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                AuthController is responsible for handling authentication-related routes in the application\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                changePassword\n                            \n                            \n                                    \n                                    \n                                getProfile\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                login\n                            \n                            \n                                    \n                                    \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(userId: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(HttpStatus.OK)@UseGuards(JwtAuthGuard)@Post('change-password')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:81\n                        \n                    \n\n\n            \n                \n                        Change user password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(userId: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:68\n                        \n                    \n\n\n            \n                \n                        Get the user profile\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    UserID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: UserEntity, ip: string, device: Device)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@HttpCode(HttpStatus.OK)@UseGuards(LocalAuthGuard)@Post('login')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:53\n                        \n                    \n\n\n            \n                \n                        Login an existing user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            UserEntity\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User entity\n\n                                            \n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    IP address\n\n                                            \n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Device is object\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Public()@Post('register')\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:38\n                        \n                    \n\n\n            \n                \n                        Register a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpCode,\n  HttpStatus,\n  Post,\n  UseGuards\n} from '@nestjs/common';\nimport { User as UserEntity } from 'users/entities/user.entity';\nimport { AuthService } from './auth.service';\nimport { IpAddress } from './decorators/ipAddress.decorator';\nimport { Public } from './decorators/public.decorator';\nimport { UserAgent } from './decorators/user-agent.decorator';\nimport { User } from './decorators/user.decorator';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\nimport { ApiTags } from '@nestjs/swagger';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthController is responsible for handling authentication-related routes in the application\n */\n@Controller('auth')\n@ApiTags('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Register a new user\n   * @param registerUserDto\n   * @returns User entity\n   */\n  @Public()\n  @Post('register')\n  register(@Body() registerUserDto: RegisterUserDto) {\n    return this.authService.register(registerUserDto);\n  }\n\n  /**\n   * Login an existing user\n   * @param user User entity\n   * @param ip IP address\n   * @param device Device is object\n   * @returns\n   */\n  @Public()\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(LocalAuthGuard)\n  @Post('login')\n  login(\n    @User() user: UserEntity,\n    @IpAddress() ip: string,\n    @UserAgent() device: Device\n  ) {\n    return this.authService.login(user, ip, device);\n  }\n\n  /**\n   * Get the user profile\n   * @param userId UserID is string and UUID format\n   * @returns\n   */\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  getProfile(@User('id') userId: string) {\n    return this.authService.getProfile(userId);\n  }\n\n  /**\n   * Change user password\n   * @param userId UserID is string and UUID format\n   * @param changePasswordDto\n   * @returns\n   */\n  @HttpCode(HttpStatus.OK)\n  @UseGuards(JwtAuthGuard)\n  @Post('change-password')\n  changePassword(\n    @User('id') userId: string,\n    @Body() userChangePasswordDto: UserChangePasswordDto\n  ) {\n    return this.authService.changePassword(userId, userChangePasswordDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nAuthModule -->\n\nSessionsService->AuthModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            AuthModule is responsible for all authentication-related functionalities\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                        \n                            SessionsService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        configure\n                        \n                    \n                \n            \n            \n                \nconfigure(consumer: MiddlewareConsumer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.module.ts:68\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                consumer\n                                            \n                                                        MiddlewareConsumer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n\n\n    \n        import { MiddlewareConsumer, Module, NestModule } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { APP_GUARD } from '@nestjs/core';\nimport { JwtModule } from '@nestjs/jwt';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from '../sessions/entities/session.entity';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport jwtConfig from './config/jwt.config';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LoginValidationMiddleware } from './middlewares/login-validation.middleware';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { SessionsService } from 'sessions/sessions.service';\nimport { CommonModule } from 'core/common/common.module';\nimport { UsersService } from 'users/users.service';\n\n/**\n * AuthModule is responsible for all authentication-related functionalities\n */\n@Module({\n  imports: [\n    // Import TypeORM module for User and Session entities\n    TypeOrmModule.forFeature([User, Session]),\n\n    // Register JWT module asynchronously using configuration from jwtConfig\n    JwtModule.registerAsync(jwtConfig.asProvider()),\n\n    // Import configuration module for environment-specific settings\n    ConfigModule.forFeature(jwtConfig),\n\n    CommonModule\n  ],\n  // Define the controllers related to authentication\n  controllers: [AuthController],\n\n  // Providers for authentication services, strategies, and guards\n  providers: [\n    // Service to handle authenticate user\n    AuthService,\n\n    // Service to handle user management\n    UsersService,\n\n    // Service to handle user sessions\n    SessionsService,\n\n    // Strategy for local (username/password) authentication\n    LocalStrategy,\n\n    // Strategy for JWT authentication\n    JwtStrategy,\n\n    // Apply JwtAuthGuard as a global guard for protecting routes\n    {\n      provide: APP_GUARD,\n      useClass: JwtAuthGuard\n    }\n  ]\n})\n\n/**\n * AuthModule implements NestModule, allowing for middleware configuration\n */\nexport class AuthModule implements NestModule {\n  // Configure the middleware for specific routes\n  configure(consumer: MiddlewareConsumer) {\n    // Apply LoginValidationMiddleware to the 'auth/login' route\n    consumer.apply(LoginValidationMiddleware).forRoutes('auth/login');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                AuthService is a service responsible for all authentication-related functionalities\nin the application, including user registration, login, profile retrieval\nand JWT validation. It utilizes various services and\nrepositories provided by NestJS and TypeORM to interact with the database\nand manage user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changePassword\n                            \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                            \n                                    Async\n                                validateJwt\n                            \n                            \n                                    Async\n                                validateLocal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, hashingService: HashingService, sessionService: SessionsService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:25\n                            \n                        \n\n                \n                    \n                            Injecting dependencies using constructor injection\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                UserService for user management\n\n                                                        \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                        \n                                                \n                                                \n                                                        sessionService\n                                                  \n                                                        \n                                                                        SessionsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SessionService for managing user sessions\n\n                                                        \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                JwtService for generating JWT tokens\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    changePassword(id: string, userChangePasswordDto: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:102\n                        \n                    \n\n\n            \n                \n                        Changes a user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userChangePasswordDto\n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getProfile\n                        \n                    \n                \n            \n            \n                \n                        \n                    getProfile(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Registers a new user ****\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID is string and UUID format\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(user: User, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:64\n                        \n                    \n\n\n            \n                \n                        Login user and generates a JWT token\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user and JWT token\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                        \n                    register(registerUserDto: RegisterUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:47\n                        \n                    \n\n\n            \n                \n                        Registers a new user ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                registerUserDto\n                                            \n                                                            RegisterUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateJwt\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateJwt(undefined: JwtPayload, jwtToken: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:155\n                        \n                    \n\n\n            \n                \n                        Validates a JWT token and retrieves the user information ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                jwtToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                UserId and object of session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validateLocal\n                        \n                    \n                \n            \n            \n                \n                        \n                    validateLocal(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:120\n                        \n                    \n\n\n            \n                \n                        Validates a user's credentials using email or username and password ***\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Object of user data\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { SessionsService } from 'sessions/sessions.service';\nimport { User } from 'users/entities/user.entity';\nimport { RegisterUserDto } from './dto/register-user.dto';\nimport { HashingService } from '../core/common/hashing/hashing.service';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { UsersService } from 'users/users.service';\nimport { UserChangePasswordDto } from 'core/common/dto/user-change-password.dto';\n\n/**\n * AuthService is a service responsible for all authentication-related functionalities\n * in the application, including user registration, login, profile retrieval\n * and JWT validation. It utilizes various services and\n * repositories provided by NestJS and TypeORM to interact with the database\n * and manage user sessions.\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Injecting dependencies using constructor injection\n   * @param userService UserService for user management\n   * @param sessionService SessionService for managing user sessions\n   * @param jwtService JwtService for generating JWT tokens\n   */\n  constructor(\n    private readonly userService: UsersService,\n    // Injecting the HashingService for password hashing\n    private readonly hashingService: HashingService,\n    // Injecting the SessionService for managing user sessions\n    private readonly sessionService: SessionsService,\n    // Injecting the JwtService for generating JWT tokens\n    private readonly jwtService: JwtService\n  ) {}\n\n  /**\n   * Registers a new user ***\n   * @param registerUserDto\n   * @returns Object of user data\n   */\n  async register(registerUserDto: RegisterUserDto) {\n    try {\n      // Creates a new user and saves to database from the RegisterUserDto\n      return await this.userService.create({ ...registerUserDto });\n    } catch (error) {\n      // Rethrows any error that occurs during registration\n      throw error;\n    }\n  }\n\n  /**\n   * Login user and generates a JWT token\n   * @param user\n   * @param ip\n   * @param device\n   * @returns Object of user and JWT token\n   */\n  async login(user: User, ip: string, device: Device) {\n    // Creates a payload for the JWT token, containing the user's ID\n    const payload = { id: user.id };\n\n    // Generates a JWT token using the JwtService\n    const token = this.jwtService.sign(payload);\n\n    // Creates a new session for the user, storing the token, IP address, and device information\n    await this.sessionService.create(user.id, token, ip, device);\n\n    // Returns the user data and the JWT token\n    return {\n      ...user,\n      token: this.jwtService.sign(payload)\n    };\n  }\n\n  /**\n   * Registers a new user ****\n   * @param id The ID is string and UUID format\n   * @returns Object of user data\n   */\n  async getProfile(id: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Removes the ID from the user object, as it's not needed in the profile\n    delete user.id;\n\n    // Returns the user's profile data\n    return user;\n  }\n\n  /**\n   * Changes a user's password\n   * @param id\n   * @param userChangePasswordDto\n   */\n  async changePassword(\n    id: string,\n    userChangePasswordDto: UserChangePasswordDto\n  ) {\n    try {\n      return await this.userService.updatePassword(id, userChangePasswordDto);\n    } catch (error) {\n      // Rethrows any error that occurs during changePassword\n      throw error;\n    }\n  }\n\n  /**\n   * Validates a user's credentials using email or username and password ***\n   * @param email\n   * @param password\n   * @returns Object of user data\n   */\n  async validateLocal(email: string, password: string) {\n    // Finds the user by their email or username, retrieving specific fields\n    const user = await this.userService.findOne(\n      [{ email }, { username: email }],\n      ['id', 'role', 'status', 'password']\n    );\n\n    // Throws a NotFoundException if the user is not found\n    if (!user) throw new NotFoundException('User not found');\n\n    // // Checks if the user's account is activated (this part is commented out, but it could be used to implement user account activation)\n    // if (user.status !== UserStatus.ACTIVATE)\n    //   throw new UnauthorizedException(\n    //     `Your account is ${user.status.toLowerCase()} see support for reviewing your account`\n    //   );\n\n    // Compares the provided password with the stored password hash\n    const isMatch = await this.hashingService.compare(password, user.password);\n\n    // Throws an UnauthorizedException if the password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // Removes the password from the user object, as it's not needed for authentication\n    delete user.password;\n\n    // Returns the user information without the password\n    return user;\n  }\n\n  /**\n   * Validates a JWT token and retrieves the user information ***\n   * @param param0\n   * @param jwtToken\n   * @returns UserId and object of session\n   */\n  async validateJwt({ id }: JwtPayload, jwtToken: string) {\n    // Finds the user by their ID\n    const user = await this.userService.findOneById(id);\n\n    // Throws an UnauthorizedException if the user is not found\n    if (!user) throw new UnauthorizedException();\n\n    // Validates the JWT token and checks if the session is still active\n    const session = await this.sessionService.validate(user.id, jwtToken);\n\n    // Throws an UnauthorizedException if the session is invalid\n    if (!session) throw new UnauthorizedException();\n\n    // Creates a CustomUser object containing the user's ID and the session information\n    const res: CustomUser = { id, session };\n\n    // Returns the CustomUser object\n    return res;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BcryptService.html":{"url":"injectables/BcryptService.html","title":"injectable - BcryptService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BcryptService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/hashing/bcrypt.service.ts\n        \n\n\n            \n                Description\n            \n            \n                BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\nThe Injectable decorator allows NestJS to manage the lifecycle of the service.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compare\n                            \n                            \n                                    Async\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        compare\n                        \n                    \n                \n            \n            \n                \ncompare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/bcrypt.service.ts:32\n                        \n                    \n\n\n            \n                \n                        Method to compare a plain text data with an encrypted hash.\nReturns a boolean indicating whether the data matches the encrypted hash.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer, roundsSalt: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/bcrypt.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                roundsSalt\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    10\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                stringHash\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { HashingService } from './hashing.service';\n\n/**\n * BcryptService is a class responsible for hashing and comparing passwords using the bcrypt algorithm.\n * The Injectable decorator allows NestJS to manage the lifecycle of the service.\n */\n@Injectable()\nexport class BcryptService implements HashingService {\n  /**\n   * Method to hash a given data (string or Buffer) with a specified number of salt rounds (default is 10).\n   * @param data\n   * @param roundsSalt\n   * @returns stringHash\n   */\n  async hash(data: string | Buffer, roundsSalt: number = 10) {\n    // Generate a salt with the specified number of rounds.\n    const getSalt = await bcrypt.genSalt(roundsSalt);\n\n    // Return the hashed data using the generated salt.\n    return bcrypt.hash(data, getSalt);\n  }\n\n  /**\n   * Method to compare a plain text data with an encrypted hash.\n   * Returns a boolean indicating whether the data matches the encrypted hash.\n   * @param data\n   * @param encrypted\n   * @returns boolean\n   */\n  compare(data: string | Buffer, encrypted: string) {\n    return bcrypt.compare(data, encrypted);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CommonModule.html":{"url":"modules/CommonModule.html","title":"module - CommonModule","body":"\n                   \n\n\n\n\n    Modules\n    CommonModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\n\nHashingService \n\nHashingService \n\n\n\nCommonModule\n\nCommonModule\n\nHashingService  -->\n\nCommonModule->HashingService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/common/common.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a module called CommonModule\nProvide a global validation pipe for the application, which is injected into the NestJS application context\nUse a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n\n        \n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            HashingService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module, ValidationPipe } from '@nestjs/common';\nimport { APP_PIPE } from '@nestjs/core';\nimport { VALIDATION_PIPE_OPTIONS } from './util/common.constants';\nimport { HashingService } from './hashing/hashing.service';\nimport { BcryptService } from './hashing/bcrypt.service';\n\n/**\n * Define a module called CommonModule\n * Provide a global validation pipe for the application, which is injected into the NestJS application context\n * Use a new instance of ValidationPipe with custom options defined in VALIDATION_PIPE_OPTIONS\n */\n@Module({\n  providers: [\n    {\n      // Use BcryptService as the implementation of HashingService\n      provide: HashingService,\n      useClass: BcryptService\n    },\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe(VALIDATION_PIPE_OPTIONS)\n    }\n  ],\n  // Export the HashingService for use in other modules\n  exports: [HashingService]\n})\nexport class CommonModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CoreModule.html":{"url":"modules/CoreModule.html","title":"module - CoreModule","body":"\n                   \n\n\n\n\n    Modules\n    CoreModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nCoreModule\n\nCoreModule\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/core.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            The CoreModule is a central module for the application,\nresponsible for importing and aggregating other key modules.\nIt serves as a foundation for the application's functionality\nby encapsulating and organizing related modules, promoting\na modular architecture where features can be easily managed and maintained.\n\n        \n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                        \n                            DatabaseModule\n                        \n                        \n                            EnvModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CommonModule } from './common/common.module';\nimport { DatabaseModule } from './database/database.module';\nimport { EnvModule } from './env/env.module';\n\n/**\n * The CoreModule is a central module for the application,\n * responsible for importing and aggregating other key modules.\n * It serves as a foundation for the application's functionality\n * by encapsulating and organizing related modules, promoting\n * a modular architecture where features can be easily managed and maintained.\n */\n@Module({\n  // Importing essential modules that provide common functionalities,\n  // database access, and environment configuration.\n  imports: [CommonModule, DatabaseModule, EnvModule]\n})\nexport class CoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer Object for creating a new user\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                name\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                    Optional\n                                status\n                            \n                            \n                                    \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Get valid email address', example: 'test@gmail.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:19\n                        \n                    \n\n            \n                \n                    Specifies that 'email' is a required property, must be a valid email format\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'Name limited to a maximum of 30 characters', example: 'mohmadreza test'})@IsOptional()@Length(0, 30)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:65\n                        \n                    \n\n            \n                \n                    Optional 'name' property with a maximum length of 30 characters\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters', example: 'test@1234'})@IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:42\n                        \n                    \n\n            \n                \n                    Specifies that 'password' is a required property, with specific content and length requirements\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                            Optional\n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({enum: UserStatus, description: 'Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'', example: 'ACTIVATE'})@IsOptional()@IsEnum(UserStatus)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:54\n                        \n                    \n\n            \n                \n                    Optional property 'status' that can take specific enum values defined in UserStatus\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters', example: 'test_122'})@IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:31\n                        \n                    \n\n            \n                \n                    Specifies that 'username' is a required property\nMust adhere to certain formatting and length constraints\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { IsEmail, IsEnum, IsOptional, Length } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\n\n/**\n * Data Transfer Object for creating a new user\n */\nexport class CreateUserDto {\n  /**\n   * Specifies that 'email' is a required property, must be a valid email format\n   */\n  @ApiProperty({\n    description: 'Get valid email address',\n    example: 'test@gmail.com'\n  })\n  @IsEmail()\n  readonly email: string;\n\n  /**\n   * Specifies that 'username' is a required property\n   * Must adhere to certain formatting and length constraints\n   */\n  @ApiProperty({\n    description:\n      'Username lowercase characters, numbers & special characters (_), length between 3 and 30 characters',\n    example: 'test_122'\n  })\n  @IsUsername()\n  readonly username: string;\n\n  /**\n   * Specifies that 'password' is a required property, with specific content and length requirements\n   */\n  @ApiProperty({\n    description:\n      'Password includes numbers, characters, special characters (@#$%^!&*(_+)=) & length between 8 and 20 characters',\n    example: 'test@1234'\n  })\n  @IsPassword()\n  readonly password: string;\n\n  /**\n   * Optional property 'status' that can take specific enum values defined in UserStatus\n   */\n  @ApiPropertyOptional({\n    enum: UserStatus,\n    description: \"Possible values are: 'ACTIVATE', 'DEACTIVATE', & 'SUSPEND'\",\n    example: 'ACTIVATE'\n  })\n  @IsOptional()\n  @IsEnum(UserStatus)\n  readonly status?: UserStatus;\n\n  /**\n   * Optional 'name' property with a maximum length of 30 characters\n   */\n  @ApiPropertyOptional({\n    description: 'Name limited to a maximum of 30 characters',\n    example: 'mohmadreza test'\n  })\n  @IsOptional()\n  @Length(0, 30)\n  readonly name?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomRequest.html":{"url":"interfaces/CustomRequest.html","title":"interface - CustomRequest","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomRequest\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Extending the built-in Request type from Express to create a CustomRequest interface.\nThis interface includes all properties of the standard Request object,\nwith an additional 'user' property that conforms to the CustomUser interface.\n\n            \n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         CustomUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CustomUser\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The User object is id and session of current user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CustomUser.html":{"url":"interfaces/CustomUser.html","title":"interface - CustomUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CustomUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/custom-request.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Defining a CustomUser interface to represent a user object.\nThis interface includes a user ID and a session object,\nallowing for structured user information with session details.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            session\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of current user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        session\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        session:         Session\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Session\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The Session object of current user like token, expirationDate, device and IP address\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Request } from 'express';\nimport { Session } from 'session/entities/session.entity';\n\n/**\n * Defining a CustomUser interface to represent a user object.\n * This interface includes a user ID and a session object,\n * allowing for structured user information with session details.\n * @property {string} id - The ID of current user.\n * @property {string} session - The Session object of current user like token, expirationDate, device and IP address.\n */\nexport interface CustomUser {\n  /**\n   * The ID of current user\n   */\n  readonly id: string;\n\n  /**\n   * The Session object of current user like token, expirationDate, device and IP address\n   */\n  readonly session: Session;\n}\n\n/**\n * Extending the built-in Request type from Express to create a CustomRequest interface.\n * This interface includes all properties of the standard Request object,\n * with an additional 'user' property that conforms to the CustomUser interface.\n * @property {string} user - The user of the CustomUser.\n * @property {string} version - The version of the device.\n */\nexport interface CustomRequest extends Request {\n  /**\n   * The User object is id and session of current user\n   */\n  readonly user: CustomUser;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DatabaseModule.html":{"url":"modules/DatabaseModule.html","title":"module - DatabaseModule","body":"\n                   \n\n\n\n\n    Modules\n    DatabaseModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/database/database.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            DatabaseModule is a NestJS module responsible for setting up\nthe database connection using TypeORM.\nIt imports the TypeOrmModule with a configuration provided\nasynchronously. The configuration options, such as the database\ntype, host, username, password, and others, are defined in\nthe databaseConfig module.\nThis setup allows for better flexibility and management of\ndatabase connection settings, making it easier to adapt to\ndifferent environments (e.g., development, testing, production).\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport databaseConfig from './config/database.config';\n\n/**\n * DatabaseModule is a NestJS module responsible for setting up\n * the database connection using TypeORM.\n *\n * It imports the TypeOrmModule with a configuration provided\n * asynchronously. The configuration options, such as the database\n * type, host, username, password, and others, are defined in\n * the databaseConfig module.\n *\n * This setup allows for better flexibility and management of\n * database connection settings, making it easier to adapt to\n * different environments (e.g., development, testing, production).\n */\n@Module({\n  imports: [TypeOrmModule.forRootAsync(databaseConfig.asProvider())]\n})\nexport class DatabaseModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Device.html":{"url":"interfaces/Device.html","title":"interface - Device","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Device\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/device.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Represents a device with a specific name and an optional version.\nThe name property is mandatory and should uniquely identify the device,\nwhile the version property is optional, allowing for flexibility in cases\nwhere the device may not have a specific version to report.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            version\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The name of the device (e.g., \"iPhone\", \"Android Tablet\")\na string that specifies the name of the device\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        version\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        version:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface Device {\n  /**\n   * The name of the device (e.g., \"iPhone\", \"Android Tablet\")\n   * a string that specifies the name of the device\n   */\n  readonly name: string;\n\n  /**\n   * The version of the device and this is optional property, if applicable (e.g., \"1.0\", \"2.1.5\")\n   */\n  readonly version?: string | undefined;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EnvModule.html":{"url":"modules/EnvModule.html","title":"module - EnvModule","body":"\n                   \n\n\n\n\n    Modules\n    EnvModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/core/env/env.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define a new module using the Module decorator\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { ENV_VALIDATION_SCHEMA } from './env.constants';\n\n/**\n * Define a new module using the Module decorator\n */\n@Module({\n  imports: [\n    /**\n     * Specify the modules to be imported into this module\n     * Initialize the ConfigModule with the following configuration options\n     */\n    ConfigModule.forRoot({\n      // Enable the expansion of environment variables (e.g., using ${VAR_NAME})\n      expandVariables: true,\n\n      // Use a validation schema to validate environment variables\n      validationSchema: ENV_VALIDATION_SCHEMA\n    })\n  ]\n})\nexport class EnvModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GenerateTables1725986093329.html":{"url":"classes/GenerateTables1725986093329.html","title":"class - GenerateTables1725986093329","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GenerateTables1725986093329\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/database/migrations/1725986093329-generate-tables.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        MigrationInterface\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                down\n                            \n                            \n                                    Public\n                                    Async\n                                up\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'GenerateTables1725986093329'\n                    \n                \n                    \n                        \n                                Defined in src/core/database/migrations/1725986093329-generate-tables.ts:4\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        down\n                        \n                    \n                \n            \n            \n                \n                        \n                    down(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Async\n                        up\n                        \n                    \n                \n            \n            \n                \n                        \n                    up(queryRunner: QueryRunner)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/database/migrations/1725986093329-generate-tables.ts:6\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                queryRunner\n                                            \n                                                        QueryRunner\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { MigrationInterface, QueryRunner } from \"typeorm\";\n\nexport class GenerateTables1725986093329 implements MigrationInterface {\n    name = 'GenerateTables1725986093329'\n\n    public async up(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            CREATE TABLE \"session\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"token\" character varying NOT NULL,\n                \"device\" json NOT NULL,\n                \"ip\" character varying NOT NULL,\n                \"expiryDate\" TIMESTAMP NOT NULL,\n                \"ownerId\" uuid NOT NULL,\n                CONSTRAINT \"UQ_232f8e85d7633bd6ddfad421696\" UNIQUE (\"token\"),\n                CONSTRAINT \"PK_f55da76ac1c3ac420f444d2ff11\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_status_enum\" AS ENUM('ACTIVATE', 'DEACTIVATE', 'SUSPEND')\n        `);\n        await queryRunner.query(`\n            CREATE TYPE \"public\".\"user_role_enum\" AS ENUM('ADMIN', 'USER')\n        `);\n        await queryRunner.query(`\n            CREATE TABLE \"user\" (\n                \"id\" uuid NOT NULL DEFAULT uuid_generate_v4(),\n                \"name\" character varying(50),\n                \"email\" character varying NOT NULL,\n                \"username\" character varying(30) NOT NULL,\n                \"password\" character varying NOT NULL,\n                \"status\" \"public\".\"user_status_enum\" NOT NULL DEFAULT 'DEACTIVATE',\n                \"role\" \"public\".\"user_role_enum\" NOT NULL DEFAULT 'USER',\n                \"createdAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"updatedAt\" TIMESTAMP NOT NULL DEFAULT now(),\n                \"deleteAt\" TIMESTAMP,\n                CONSTRAINT \"UQ_e12875dfb3b1d92d7d7c5377e22\" UNIQUE (\"email\"),\n                CONSTRAINT \"UQ_78a916df40e02a9deb1c4b75edb\" UNIQUE (\"username\"),\n                CONSTRAINT \"PK_cace4a159ff9f2512dd42373760\" PRIMARY KEY (\"id\")\n            )\n        `);\n        await queryRunner.query(`\n            ALTER TABLE \"session\"\n            ADD CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\" FOREIGN KEY (\"ownerId\") REFERENCES \"user\"(\"id\") ON DELETE NO ACTION ON UPDATE NO ACTION\n        `);\n    }\n\n    public async down(queryRunner: QueryRunner): Promise {\n        await queryRunner.query(`\n            ALTER TABLE \"session\" DROP CONSTRAINT \"FK_e1dde0bd0402cc9b1967c40a1b3\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"user\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_role_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TYPE \"public\".\"user_status_enum\"\n        `);\n        await queryRunner.query(`\n            DROP TABLE \"session\"\n        `);\n    }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/HashingService.html":{"url":"injectables/HashingService.html","title":"injectable - HashingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  HashingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/hashing/hashing.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The HashingService class is defined as an abstract service in NestJS.\nIt provides an interface for hashing and comparing hashed data,\nwhich can be implemented by any concrete class that requires\ncryptographic hashing functionality.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                compare\n                            \n                            \n                                    Abstract\n                                hash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        compare\n                        \n                    \n                \n            \n            \n                \n                        \n                    compare(data: string | Buffer, encrypted: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/hashing.service.ts:26\n                        \n                    \n\n\n            \n                \n                        The compare method is an abstract method that takes raw data\nand an encrypted string, returning a Promise that resolves to a\nboolean indicating whether the raw data matches the hashed data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                encrypted\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a boolean\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        hash\n                        \n                    \n                \n            \n            \n                \n                        \n                    hash(data: string | Buffer)\n                \n            \n\n\n                    \n                        \n                            Defined in src/core/common/hashing/hashing.service.ts:16\n                        \n                    \n\n\n            \n                \n                        The hash method is an abstract method that takes data as a string or Buffer\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                        string | Buffer\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                returns a Promise that resolves to a hashed string\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n/**\n * The HashingService class is defined as an abstract service in NestJS.\n * It provides an interface for hashing and comparing hashed data,\n * which can be implemented by any concrete class that requires\n * cryptographic hashing functionality.\n */\n@Injectable()\nexport abstract class HashingService {\n  /**\n   * The hash method is an abstract method that takes data as a string or Buffer\n   * @param data\n   * @returns returns a Promise that resolves to a hashed string\n   */\n  abstract hash(data: string | Buffer): Promise;\n\n  /**\n   * The compare method is an abstract method that takes raw data\n   * and an encrypted string, returning a Promise that resolves to a\n   * boolean indicating whether the raw data matches the hashed data.\n   * @param data\n   * @param encrypted\n   * @returns returns a Promise that resolves to a boolean\n   */\n  abstract compare(data: string | Buffer, encrypted: string): Promise;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IdDto.html":{"url":"classes/IdDto.html","title":"class - IdDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IdDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/id.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                This class defines a Data Transfer Object (DTO) for validating and describing\nan identifier that adheres to the UUID standard.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID must be string and conforms to the UUID format'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/id.dto.ts:23\n                        \n                    \n\n            \n                \n                    The 'id' property represents a unique identifier and must be a string\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsString, IsUUID } from 'class-validator';\n\n/**\n * This class defines a Data Transfer Object (DTO) for validating and describing\n * an identifier that adheres to the UUID standard.\n */\nexport class IdDto {\n  /**\n   * The 'id' property represents a unique identifier and must be a string\n   */\n  @ApiProperty({\n    description: 'The ID must be string and conforms to the UUID format'\n  })\n\n  // Ensures the value is of type string\n  @IsString()\n\n  // Enforces that the string is a valid UUID\n  @IsUUID()\n\n  // Declare the property as read-only\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtAuthGuard is a custom authentication guard that extends the default\nAuthGuard provided by the NestJS Passport module. This guard is used\nto protect routes that require JWT authentication, while also allowing\nfor certain routes to be marked as public (i.e., accessible without\nauthentication).\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('jwt')\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/jwt-auth.guard.ts:14\n                            \n                        \n\n                \n                    \n                            Call the constructor of the parent AuthGuard class.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/guards/jwt-auth.guard.ts:33\n                        \n                    \n\n\n            \n                \n                        Determines if the current request should be allowed through based\non the authentication logic. It checks if the route is marked as\npublic using the Reflector to access metadata.\nrequest, including the handler and the class where the route is\ndefined.\nlogic passes; otherwise, it returns false.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                context\n                                            \n                                                        ExecutionContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ExecutionContext provides the context of the\nrequest, including the handler and the class where the route is\ndefined.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                true if the route is public or if the default authentication\nlogic passes; otherwise, it returns false.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { AuthGuard } from '@nestjs/passport';\nimport { IS_PUBLIC_KEY } from 'auth/decorators/public.decorator';\n\n/**\n * JwtAuthGuard is a custom authentication guard that extends the default\n * AuthGuard provided by the NestJS Passport module. This guard is used\n * to protect routes that require JWT authentication, while also allowing\n * for certain routes to be marked as public (i.e., accessible without\n * authentication).\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {\n  /**\n   * Call the constructor of the parent AuthGuard class.\n   * @param reflector\n   */\n  constructor(private readonly reflector: Reflector) {\n    super();\n  }\n\n  /**\n   * Determines if the current request should be allowed through based\n   * on the authentication logic. It checks if the route is marked as\n   * public using the Reflector to access metadata.\n   * @param context - The ExecutionContext provides the context of the\n   * request, including the handler and the class where the route is\n   * defined.\n   * @returns true if the route is public or if the default authentication\n   * logic passes; otherwise, it returns false.\n   */\n  canActivate(context: ExecutionContext) {\n    // Use the Reflector to check if the current route is marked as public.\n    const isPublic = this.reflector.getAllAndOverride(IS_PUBLIC_KEY, [\n      context.getHandler(), // Get the method (handler) level metadata.\n      context.getClass() // Get the class level metadata.\n    ]);\n\n    // If the route is public, allow the request without authentication.\n    if (isPublic) return true;\n\n    // Otherwise, proceed with the normal authentication process.\n    return super.canActivate(context);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/interfaces/jwt-payload.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                This interface represents the structure of a JWT (JSON Web Token) payload.\nIt contains a single property 'id', which is a string that uniquely identifies\nthe user or entity associated with the token. The 'readonly' modifier ensures\nthat the 'id' cannot be modified after it has been set, promoting immutability\nand helping to maintain the integrity of the JWT payload.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The ID of user is string and UUID format\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  /**\n   * The ID of user is string and UUID format\n   */\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                JwtStrategy class is responsible for validating JWTs using Passport.\nIt extends Passport's Strategy class for JWTs and overrides the\nvalidation method to integrate with the application's authentication service.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtConfiguration: ConfigType<>, authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            Constructor for JwtStrategy.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtConfiguration\n                                                  \n                                                        \n                                                                    ConfigType<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for JWT containing secret and other settings.\n\n\n                                                        \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nInstance of AuthService to delegate JWT validation logic.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(req: Request, payload: JwtPayload)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/jwt.strategy.ts:42\n                        \n                    \n\n\n            \n                \n                        Validate method to handle the verification of the JWT.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nIncoming request object, used to access headers and other request-specific data.\n\n\n                                            \n                                        \n                                        \n                                                payload\n                                            \n                                                            JwtPayload\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe decoded payload of the JWT, containing user information.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The user object if validation is successful; otherwise, it throws an error.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@nestjs/common';\nimport { ConfigType } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport jwtConfig from 'auth/config/jwt.config'; // Import the JWT configuration\nimport { JwtPayload } from 'core/common/interfaces/jwt-payload.interface'; // Define the interface for JWT payload\nimport { Request } from 'express'; // Import Request type from Express\nimport { ExtractJwt, Strategy } from 'passport-jwt'; // Import JWT extraction and strategy from passport-jwt\n\n/**\n * JwtStrategy class is responsible for validating JWTs using Passport.\n * It extends Passport's Strategy class for JWTs and overrides the\n * validation method to integrate with the application's authentication service.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * Constructor for JwtStrategy.\n   * @param jwtConfiguration - Configuration object for JWT containing secret and other settings.\n   * @param authService - Instance of AuthService to delegate JWT validation logic.\n   */\n  constructor(\n    @Inject(jwtConfig.KEY) // Inject the JWT configuration using the key defined in jwtConfig\n    private readonly jwtConfiguration: ConfigType, // Retrieve configuration type for jwtConfig\n    private readonly authService: AuthService // Injecting the AuthService for validation\n  ) {\n    // Call the parent constructor with options for extracting JWT and using the secret\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), // Extracts JWT from Authorization header as Bearer token\n      secretOrKey: jwtConfiguration.secret, // Uses the secret defined in JWT configuration for verification\n      passReqToCallback: true // Enable passing the request object to the validation callback\n    });\n  }\n\n  /**\n   * Validate method to handle the verification of the JWT.\n   * @param req - Incoming request object, used to access headers and other request-specific data.\n   * @param payload - The decoded payload of the JWT, containing user information.\n   * @returns The user object if validation is successful; otherwise, it throws an error.\n   */\n  validate(req: Request, payload: JwtPayload) {\n    // Calls the AuthService to validate the token payload and possibly retrieve user info\n    return this.authService.validateJwt(\n      payload,\n      req.headers?.authorization.replace('bearer ', '')\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\nand specifies the 'local' strategy for authentication.\nThis guard will be used to protect routes that require local authentication,\nensuring that users are authenticated via the local strategy before accessing\nthe corresponding resources.\n\n            \n\n            \n                Extends\n            \n            \n                        AuthGuard('local')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * The LocalAuthGuard class extends the AuthGuard from '@nestjs/passport'\n * and specifies the 'local' strategy for authentication.\n * This guard will be used to protect routes that require local authentication,\n * ensuring that users are authenticated via the local strategy before accessing\n * the corresponding resources.\n */\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\nIt extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n\n            \n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            The constructor takes in an AuthService instance, which contains methods for validating user credentials.\nIt also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        validate\n                        \n                    \n                \n            \n            \n                \nvalidate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategies/local.strategy.ts:30\n                        \n                    \n\n\n            \n                \n                        The validate method is called by Passport after the user submits their credentials.\nIt invokes the AuthService's validateLocal method to check if the provided email and password are valid.\nIf authentication is successful, it should return the user object; otherwise, it will throw an error.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                promise user object\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { AuthService } from 'auth/auth.service';\nimport { Strategy } from 'passport-local';\n\n/**\n * The LocalStrategy class is a Passport strategy for authenticating users based on email and password.\n * It extends the PassportStrategy class, which allows integration of the Passport local strategy within a NestJS application.\n */\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  /**\n   * The constructor takes in an AuthService instance, which contains methods for validating user credentials.\n   * It also calls the super constructor of PassportStrategy with options to use 'email' as the field for the username.\n   * @param authService\n   */\n  constructor(private readonly authService: AuthService) {\n    super({ usernameField: 'email' });\n  }\n\n  /**\n   * The validate method is called by Passport after the user submits their credentials.\n   * It invokes the AuthService's validateLocal method to check if the provided email and password are valid.\n   * If authentication is successful, it should return the user object; otherwise, it will throw an error.\n   * @param email\n   * @param password\n   * @returns promise user object\n   */\n  validate(email: string, password: string) {\n    return this.authService.validateLocal(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsString } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class LoginUserDto {\n  @IsNotEmpty()\n  @IsString()\n  readonly email: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LoginValidationMiddleware.html":{"url":"injectables/LoginValidationMiddleware.html","title":"injectable - LoginValidationMiddleware","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LoginValidationMiddleware\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/middlewares/login-validation.middleware.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a middleware class for validating login user data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                use\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        use\n                        \n                    \n                \n            \n            \n                \n                        \n                    use(req: Request, res: Response, next: NextFunction)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/middlewares/login-validation.middleware.ts:23\n                        \n                    \n\n\n            \n                \n                        Middleware function to handle incoming requests\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                        Request\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express request\n\n                                            \n                                        \n                                        \n                                                res\n                                            \n                                                        Response\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express response\n\n                                            \n                                        \n                                        \n                                                next\n                                            \n                                                        NextFunction\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Express next\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  Injectable,\n  NestMiddleware\n} from '@nestjs/common';\nimport { LoginUserDto } from 'auth/dto/login-user.dto';\nimport { plainToInstance } from 'class-transformer';\nimport { validate } from 'class-validator';\nimport { NextFunction, Request, Response } from 'express';\n\n/**\n * Define a middleware class for validating login user data\n */\n@Injectable()\nexport class LoginValidationMiddleware implements NestMiddleware {\n  /**\n   * Middleware function to handle incoming requests\n   * @param req Express request\n   * @param res Express response\n   * @param next Express next\n   * @returns If validation is successful next request or validation errors are found throw a BadRequestException with the error details\n   */\n  async use(req: Request, res: Response, next: NextFunction) {\n    // Convert the request body to a LoginUserDto instance\n    const loginDto = plainToInstance(LoginUserDto, req.body);\n\n    // Validate the loginDto using class-validator\n    // - whitelist: true enforces only the properties defined in the DTO\n    // - forbidNonWhitelisted: true rejects any properties not defined in the DTO\n    const errors = await validate(loginDto, {\n      whitelist: true,\n      forbidNonWhitelisted: true\n    });\n\n    // If validation errors are found, throw a BadRequestException with the error details\n    if (errors.length) {\n      throw new BadRequestException(errors);\n    }\n\n    // If validation is successful, proceed to the next middleware or route handler\n    next();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterUserDto.html":{"url":"classes/RegisterUserDto.html","title":"class - RegisterUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/register-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                email\n                            \n                            \n                                    \n                                    Readonly\n                                password\n                            \n                            \n                                    \n                                    Readonly\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsUsername()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dto/register-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail } from 'class-validator';\nimport { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\nimport { IsUsername } from 'core/common/decorators/validators/is-username.decorator';\n\nexport class RegisterUserDto {\n  @IsEmail()\n  readonly email: string;\n\n  @IsUsername()\n  readonly username: string;\n\n  @IsPassword()\n  readonly password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegistryDates.html":{"url":"classes/RegistryDates.html","title":"class - RegistryDates","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegistryDates\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/embedded/registry-dates.embedded.ts\n        \n\n\n            \n                Description\n            \n            \n                A class representing common date fields for an entity in the database.\nThis class uses TypeORM decorators to automatically manage\nthe creation, update, and deletion dates of the entity.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                createdAt\n                            \n                            \n                                    \n                                deleteAt\n                            \n                            \n                                    \n                                updatedAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:14\n                        \n                    \n\n            \n                \n                    The date and time when the entity was created.\nThis field is automatically populated by TypeORM upon entity creation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:29\n                        \n                    \n\n            \n                \n                    The date and time when the entity was soft deleted.\nThis field is automatically populated when the entity is marked as deleted,\nallowing for soft deletion functionality without removing the record from the database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        updatedAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/embedded/registry-dates.embedded.ts:21\n                        \n                    \n\n            \n                \n                    The date and time when the entity was last updated.\nThis field is automatically updated by TypeORM whenever the entity is modified.\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateDateColumn, DeleteDateColumn, UpdateDateColumn } from 'typeorm';\n\n/**\n * A class representing common date fields for an entity in the database.\n * This class uses TypeORM decorators to automatically manage\n * the creation, update, and deletion dates of the entity.\n */\nexport class RegistryDates {\n  /**\n   * The date and time when the entity was created.\n   * This field is automatically populated by TypeORM upon entity creation.\n   */\n  @CreateDateColumn()\n  createdAt: Date;\n\n  /**\n   * The date and time when the entity was last updated.\n   * This field is automatically updated by TypeORM whenever the entity is modified.\n   */\n  @UpdateDateColumn()\n  updatedAt: Date;\n\n  /**\n   * The date and time when the entity was soft deleted.\n   * This field is automatically populated when the entity is marked as deleted,\n   * allowing for soft deletion functionality without removing the record from the database.\n   */\n  @DeleteDateColumn()\n  deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RemoveDto.html":{"url":"classes/RemoveDto.html","title":"class - RemoveDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RemoveDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/remove.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Define a Data Transfer Object (DTO) class for removing resources\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                soft\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        soft\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiPropertyOptional({description: 'The \"soft\" property is optional and has type boolean'})@IsOptional()@IsBoolean()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/remove.dto.ts:23\n                        \n                    \n\n            \n                \n                    Define a property 'soft' that is optional and of type boolean\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional } from 'class-validator';\nimport { IsBoolean } from '../decorators/validators/is-boolean.decorator';\nimport { ApiPropertyOptional } from '@nestjs/swagger';\n\n/**\n * Define a Data Transfer Object (DTO) class for removing resources\n */\nexport class RemoveDto {\n  /**\n   * Define a property 'soft' that is optional and of type boolean\n   */\n  @ApiPropertyOptional({\n    description: 'The \"soft\" property is optional and has type boolean'\n  })\n\n  // Indicate that the 'soft' property is optional in the request\n  @IsOptional()\n\n  // Validate that the 'soft' property, if provided, must be a boolean value\n  @IsBoolean()\n\n  // Declare the property as read-only\n  readonly soft: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Session.html":{"url":"entities/Session.html","title":"entity - Session","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Session\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/entities/session.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the Session entity that represents a user session in the application\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                device\n                            \n                            \n                                    \n                                expiryDate\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                ip\n                            \n                            \n                                    \n                                owner\n                            \n                            \n                                    \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        device\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Device\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'json'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:26\n                        \n                    \n\n            \n                \n                    Stores device information as a JSON object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        expiryDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:38\n                        \n                    \n\n            \n                \n                    The date and time when the session will expire\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:14\n                        \n                    \n\n            \n                \n                    Generates a unique UUID for each session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        ip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:32\n                        \n                    \n\n            \n                \n                    IP address of the user during this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        owner\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.id, {nullable: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:47\n                        \n                    \n\n            \n                \n                    This session must be associated with a user\nThe user who owns this session\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/sessions/entities/session.entity.ts:20\n                        \n                    \n\n            \n                \n                    Ensures each token is JWT and unique in the database\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { Device } from 'core/common/interfaces/device.interface';\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Define the Session entity that represents a user session in the application\n */\n@Entity()\nexport class Session {\n  /**\n   * Generates a unique UUID for each session\n   */\n  @PrimaryGeneratedColumn('uuid') //\n  id: string;\n\n  /**\n   * Ensures each token is JWT and unique in the database\n   */\n  @Column({ unique: true })\n  token: string;\n\n  /**\n   * Stores device information as a JSON object\n   */\n  @Column({ type: 'json' })\n  device: Device;\n\n  /**\n   * IP address of the user during this session\n   */\n  @Column()\n  ip: string;\n\n  /**\n   * The date and time when the session will expire\n   */\n  @Column()\n  expiryDate: Date; //\n\n  /**\n   * This session must be associated with a user\n   * The user who owns this session\n   */\n  @ManyToOne(() => User, (user) => user.id, {\n    nullable: false\n  })\n  owner: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SessionsController.html":{"url":"controllers/SessionsController.html","title":"controller - SessionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SessionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sessions\n            \n\n\n            \n                Description\n            \n            \n                The SessionController handles incoming requests related to sessions.\nIt is decorated with the Controller decorator, indicating that it\nis a NestJS controller responsible for processing routes that start\nwith 'sessions'. Additional route handling methods can be added in\nthis class to define specific actions for session management.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\n\n/**\n * The SessionController handles incoming requests related to sessions.\n * It is decorated with the Controller decorator, indicating that it\n * is a NestJS controller responsible for processing routes that start\n * with 'sessions'. Additional route handling methods can be added in\n * this class to define specific actions for session management.\n */\n@Controller('sessions')\nexport class SessionsController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SessionsModule.html":{"url":"modules/SessionsModule.html","title":"module - SessionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SessionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SessionsModule\n\n\n\ncluster_SessionsModule_providers\n\n\n\n\nSessionsService\n\nSessionsService\n\n\n\nSessionsModule\n\nSessionsModule\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sessions/sessions.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Define the SessionModule using the Module decorator\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SessionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SessionsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from 'users/entities/user.entity';\nimport { Session } from './entities/session.entity';\nimport { SessionsService } from './sessions.service';\nimport { SessionsController } from './sessions.controller';\n\n/**\n * Define the SessionModule using the Module decorator\n */\n@Module({\n  // Specify the entities that should be registered with TypeORM\n  imports: [TypeOrmModule.forFeature([User, Session])],\n  // Register the SessionService as a provider for dependency injection\n  providers: [SessionsService],\n  // Register the SessionController to handle incoming requests related to sessions\n  controllers: [SessionsController]\n})\nexport class SessionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SessionsService.html":{"url":"injectables/SessionsService.html","title":"injectable - SessionsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SessionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sessions/sessions.service.ts\n        \n\n\n            \n                Description\n            \n            \n                The SessionService class is marked as Injectable,\nwhich allows it to be injected into other components in the application.\nThis service handles session-related operations, such as creating,\nvalidating, and retrieving user sessions.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                sessions\n                            \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, sessionRepository: Repository, userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/sessions/sessions.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                DataSource instance for accessing the database\n\n                                                        \n                                                \n                                                \n                                                        sessionRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The Session repository for CRUD operations on Session entities\n\n                                                        \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The User repository to access User entities\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(userId: string, token: string, ip: string, device: Device)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Creates a new session for a specified user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                ip\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                device\n                                            \n                                                            Device\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                New session\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        sessions\n                        \n                    \n                \n            \n            \n                \n                        \n                    sessions(undefined: CustomUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:88\n                        \n                    \n\n\n            \n                \n                        Retrieves sessions for a given user****\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            CustomUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Session lists\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(userId: string, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/sessions/sessions.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Validates a session based on the user ID and token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                Object of session\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CustomUser } from 'core/common/interfaces/custom-request.interface';\nimport { Device } from 'core/common/interfaces/device.interface';\nimport { Session } from 'sessions/entities/session.entity';\nimport { DataSource, Raw, Repository } from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * The SessionService class is marked as Injectable,\n * which allows it to be injected into other components in the application.\n * This service handles session-related operations, such as creating,\n * validating, and retrieving user sessions.\n */\n@Injectable()\nexport class SessionsService {\n  /**\n   * @param dataSource DataSource instance for accessing the database\n   * @param sessionRepository The Session repository for CRUD operations on Session entities\n   * @param userRepository The User repository to access User entities\n   */\n  constructor(\n    private readonly dataSource: DataSource,\n    @InjectRepository(Session)\n    private readonly sessionRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository\n  ) {}\n\n  /**\n   * Creates a new session for a specified user\n   * @param userId\n   * @param token\n   * @param ip\n   * @param device\n   * @returns New session\n   */\n  async create(userId: string, token: string, ip: string, device: Device) {\n    /**\n     * Creates a new session instance with the provided user ID, token, IP address, device information,\n     * and sets the expiry date to 31 days from now\n     */\n    const session = this.sessionRepository.create({\n      owner: {\n        id: userId\n      },\n      ip,\n      token,\n      device,\n      expiryDate: new Date(new Date().setMilliseconds(31 * 24 * 60 * 60 * 1000))\n    });\n\n    // Saves the newly created session to the database and returns it.\n    return await this.sessionRepository.save(session);\n  }\n\n  /**\n   * Validates a session based on the user ID and token.\n   * @param userId\n   * @param token\n   * @returns Object of session\n   */\n  async validate(userId: string, token: string): Promise {\n    /**\n     * Finds a session that matches the user ID and token,\n     * and checks if the session has not expired by comparing the expiry date with the current date.\n     */\n    const session = await this.dataSource.getRepository(Session).findOne({\n      where: {\n        token,\n        owner: {\n          id: userId\n        },\n        // Ensures the expiry date is in the future.\n        expiryDate: Raw((alias) => `${alias} > NOW()`)\n      }\n    });\n\n    // Returns the found session or null if not found or expired.\n    return session;\n  }\n\n  /**\n   * Retrieves sessions for a given user****\n   * @param param0\n   * @returns Session lists\n   */\n  async sessions({ id }: CustomUser) {\n    /**\n     * Fetches a user by ID along with their related sessions\n     */\n    await this.userRepository.findOne({\n      where: { id },\n      // Specifies that related sessions should be fetched.\n      relations: ['session']\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                UpdateUserDto class is a Data Transfer Object (DTO) that\nextends the CreateUserDto. This class is used for validating\nand documenting the structure of data sent to the API for updating\nan existing user.\n\n            \n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Readonly\n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Readonly\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'The ID of the user that needs to be updated.'})@IsString()@IsUUID()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user.dto.ts:24\n                        \n                    \n\n            \n                \n                    The ID of the user that needs to be updated.\nThis property is required and should be a valid UUID string.\nExample :\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsUUID } from 'class-validator';\nimport { CreateUserDto } from './create-user.dto';\nimport { ApiProperty, PartialType } from '@nestjs/swagger';\n\n/**\n * UpdateUserDto class is a Data Transfer Object (DTO) that\n * extends the CreateUserDto. This class is used for validating\n * and documenting the structure of data sent to the API for updating\n * an existing user.\n */\nexport class UpdateUserDto extends PartialType(CreateUserDto) {\n  /**\n   * The ID of the user that needs to be updated.\n   * This property is required and should be a valid UUID string.\n   * @type {string}\n   * @example \"dcbec18c-2bdd-4e7b-9f53-8721c3c99ea4\"\n   */\n  @ApiProperty({\n    description: 'The ID of the user that needs to be updated.'\n  })\n  @IsString()\n  @IsUUID()\n  readonly id: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Define the User entity representing a user in the system\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                email\n                            \n                            \n                                    \n                                id\n                            \n                            \n                                    \n                                name\n                            \n                            \n                                    \n                                password\n                            \n                            \n                                    \n                                registryDates\n                            \n                            \n                                    \n                                role\n                            \n                            \n                                    \n                                sessions\n                            \n                            \n                                    \n                                status\n                            \n                            \n                                    \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:28\n                        \n                    \n\n            \n                \n                    User's email must be unique\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:16\n                        \n                    \n\n            \n                \n                    Generates a unique identifier for each user\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({length: 50, nullable: true, select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:22\n                        \n                    \n\n            \n                \n                    User's name, optional and not selected by default\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({select: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:40\n                        \n                    \n\n            \n                \n                    Password is not selected by default (for security)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        registryDates\n                        \n                    \n                \n            \n                \n                    \n                        Type :         RegistryDates\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column(undefined, {prefix: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:58\n                        \n                    \n\n            \n                \n                    Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        role\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserRole\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserRole, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:52\n                        \n                    \n\n            \n                \n                    User role defaults to USER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sessions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Session[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, session => session.owner, {cascade: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:69\n                        \n                    \n\n            \n                \n                    Defines a one-to-many relation with the Session entity\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        status\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserStatus\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: UserStatus, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:46\n                        \n                    \n\n            \n                \n                    User status, defaults to DEACTIVATE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true, length: 30})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/entities/user.entity.ts:34\n                        \n                    \n\n            \n                \n                    Username has a maximum length of 30 and must be unique\n\n                \n            \n\n        \n    \n\n    \n\n\n    \n        import { RegistryDates } from 'core/common/embedded/registry-dates.embedded';\nimport { UserRole } from 'core/common/enums/user-role.enum';\nimport { UserStatus } from 'core/common/enums/user-status.enum';\nimport { Session } from 'session/entities/session.entity';\nimport { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\n\n/**\n * Define the User entity representing a user in the system\n */\n@Entity()\nexport class User {\n  /**\n   * Generates a unique identifier for each user\n   */\n  @PrimaryGeneratedColumn('uuid')\n  id: string;\n\n  /**\n   * User's name, optional and not selected by default\n   */\n  @Column({ length: 50, nullable: true, select: false })\n  name: string;\n\n  /**\n   * User's email must be unique\n   */\n  @Column({ unique: true })\n  email: string;\n\n  /**\n   * Username has a maximum length of 30 and must be unique\n   */\n  @Column({ unique: true, length: 30 })\n  username: string;\n\n  /**\n   * Password is not selected by default (for security)\n   */\n  @Column({ select: false })\n  password: string;\n\n  /**\n   * User status, defaults to DEACTIVATE\n   */\n  @Column({ type: 'enum', enum: UserStatus, default: UserStatus.DEACTIVATE })\n  status: UserStatus;\n\n  /**\n   * User role defaults to USER\n   */\n  @Column({ type: 'enum', enum: UserRole, default: UserRole.USER })\n  role: UserRole;\n\n  /**\n   * Embedded class for registry dates (createdAt, updatedAt, deletedAt)\n   */\n  @Column(() => RegistryDates, { prefix: false })\n  registryDates: RegistryDates;\n\n  /**\n   * Defines a one-to-many relation with the Session entity\n   */\n  @OneToMany(() => Session, (session) => session.owner, {\n    /**\n     * Allows sessions to be softly removed or recovered\n     */\n    cascade: ['soft-remove', 'recover']\n  })\n  sessions: Session[];\n\n  /**\n   * Getter to determine if the user is considered deleted based on the deletion date\n   */\n  get isDeleted() {\n    /**\n     * Returns true if deleteAt is set (indicating the user is deleted)\n     */\n    return !!this.registryDates.deleteAt;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserChangePasswordDto.html":{"url":"classes/UserChangePasswordDto.html","title":"class - UserChangePasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserChangePasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/common/dto/user-change-password.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                currentPassword\n                            \n                            \n                                    \n                                    Readonly\n                                newPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        currentPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        newPassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsPassword()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/core/common/dto/user-change-password.dto.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsPassword } from 'core/common/decorators/validators/is-password.decorator';\n\nexport class UserChangePasswordDto {\n  @IsPassword()\n  readonly currentPassword: string;\n\n  @IsPassword()\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                Controller for 'users' route\nTags the API endpoints for easier grouping in documentation\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                create\n                            \n                            \n                                    \n                                    \n                                    \n                                findAll\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                findOne\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                    \n                                remove\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOperation({description: 'Creates a new user'})@ApiResponse({status: 201, description: 'You get a 201 response if your data is created successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:50\n                        \n                    \n\n\n            \n                \n                        Endpoint to create a new user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOperation({description: 'Get list of users register in application'})@ApiResponse({status: 200, description: 'Fetch users successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:70\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve all registered users\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Users list\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(undefined: IdDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOperation({description: 'Get single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Fetch single user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:94\n                        \n                    \n\n\n            \n                \n                        Endpoint to retrieve a single user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Get object of user\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                            \n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(undefined: IdDto, undefined: RemoveDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOperation({description: 'Delete single user with id'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiQuery({name: 'soft', type: Boolean, required: false, description: 'This query for soft delete data of user in application'})@ApiResponse({status: 200, description: 'Delete user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:156\n                        \n                    \n\n\n            \n                \n                        Endpoint to delete a user by ID\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            RemoveDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(undefined: IdDto, updateUserDto: UpdateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch(':id')@ApiOperation({description: 'Update single user with id and send data'})@ApiParam({name: 'id', type: String, required: true, description: 'Format of this param is uuid'})@ApiResponse({status: 200, description: 'Update data of user successfully'})\n                \n            \n\n                    \n                        \n                            Defined in src/users/users.controller.ts:122\n                        \n                    \n\n\n            \n                \n                        Endpoint to update a user's information\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                            \n                                                            IdDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n  Query\n} from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { UsersService } from './users.service';\nimport {\n  ApiOperation,\n  ApiParam,\n  ApiQuery,\n  ApiResponse,\n  ApiTags\n} from '@nestjs/swagger';\nimport { IdDto } from 'core/common/dto/id.dto';\nimport { RemoveDto } from 'core/common/dto/remove.dto';\n\n/**\n * Controller for 'users' route\n * Tags the API endpoints for easier grouping in documentation\n */\n@Controller('users')\n@ApiTags('users')\nexport class UsersController {\n  /**\n   * Inject the UsersService\n   * @param usersService\n   */\n  constructor(private readonly usersService: UsersService) {}\n\n  /**\n   * Endpoint to create a new user\n   * @param createUserDto\n   * @returns\n   */\n  @Post()\n  @ApiOperation({\n    description: 'Creates a new user'\n  })\n  @ApiResponse({\n    status: 201,\n    description: 'You get a 201 response if your data is created successfully'\n  })\n  create(@Body() createUserDto: CreateUserDto) {\n    /**\n     * Receives user data for creation\n     * Calls the service method to create a user\n     */\n    return this.usersService.create(createUserDto);\n  }\n\n  /**\n   * Endpoint to retrieve all registered users\n   * @returns Users list\n   */\n  @Get()\n  @ApiOperation({\n    description: 'Get list of users register in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch users successfully'\n  })\n  findAll() {\n    // Calls the service method to get all users\n    return this.usersService.findAll();\n  }\n\n  /**\n   * Endpoint to retrieve a single user by ID\n   * @param param0\n   * @returns Get object of user\n   */\n  @Get(':id')\n  @ApiOperation({\n    description: 'Get single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Fetch single user successfully'\n  })\n  findOne(@Param('id') { id }: IdDto) {\n    /**\n     * Extracts user ID from the request parameters\n     * Calls the service method to find a user by ID\n     */\n    return this.usersService.findOneById(id);\n  }\n\n  /**\n   * Endpoint to update a user's information\n   * @param param0\n   * @param updateUserDto\n   * @returns\n   */\n  @Patch(':id')\n  @ApiOperation({\n    description: 'Update single user with id and send data'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Update data of user successfully'\n  })\n  update(@Param('id') { id }: IdDto, @Body() updateUserDto: UpdateUserDto) {\n    /**\n     * Extracts ID and update data from the request\n     * Calls the service method to update user data\n     */\n    return this.usersService.update(id, updateUserDto);\n  }\n\n  /**\n   * Endpoint to delete a user by ID\n   * @param param0\n   * @param param1\n   * @returns\n   */\n  @Delete(':id')\n  @ApiOperation({\n    description: 'Delete single user with id'\n  })\n  @ApiParam({\n    name: 'id',\n    type: String,\n    required: true,\n    description: 'Format of this param is uuid'\n  })\n  @ApiQuery({\n    name: 'soft',\n    type: Boolean,\n    required: false,\n    description: 'This query for soft delete data of user in application'\n  })\n  @ApiResponse({\n    status: 200,\n    description: 'Delete user successfully'\n  })\n  remove(@Param('id') { id }: IdDto, @Query() { soft }: RemoveDto) {\n    /**\n     * Extracts ID and soft delete flag from the request\n     * Calls the service method to remove the user\n     */\n    return this.usersService.remove(id, soft);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nCommonModule\n\nCommonModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nCommonModule->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            UsersModule is responsible for managing user-related functionalities within the application.\nIt imports necessary modules and provides various components for user management, including:\n\nTypeOrmModule with User and Session entities to enable database operations for user and session management.\nCommonModule to handle hashing password and compare password with hashingService.\n\nThe module declares:\n\nUsersController, which defines the routes and handling of user-related HTTP requests.\nUsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\nUsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n\nOverall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CommonModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Session } from 'session/entities/session.entity';\nimport { User } from './entities/user.entity';\nimport { UsersSubscriber } from './subscribers/users.subscriber';\nimport { UsersController } from './users.controller';\nimport { UsersService } from './users.service';\nimport { CommonModule } from 'core/common/common.module';\n\n/**\n * UsersModule is responsible for managing user-related functionalities within the application.\n *\n * It imports necessary modules and provides various components for user management, including:\n * - TypeOrmModule with User and Session entities to enable database operations for user and session management.\n * - CommonModule to handle hashing password and compare password with hashingService.\n *\n * The module declares:\n * - UsersController, which defines the routes and handling of user-related HTTP requests.\n * - UsersService, which contains the business logic for managing users, including CRUD operations and any related processes.\n * - UsersSubscriber, which listens for relevant database events related to users, allowing for actions to be taken in response to changes.\n *\n * Overall, this module encapsulates all functionalities related to user management, ensuring a clean separation of concerns in the application architecture.\n */\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Session]), CommonModule],\n  controllers: [UsersController],\n  providers: [UsersService, UsersSubscriber]\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Class to connect to Users table and preform business operations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                            \n                                    Async\n                                updatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for the class, which injects the User repository.\nThe @InjectRepository(User) decorator is used to get an instance of the\nUser repository from the dependency injection container. This allows\nthe class to interact with the database using the userRepository\ninstance, enabling operations such as creating, retrieving,\nupdating, or deleting User entities.\naccess to user-related database operations.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAn instance of the Repository that provides\naccess to user-related database operations.\n\n\n                                                        \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                HashingService for password hashing and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(createUserDto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:45\n                        \n                    \n\n\n            \n                \n                        The method to create a new user in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                createUserDto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    findAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:62\n                        \n                    \n\n\n            \n                \n                        The method to get all users from the database\n\n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOne(where: FindOptionsWhere | FindOptionsWhere[], select: FindOptionsSelect | FindOptionsSelectByString)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:69\n                        \n                    \n\n\n            \n                \n                        Find a single user using Where and Select query\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                where\n                                            \n                                                            FindOptionsWhere | FindOptionsWhere[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                select\n                                            \n                                                            FindOptionsSelect | FindOptionsSelectByString\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findOneById\n                        \n                    \n                \n            \n            \n                \n                        \n                    findOneById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:95\n                        \n                    \n\n\n            \n                \n                        Find a single user using the ID of the user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                        \n                    remove(id: string, soft: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:163\n                        \n                    \n\n\n            \n                \n                        Find and Delete a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                soft\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, updateUserDto: UpdateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Find and Update a single user using the ID of user\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                updateUserDto\n                                            \n                                                            UpdateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        updatePassword\n                        \n                    \n                \n            \n            \n                \n                        \n                    updatePassword(id: string, undefined: UserChangePasswordDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/users.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Update user's password\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                            \n                                                            UserChangePasswordDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  Injectable,\n  NotFoundException,\n  UnauthorizedException\n} from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport {\n  FindOptionsSelect,\n  FindOptionsSelectByString,\n  FindOptionsWhere,\n  Repository\n} from 'typeorm';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDto } from './dto/update-user.dto';\nimport { User } from './entities/user.entity';\nimport { UserChangePasswordDto } from '../core/common/dto/user-change-password.dto';\nimport { HashingService } from 'core/common/hashing/hashing.service';\n\n/**\n * Class to connect to Users table and preform business operations\n */\n@Injectable()\nexport class UsersService {\n  /**\n   * Constructor for the class, which injects the User repository.\n   * The @InjectRepository(User) decorator is used to get an instance of the\n   * User repository from the dependency injection container. This allows\n   * the class to interact with the database using the userRepository\n   * instance, enabling operations such as creating, retrieving,\n   * updating, or deleting User entities.\n   * @param userRepository - An instance of the Repository that provides\n   * access to user-related database operations.\n   * @param hashingService HashingService for password hashing and compare password\n   */\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    // Injecting the HashingService for password hashing\n    private readonly hashingService: HashingService\n  ) {}\n\n  /**\n   * The method to create a new user in the database\n   */\n  async create(createUserDto: CreateUserDto) {\n    try {\n      // Create user\n      const user = await this.userRepository.create({\n        ...createUserDto\n      });\n\n      // Save and return it\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * The method to get all users from the database\n   */\n  async findAll() {\n    return await this.userRepository.find();\n  }\n\n  /**\n   * Find a single user using Where and Select query\n   */\n  async findOne(\n    where: FindOptionsWhere | FindOptionsWhere[],\n    select: FindOptionsSelect | FindOptionsSelectByString = [\n      'id',\n      'email',\n      'name',\n      'password',\n      'registryDates',\n      'role',\n      'status',\n      'username'\n    ]\n  ) {\n    // Find user\n    const user = await this.userRepository.findOne({ where, select });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find a single user using the ID of the user\n   */\n  async findOneById(id: string) {\n    // Find user with id\n    const user = await this.userRepository.findOneBy({ id });\n\n    // If doesn't exists, throw error\n    if (!user) throw new NotFoundException('user not found');\n\n    // Otherwise return user\n    return user;\n  }\n\n  /**\n   * Find and Update a single user using the ID of user\n   */\n  async update(id: string, updateUserDto: UpdateUserDto) {\n    try {\n      // Find user with id and update data\n      const user = await this.userRepository.preload({\n        id,\n        ...updateUserDto\n      });\n\n      // If doesn't exists, throw error\n      if (!user) {\n        throw new NotFoundException('user not found');\n      }\n\n      // Otherwise save and return user\n      return await this.userRepository.save(user);\n    } catch (error) {\n      throw error;\n    }\n  }\n\n  /**\n   * Update user's password\n   * @param id\n   * @param UserChangePasswordDto\n   */\n  async updatePassword(\n    id: string,\n    { currentPassword, newPassword }: UserChangePasswordDto\n  ) {\n    // Finds the user by their ID, only retrieving the password\n    const user = await this.userRepository.findOne({\n      where: { id },\n      select: ['password']\n    });\n\n    /**\n     * Compares the provided current password with the stored password hash using the HashingService\n     */\n    const isMatch = await this.hashingService.compare(\n      currentPassword,\n      user.password\n    );\n\n    // Throws an UnauthorizedException if the current password is invalid\n    if (!isMatch) throw new UnauthorizedException('invalid password');\n\n    // If the new password is different from the current password, updates the user's password in the database\n    if (currentPassword !== newPassword)\n      await this.userRepository.update({ id }, { password: newPassword });\n  }\n\n  /**\n   * Find and Delete a single user using the ID of user\n   */\n  async remove(id: string, soft: boolean) {\n    const user = await this.findOneById(id);\n    return soft\n      ? await this.userRepository.softRemove(user)\n      : await this.userRepository.remove(user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UsersSubscriber.html":{"url":"classes/UsersSubscriber.html","title":"class - UsersSubscriber","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UsersSubscriber\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/subscribers/users.subscriber.ts\n        \n\n\n            \n                Description\n            \n            \n                Decorator that marks the class as a subscriber for entity events\n\n            \n\n\n            \n                Implements\n            \n            \n                        EntitySubscriberInterface\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                beforeInsert\n                            \n                            \n                                    Async\n                                beforeUpdate\n                            \n                            \n                                listenTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(dataSource: DataSource, hashingService: HashingService)\n                    \n                \n                        \n                            \n                                Defined in src/users/subscribers/users.subscriber.ts:15\n                            \n                        \n\n                \n                    \n                            Constructor to initialize the data source and hashing service\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        dataSource\n                                                  \n                                                        \n                                                                    DataSource\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        hashingService\n                                                  \n                                                        \n                                                                        HashingService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeInsert\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeInsert(event: InsertEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:45\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is inserted into the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            InsertEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        beforeUpdate\n                        \n                    \n                \n            \n            \n                \n                        \n                    beforeUpdate(event: UpdateEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:57\n                        \n                    \n\n\n            \n                \n                        Method to handle actions before a user entity is updated in the database\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            UpdateEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        listenTo\n                        \n                    \n                \n            \n            \n                \nlistenTo()\n                \n            \n\n\n                    \n                        \n                            Defined in src/users/subscribers/users.subscriber.ts:36\n                        \n                    \n\n\n            \n                \n                        This method specifies the entity that this subscriber listens to\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                User entity\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HashingService } from 'core/common/hashing/hashing.service';\nimport {\n  DataSource,\n  EntitySubscriberInterface,\n  EventSubscriber,\n  InsertEvent,\n  UpdateEvent\n} from 'typeorm';\nimport { User } from 'users/entities/user.entity';\n\n/**\n * Decorator that marks the class as a subscriber for entity events\n */\n@EventSubscriber()\nexport class UsersSubscriber implements EntitySubscriberInterface {\n  /**\n   * Constructor to initialize the data source and hashing service\n   * @param dataSource\n   * @param hashingService\n   */\n  constructor(\n    // Injecting DataSource for database operations\n    private readonly dataSource: DataSource,\n\n    // Injecting HashingService for password hashing\n    private readonly hashingService: HashingService\n  ) {\n    // Register the subscriber with the data source, allowing it to listen to events\n    dataSource.subscribers.push(this);\n  }\n\n  /**\n   * This method specifies the entity that this subscriber listens to\n   * @returns User entity\n   */\n  listenTo() {\n    // Listen to User entity events\n    return User;\n  }\n\n  /**\n   * Method to handle actions before a user entity is inserted into the database\n   * @param event\n   */\n  async beforeInsert(event: InsertEvent) {\n    // Destructure user entity from the event\n    const { entity: user } = event;\n\n    // Hash the user's password before inserting it into the database\n    user.password = await this.hashingService.hash(user.password);\n  }\n\n  /**\n   * Method to handle actions before a user entity is updated in the database\n   * @param event\n   */\n  async beforeUpdate(event: UpdateEvent) {\n    // Destructure the entity from the event\n    const { entity } = event;\n\n    // Explicitly cast the entity to User type\n    const user = entity as User;\n\n    // Hash the user's password before updating it in the database\n    user.password = await this.hashingService.hash(user.password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                commitlint.config.ts\n            \n            variable\n            Configuration\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (8/8)\n            \n        \n        \n            \n                \n                src/auth/decorators/ipAddress.decorator.ts\n            \n            variable\n            IpAddress\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            IS_PUBLIC_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/public.decorator.ts\n            \n            variable\n            Public\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user-agent.decorator.ts\n            \n            variable\n            UserAgent\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/user.decorator.ts\n            \n            variable\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dto/register-user.dto.ts\n            \n            class\n            RegisterUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/auth/middlewares/login-validation.middleware.ts\n            \n            injectable\n            LoginValidationMiddleware\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            toBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/transforms/to-boolean.decorator.ts\n            \n            variable\n            ToBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-boolean.decorator.ts\n            \n            variable\n            IsBoolean\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IS_PASSWORD_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            isPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            IsPassword\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-password.decorator.ts\n            \n            variable\n            passwordRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IS_USERNAME_KEY\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            isUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            IsUsername\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/decorators/validators/is-username.decorator.ts\n            \n            variable\n            usernameRegex\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/common/dto/id.dto.ts\n            \n            class\n            IdDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/remove.dto.ts\n            \n            class\n            RemoveDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/dto/user-change-password.dto.ts\n            \n            class\n            UserChangePasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/common/embedded/registry-dates.embedded.ts\n            \n            class\n            RegistryDates\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/core/common/hashing/bcrypt.service.ts\n            \n            injectable\n            BcryptService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/hashing/hashing.service.ts\n            \n            injectable\n            HashingService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomRequest\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/custom-request.interface.ts\n            \n            interface\n            CustomUser\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/device.interface.ts\n            \n            interface\n            Device\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/core/common/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/core/common/util/common.constants.ts\n            \n            variable\n            VALIDATION_PIPE_OPTIONS\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/core/database/migrations/1725986093329-generate-tables.ts\n            \n            class\n            GenerateTables1725986093329\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/core/env/env.constants.ts\n            \n            variable\n            ENV_VALIDATION_SCHEMA\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/entities/session.entity.ts\n            \n            entity\n            Session\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.controller.ts\n            \n            controller\n            SessionsController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/sessions/sessions.service.ts\n            \n            injectable\n            SessionsService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/users/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/users/subscribers/users.subscriber.ts\n            \n            class\n            UsersSubscriber\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                100 %\n                (9/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @compodoc/compodoc : ^1.1.25\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.2\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.0\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/passport : ^1.0.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            bcrypt : ^5.1.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            joi : ^17.13.3\n        \n            passport : ^0.7.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-local : ^1.0.0\n        \n            pg : ^8.12.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            UserRole   (src/.../user-role.enum.ts)\n                        \n                        \n                            UserStatus   (src/.../user-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/core/common/enums/user-role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserRole\n                    \n                \n                    \n                        \n                            This enum defines the different roles a user can have in the application.\n\nADMIN: Represents a user with administrative privileges, allowing full access to the system.\nAUTHOR: Represents a user who can create and manage content, but with limited permissions compared to an admin.\nUSER: Represents a regular user with basic access, mainly for viewing content and participating in the application.\n\n\n                        \n                    \n                        \n                            \n                                 ADMIN\n                            \n                        \n                        \n                            \n                                Value : ADMIN\n                            \n                        \n                        \n                            \n                                 AUTHOR\n                            \n                        \n                        \n                            \n                                Value : AUTHOR\n                            \n                        \n                        \n                            \n                                 USER\n                            \n                        \n                        \n                            \n                                Value : USER\n                            \n                        \n            \n        \n\n    src/core/common/enums/user-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        UserStatus\n                    \n                \n                    \n                        \n                            Define an enumeration for user status in the application\n\nACTIVATE: Represents a user who is currently active and has access to the system\nDEACTIVATE: Represents a user who has been deactivated and no longer has access to the system\nSUSPEND: Represents a user whose access is temporarily suspended, possibly due to violations or other reasons\n\n\n                        \n                    \n                        \n                            \n                                 ACTIVATE\n                            \n                        \n                        \n                            \n                                Value : ACTIVATE\n                            \n                        \n                        \n                            \n                                 DEACTIVATE\n                            \n                        \n                        \n                            \n                                Value : DEACTIVATE\n                            \n                        \n                        \n                            \n                                 SUSPEND\n                            \n                        \n                        \n                            \n                                Value : SUSPEND\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                        The bootstrap function is an asynchronous function that initializes and starts the application.\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nInstallation\nExample :$ yarn installRunning the app\nExample :# development\n$ yarn run start\n\n# watch mode\n$ yarn run start:dev\n\n# production mode\n$ yarn run start:prodTest\nExample :# unit tests\n$ yarn run test\n\n# e2e tests\n$ yarn run test:e2e\n\n# test coverage\n$ yarn run test:covSupport\nStay in touch\n\nAuthor - Mohamadreza Mosalli\nWebsite - https://minidocs.com\n\nLicense\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CommonModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CoreModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DatabaseModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EnvModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SessionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CommonModule\n\n\n\ncluster_CommonModule_exports\n\n\n\ncluster_CoreModule\n\n\n\ncluster_CoreModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCoreModule\n\nCoreModule\n\nAppModule -->\n\nCoreModule->AppModule\n\n\n\n\n\nSessionsModule\n\nSessionsModule\n\nAppModule -->\n\nSessionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nCommonModule\n\nCommonModule\n\nAuthModule -->\n\nCommonModule->AuthModule\n\n\n\nCoreModule -->\n\nCommonModule->CoreModule\n\n\n\nUsersModule -->\n\nCommonModule->UsersModule\n\n\n\n\n\nHashingService \n\nHashingService \n\nHashingService  -->\n\nCommonModule->HashingService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nSessionsService\n\nSessionsService\n\nAuthModule -->\n\nSessionsService->AuthModule\n\n\n\nSessionsModule -->\n\nSessionsService->SessionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nAuthModule -->\n\nUsersService->AuthModule\n\n\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\nDatabaseModule\n\nDatabaseModule\n\nCoreModule -->\n\nDatabaseModule->CoreModule\n\n\n\n\n\nEnvModule\n\nEnvModule\n\nCoreModule -->\n\nEnvModule->CoreModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    3 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : Mohamadreza Mosalli\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Configuration   (commitlint.config.ts)\n                        \n                        \n                            ENV_VALIDATION_SCHEMA   (src/.../env.constants.ts)\n                        \n                        \n                            IpAddress   (src/.../ipAddress.decorator.ts)\n                        \n                        \n                            IS_PASSWORD_KEY   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IS_PUBLIC_KEY   (src/.../public.decorator.ts)\n                        \n                        \n                            IS_USERNAME_KEY   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsBoolean   (src/.../is-boolean.decorator.ts)\n                        \n                        \n                            isPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            IsPassword   (src/.../is-password.decorator.ts)\n                        \n                        \n                            isUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            IsUsername   (src/.../is-username.decorator.ts)\n                        \n                        \n                            passwordRegex   (src/.../is-password.decorator.ts)\n                        \n                        \n                            Public   (src/.../public.decorator.ts)\n                        \n                        \n                            toBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            ToBoolean   (src/.../to-boolean.decorator.ts)\n                        \n                        \n                            User   (src/.../user.decorator.ts)\n                        \n                        \n                            UserAgent   (src/.../user-agent.decorator.ts)\n                        \n                        \n                            usernameRegex   (src/.../is-username.decorator.ts)\n                        \n                        \n                            VALIDATION_PIPE_OPTIONS   (src/.../common.constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    commitlint.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Configuration\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  extends: ['@commitlint/config-conventional'],\n  parserPreset: 'conventional-changelog-atom',\n  formatter: '@commitlint/format',\n  rules: {\n    'type-enum': [\n      2,\n      'always',\n      [\n        'feat', // New feature\n        'fix', // Bug fix\n        'docs', // Documentation changes\n        'style', // Changes that do not affect the meaning of the code (white-space, formatting, etc.)\n        'refactor', // Code changes that neither fix a bug nor add a feature\n        'perf', // Performance improvement\n        'test', // Adding missing tests or correcting existing tests\n        'build', // Changes that affect the build system or external dependencies (example scopes: npm)\n        'ci', // Changes to CI configuration files and scripts\n        'chore', // Other changes that don't modify src or test files\n        'revert' // Reverts a previous commit\n      ]\n    ],\n    'scope-enum': [\n      2,\n      'always',\n      [\n        'setup', // Project setup\n        'config', // Configuration files\n        'deps', // Dependency updates\n        'feature', // Feature-specific changes\n        'bug', // Bug fixes\n        'docs', // Documentation\n        'style', // Code style/formatting\n        'refactor', // Code refactoring\n        'test', // Tests\n        'build', // Build scripts or configuration\n        'ci', // Continuous integration\n        'release', // Release related changes\n        'other' // Other changes\n      ]\n    ]\n  }\n}\n                    \n                \n\n            \n                \n                    Check messages of commit with this format\n\n                \n            \n\n        \n    \n\n    src/core/env/env.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ENV_VALIDATION_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Joi.object({\n  // Database username, must be a string and is required.\n  DATA_SOURCE_USERNAME: Joi.string().required(),\n\n  // Database password, must be a string and is required.\n  DATA_SOURCE_PASSWORD: Joi.string().required(),\n\n  // Host address for the database, must be a string and is required.\n  DATA_SOURCE_HOST: Joi.string().required(),\n\n  // Port number for the database connection, must be a number and is required.\n  DATA_SOURCE_PORT: Joi.number().required(),\n\n  // Name of the database to connect to, must be a string and is required.\n  DATA_SOURCE_DATABASE: Joi.string().required(),\n\n  // Connection URL for the database, must be a string and is required.\n  DATA_SOURCE_URL: Joi.string().required(),\n\n  // Secret key for JSON Web Token encryption, must be a string and is required.\n  JWT_SECRET_KEY: Joi.string().required(),\n\n  // Current environment (e.g., development, production), must be a string and is required.\n  NODE_ENV: Joi.string().required()\n})\n                    \n                \n\n            \n                \n                    Defines a validation schema for environment variables using Joi.\nThis schema specifies the required fields for the application to run properly.\nEach field must meet the specified type requirements:\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/ipAddress.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IpAddress\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get ip address\n    const ip = request.headers['x-forwarded-for'] as string;\n\n    if (ip && process.env.NODE_ENV === 'production') {\n      ip.split(',')[0].replace(',', '');\n    }\n\n    // Set ip address\n    return ip ?? '127.0.0.1';\n  }\n)\n                    \n                \n\n            \n                \n                    IpAddress is a custom parameter decorator for use in NestJS controllers.\nIt extracts the client's IP address from the request object. The decorator will primarily\nbe used to inject the IP address into controller methods as a parameter.\nThe decorator performs the following operations:\n\nIt uses the ExecutionContext to access the HTTP request object.\nIt attempts to read the IP address from the 'x-forwarded-for' header, which is typically\nused in a proxied environment (like behind a load balancer).\nIf the application is running in a production environment and the 'x-forwarded-for' header\nis present, it splits the header value (which may contain multiple IPs) and keeps the first one,\nensuring that any extra spaces or commas are removed.\nIf no valid IP address is found, it defaults to returning '127.0.0.1', which is the localhost address.\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-password.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PASSWORD_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPassword'\n                    \n                \n\n            \n                \n                    A unique key identifier for the custom password validator\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, passwordRegex)\n                    \n                \n\n            \n                \n                    A helper function that checks if the given value matches the password regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsPassword\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions\n): PropertyDecorator => {\n  return ValidateBy({\n    name: IS_PASSWORD_KEY, // Name of the custom validation rule\n    validator: {\n      // Implementation of the validation logic, using the isPassword helper\n      validate: (value): boolean => isPassword(value),\n      // Custom default error message returned when validation fails\n      defaultMessage: buildMessage(\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom decorator function for validating passwords on class properties.\nIt utilizes the 'class-validator' library to create a validation rule for password strength.\nIt takes an optional validationOptions parameter for customizing error messages.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?=.*[a-z])(?=.*[A-Z])(?=.*[@$!%*?&])[a-zA-Z\\d@$!%*?&]{8,20}$/\n                    \n                \n\n            \n                \n                    Regular expression for validating a password.\nThe password must contain:\n\nAt least one lowercase letter\nAt least one uppercase letter\nAt least one special character from the specified set (@$!%*?&)\nLength between 8 to 20 characters\n\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/public.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_PUBLIC_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isPublic'\n                    \n                \n\n            \n                \n                    Defining a constant key for identifying public routes\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => SetMetadata(IS_PUBLIC_KEY, true)\n                    \n                \n\n            \n                \n                    The Public decorator function sets metadata on a route handler to indicate\nthat the route should be treated as public, meaning it does not require authentication.\nBy calling SetMetadata with the IS_PUBLIC_KEY and a value of true,\nthis decorator can be used to easily mark controller methods for public access.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-username.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IS_USERNAME_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'isUsername'\n                    \n                \n\n            \n                \n                    Key to identify the custom validation rule\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: string): boolean => matches(value, usernameRegex)\n                    \n                \n\n            \n                \n                    Function to determine if a value matches the username regex\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        IsUsername\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (\n  validationOptions?: ValidationOptions // Optional object for additional validation options\n): PropertyDecorator => {\n  return ValidateBy({\n    // Name of the validation rule\n    name: IS_USERNAME_KEY,\n\n    // Validator object containing the validation logic\n    validator: {\n      // Validation function that returns true if value is a valid username\n      validate: (value): boolean => isUsername(value),\n\n      // Default error message if validation fails\n      defaultMessage: buildMessage(\n        // Custom message format, indicating which property failed validation\n        (eachPrefix) => eachPrefix + '$property must be valid',\n        validationOptions\n      )\n    }\n  });\n}\n                    \n                \n\n            \n                \n                    Custom validation decorator for username validation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        usernameRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^(?!.*\\.\\.)(?!.*\\.$)[^\\W][\\w.]{3,30}$/\n                    \n                \n\n            \n                \n                    Define a regular expression for validating usernames\nUsername must:\n\nNot contain two consecutive dots\nNot end with a dot\nStart with a word character (not a special character)\nHave a length between 4 to 30 characters\n\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/validators/is-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IsBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (validationOptions?: ValidationOptions) =>\n  applyDecorators(DefaultIsBoolean(validationOptions), ToBoolean())\n                    \n                \n\n            \n                \n                    Create a custom decorator 'IsBoolean' that combines the default class-validator\n'IsBoolean' validation with a custom transformation decorator 'ToBoolean'.\nThis allows for both validation of boolean values and automatic conversion\nof input values into booleans before validation occurs.\n\n                \n            \n\n        \n    \n\n    src/core/common/decorators/transforms/to-boolean.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (value: unknown) => {\n  // Using switch statement to handle different input cases.\n  switch (value) {\n    // If the input value is null, return 'failure'.\n    case null:\n      return 'failure';\n\n    // When the input value is the string 'true', return a boolean true.\n    case 'true':\n      return true;\n\n    // When the input value is the string 'false', return a boolean false.\n    case 'false':\n      return false;\n\n    // For any other value, return the value unchanged.\n    default:\n      return value;\n  }\n}\n                    \n                \n\n            \n                \n                    A utility function that converts various input values to a boolean type.\nThe function returns either a boolean (true or false), a string 'failure', or the original value based on the input.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ToBoolean\n                        \n                    \n                \n            \n                \n                    \n                        Default value : () => Transform(({ obj, key }) => toBoolean(obj[key]))\n                    \n                \n\n            \n                \n                    A decorator function ToBoolean that applies the custom transformation logic to class properties.\nThis decorator uses the Transform decorator to map the relevant property value to its boolean representation\nusing the toBoolean function. It extracts the value from the object using the given key.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        User\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: string, ctx: ExecutionContext) => {\n    // Retrieve the request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Get the user object from the request\n    const user = request.user;\n\n    // Log the user object for debugging purposes\n    console.log('user', user);\n\n    // If a specific field is requested, return that field; otherwise, return the whole user object\n    return data ? user?.[data] : user;\n  }\n)\n                    \n                \n\n            \n                \n                    User decorator that extracts user information from the request object.\nThis custom decorator can be used in NestJS route handlers to easily access\nuser data stored in the request object. It leverages the createParamDecorator\nfunction provided by NestJS to create a parameter decorator that can be used in\ncontroller methods.\n\n                \n            \n\n        \n    \n\n    src/auth/decorators/user-agent.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserAgent\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, ctx: ExecutionContext): Device => {\n    // Retrieve the HTTP request object from the execution context\n    const request = ctx.switchToHttp().getRequest();\n\n    // Obtain the 'User-Agent' header from the request headers\n    const userAgent = request.headers['user-agent'];\n\n    // Initialize the device object with a default name of 'unknown'\n    let device: Device = {\n      name: 'unknown'\n    };\n\n    // If a User-Agent string is present, start pattern matching to identify the device\n    if (userAgent) {\n      // Check if the User-Agent indicates an iOS device\n      if (/like Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'iOS',\n          // Extract the version number using a regex pattern and replace underscores with dots\n          version: /CPU( iPhone)? OS ([0-9\\._]+) like Mac OS X/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates an Android device\n      } else if (/Android/.test(userAgent)) {\n        device = {\n          name: 'Android',\n          // Extract the version number of Android from the User-Agent string\n          version: /Android ([0-9\\.]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a macOS device\n      } else if (/(Intel|PPC) Mac OS X/.test(userAgent)) {\n        device = {\n          name: 'macOS',\n          // Extract the version number of macOS from the User-Agent string, replacing underscores with dots\n          version: /(Intel|PPC) Mac OS X ?([0-9\\._]*)[\\)\\;]/\n            .exec(userAgent)?.[2]\n            .replace(/_/g, '.')\n        };\n        // Check if the User-Agent indicates a Windows device\n      } else if (/Windows NT/.test(userAgent)) {\n        device = {\n          name: 'Windows',\n          // Extract the version number of Windows from the User-Agent string\n          version: /Windows NT ([0-9\\._]+)[\\);]/.exec(userAgent)?.[1]\n        };\n        // Check if the User-Agent indicates a Linux operating system\n      } else if (/Linux/i.test(userAgent) && /X11/i.test(userAgent)) {\n        device = {\n          name: 'Linux'\n          // Version detection can be added here if needed\n        };\n      }\n    }\n\n    // Return the parsed device information\n    return device;\n  }\n)\n                    \n                \n\n            \n                \n                    This decorator extracts and parses the 'User-Agent' header from the HTTP request,\nallowing the identification of the client's device type and version.\nIt is created using NestJS's createParamDecorator function.\n\n                \n            \n\n        \n    \n\n    src/core/common/util/common.constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        VALIDATION_PIPE_OPTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     ValidationPipeOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n  /**\n   * 'whitelist' option ensures that only properties that are defined in the DTO\n   * are allowed in the incoming request. Any properties that are not in the\n   * DTO will be stripped from the request object.\n   */\n  whitelist: true,\n\n  /**\n   * 'forbidNonWhitelisted' option throws an error if any non-whitelisted\n   * properties are present in the incoming request. This is useful for\n   * enforcing strict validation and preventing unexpected data from being processed.\n   */\n  forbidNonWhitelisted: true,\n\n  /**\n   * 'transform' option enables automatic transformation of incoming request\n   * data into the specified DTO types. This way, data will be automatically\n   * converted to the types defined in the DTO (e.g., string to number).\n   */\n  transform: true,\n\n  // 'transformOptions' allows for additional settings for the transformation process.\n  transformOptions: {\n    /**\n     * 'enableImplicitConversion' allows for automatic type conversion of properties\n     * to their respective types as defined in the DTO. For example, if a property\n     * is defined as a number in the DTO, a string representation of that number\n     * in the incoming request will be converted to a number automatically.\n     */\n    enableImplicitConversion: true\n  }\n}\n                    \n                \n\n            \n                \n                    Configuration object for the validation pipe in a NestJS application.\nThe validation pipe is used to automatically validate incoming requests and\ntransform DTOs (Data Transfer Objects) to the specified types.\nThe options set here enhance the validation and transformation process.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
